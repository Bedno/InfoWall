<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>InfoWall</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=1" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
<meta property="og:title" content="InfoWall">
<meta property="og:description" content="InfoWall : At-a-glance time, date, weather, webcams, more.">
<meta property="og:image" content="http://bedno.com/g/infowall.jpg">
<meta property="og:url" content="http://bedno.com/infowall">
<meta property="og:site_name" content="Bedno.com">

<script>
var About = 'InfoWall : At-a-glance time, date, weather, webcams, more.<br><br>' +
            'Click Time for next background. Click Date for next slideshow. Click Forecast to speak it.<br>' +
            '<span style="font-size:10pt;">Works best in Safari and Chrome (F11 for Full Screen).</span><br><br>' +
            '<a href="http://Bedno.com/infowall/about" target="About">More info...</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
            '<a href="http://AndrewBedno.com" target="AndrewBedno">AndrewBedno.com</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
            '<span onClick="TechReadout();" title="Click for technical details." style="font-size:8pt; color:#C0C0C0;">&#128295;</span>';  // Wrench icon.
// Demonstrates a number of advanced Javascript techniques:
//    Responsive auto-formatting.  Text to speech.  Canvas element and drawing.  Analog clock.
//    Weather API use (Wunderground.com).  JSON fetch and parse.
//    Querystring checking.  Read/write localstorage.
//    Catch/try feature detection.    Structured constant array.
//    Keypress handling.  Master updater using timer.
//    Sun/Moon calculations.  No dependencies.
// Incorporates SunCalc.js by Vladimir Agafonkin https://github.com/mourner/suncalc

// CONFIGURABLES:

// Configure Wunderground.com (Weather Underground) aspects below.  See http://www.wunderground.com/weather/api/
var InfoZip = '60657';  // Zipcode of this installation.  60657=Chicago
var InfoLat = 41.94637;  var InfoLon = -87.64519;  // Geocoordinates of this installation.  41.94637,-87.64519=Chicago
var InfoZone = 0;  // Timezone adjustment hours.  Should = <dateobj>.getTimezoneOffset()/60 but reads wrong on most browsers?!?
var WeatherURL = 'http://www.wunderground.com/cgi-bin/findweather/getForecast?query=zmw:'+InfoZip+'.1.99999&apiref=bf1a242569a63476';  // Detailed local forecast.  Change apiref if you have one.
// Examples below use periodically cached Chicago mirrors.  For live use substitute api specific as shown:
var WeatherForecastURL = 'http://chi.bike/d/w/wz-chicago-more.json';  // http://api.wunderground.com/api/<api_key>/forecast/pws/q/pws:KILCHICA173.json
var WeatherCurrentURL = 'http://chi.bike/d/w/wz-chicago-now.json';  // http://api.wunderground.com/api/<api_key>/conditions/pws/q/pws:KILCHICA173.json

var ClockColorDay = '#000000';  // Daytime color of some time/date parts.
var ClockColorNight = '#FFFFFF';  // Nighttime color of some mtime/date parts.
// Quick B&W: var ClockShadows = new Array('000000', '333333', '555555', '777777', '999999', 'BBBBBB', 'DDDDDD', 'FFFFFF', 'FFFFFF', 'FFFFFF');  // Sequence of hex characters, each later expanded to a #hhhhhh shade.  Formerly 03579BDFFF (shorter 048CF)
// Simple rainbow: var ClockShadows = new Array('9400D3',	'4B0082',	'0000FF',	'00FF00',	'FFFF00',	'FF7F00',	'FF0000');
var ClockShadows = new Array('C0F5F9','D2FCEE','E3FEE0','F1FBCF','FAF2BC','FEE5A9','FDD599','F6C28C','EAAF84','DA9E81','C89083','B6868B','A48198','9482A8','8988BA','8293CD','81A2DF','85B4ED');  // Pastel tones.
var ClockUpdDur = Math.floor(1000/ClockShadows.length);
var ForecastColor = '#EEEEEE';  // Forecast text color.
var WeatherForecastDur = 19*60*1000;  // Update forecast every 42 minutes to minimize API calls.
var WeatherCurrentDur = 10*60*1000;  // Update current every 10 minutes to minimize API calls.
var RadarURLsrc = "http://radar.weather.gov/ridge/lite/N0R/LOT_loop.gif";
var WeatherShadow = " text-shadow:-2px 2px 0px #000000;"
var MoonDiam = 1/6;  // Relative size of the displayed moon.
var WeatherCurrentHgt = 0.13;
var WeatherForecastHgt = 0.08;
var FloodDur = 250; // Cycle time between flood color changes.
var TwisterDur = 10000;  // Time between Twister spins.

// BACKGROUNDS and STYLING
var BGdata = [  // BGcode=Matched in URL.  BGshow= [A]nalog [C]lock [D]ate [F]orecast [I]ntro [M]oon [R]adar [S]huffle [W]eather [V]ocal
  { BGcode:"webcams", BGshow:"CDFIMW", BGslides: [  // BGlink=url for more info.  BGsrc=img src URL, 600-1200px wide, no extended chars.  BGdesc=Displayed name.  BGdur=milliseconds.  BGzoom=magnification (auto-centers).  BGsubdur=timer for autoinc slide.  BGsub=last subframe for autoinc slide.
    // Dead as of 2015.04.14: { BGsrc:"http://www.luc.edu/webcam/schbus/schbusfull.jpg?{unqsec}", BGlink:"http://www.luc.edu/webcams/", BGdesc:"Loyola, Water Tower", BGdur:4000, BGzoom:1, BGsub:0 },
    // Dead as of 2015.11.27: { BGsrc:"http://wwc.instacam.com/instacamimg/CUBBY/CUBBY_l.jpg?{unqsec}", BGlink:"http://web.live.weatherbug.com/LiveCameras/1/LiveCameras.aspx?no_cookie_zip=60618&no_cookie_stat=WGNTV&no_cookie_world_stat=&zcode=z5764&camera_group=1&enlarge=1&camera_id=CUBBY&lid=CNXCC", BGdesc:"Wrigley Field, Clark and Addison", BGdur:5000, BGzoom:1, BGsub:0 },
    // Dead as of 2016.06.30: { BGsrc:"http://images.earthcam.com/ec_metros/ourcams/rosensports.jpg?z={unqsec}", BGlink:"http://www.sportsworldchicago.com/fieldcam/", BGdesc:"Wrigley, Clark and Addison", BGdur:2000, BGzoom:1, BGsub:0 },
    // Dead as of 2016.09.02: { BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/Belmont_cap.jpg?{unqsec}", BGlink:"http://abc7chicago.com/weather/cams/belmont_cap/", BGdesc:"Belmont Harbor", BGdur:5000, BGzoom:1, BGsub:0 },
    { BGsrc:"http://icons.wunderground.com/webcamramdisk/r/h/RhodesNET/1/current.jpg?{unqmin}", BGlink:"https://www.wunderground.com/webcams/RhodesNET/1/show.html", BGdesc:"Water Station", BGdur:6000, BGzoom:1, BGsub:0 },
    { BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/Riverwalk.jpg?{unqmin}", BGdesc:"Riverwalk", BGlink:"http://abc7chicago.com/weather/cams/", BGdur:5000, BGzoom:1, BGsub:0 },
    { BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/HancockNorth.jpg?{unqmin}", BGdesc:"Hancock North", BGlink:"http://abc7chicago.com/weather/cams/", BGdur:5000, BGzoom:1, BGsub:0 },
    { BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/Loopscape.jpg?{unqmin}", BGdesc:"Downtown and the Lake", BGlink:"http://abc7chicago.com/weather/cams/", BGdur:5000, BGzoom:1, BGsub:0 },    
    { BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/ColumbiaCam.jpg?{unqmin}", BGdesc:"Grant Park", BGlink:"http://abc7chicago.com/weather/cams/", BGdur:5000, BGzoom:1, BGsub:0 },
    { BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/DaleyCam.jpg?{unqmin}", BGdesc:"Daley Plaza", BGlink:"http://abc7chicago.com/weather/cams/", BGdur:5000, BGzoom:1, BGsub:0 },
    { BGlink:"http://web.live.weatherbug.com/LiveCameras/1/LiveCameras.aspx?no_cookie_zip=60618&no_cookie_stat=WGNTV&no_cookie_world_stat=&zcode=z5764&lid=NAV5", BGsrc:"http://wwc.instacam.com/instacamimg/WGNTV/WGNTV_l.jpg?{unqmin}", BGdesc:"Western and Addison", BGdur:5000, BGzoom:1, BGsub:0 },
    { BGlink:"http://web.live.weatherbug.com/LiveCameras/1/LiveCameras.aspx?no_cookie_zip=60618&no_cookie_stat=WGNTV&no_cookie_world_stat=&zcode=z5764&camera_group=1&camera_zip=60613&enlarge=1&camera_id=CHSTC&lid=CNXCC", BGsrc:"http://wwc.instacam.com/instacamimg/CHSTC/CHSTC_l.jpg?{unqmin}", BGdesc:"St. Clement, 2524 N Orchard", BGdur:5000, BGzoom:1, BGsub:0 },
    { BGlink:"http://www.oakstbeach.com/", BGsrc:"http://205.178.49.123:8080/snapshot.cgi?user=guest&amp;pwd=password&amp;t=1421826844?{unqmin}", BGdesc:"Oak Street Beach", BGdur:5000, BGzoom:1, BGsub:0 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+"?{unqsec}", BGdesc:"Local Radar", BGdur:5000, BGzoom:1, BGsub:0 } ] },
  { BGcode:"art", BGshow:"ADISW", BGslides: [
    { BGlink:"http://bedno.com/g/infowall/art/Altdorfer-The_Battle_of_Alexander_the_Great-1529.jpg", BGsrc:"http://bedno.com/g/infowall/art/Altdorfer-The_Battle_of_Alexander_the_Great-1529.jpg", BGdesc:"Altdorfer: The Battle of Alexander the Great (1529)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Bosch-The_Last_Judgement-1505.jpg", BGsrc:"http://bedno.com/g/infowall/art/Bosch-The_Last_Judgement-1505.jpg", BGdesc:"Bosch: The Last Judgement (1505)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Botticelli-Allegoria_della_Primavera-1478.jpg", BGsrc:"http://bedno.com/g/infowall/art/Botticelli-Allegoria_della_Primavera-1478.jpg", BGdesc:"Botticelli: Allegoria della Primavera (1478)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Botticelli-Nascita_di_Venere-1485.jpg", BGsrc:"http://bedno.com/g/infowall/art/Botticelli-Nascita_di_Venere-1485.jpg", BGdesc:"Botticelli: Nascita di Venere (1485)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Bruegel-Babel_Tower-1563.jpg", BGsrc:"http://bedno.com/g/infowall/art/Bruegel-Babel_Tower-1563.jpg", BGdesc:"Bruegel: Babel Tower (1563)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Bruegel-Bethlem-1566.jpg", BGsrc:"http://bedno.com/g/infowall/art/Bruegel-Bethlem-1566.jpg", BGdesc:"Bruegel: Bethlem (1566)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Bruegel-Dutch_Proverbs-1559.jpg", BGsrc:"http://bedno.com/g/infowall/art/Bruegel-Dutch_Proverbs-1559.jpg", BGdesc:"Bruegel: Dutch Proverbs (1559)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Bruegel-Massacre_of_the_Innocents-1567.jpg", BGsrc:"http://bedno.com/g/infowall/art/Bruegel-Massacre_of_the_Innocents-1567.jpg", BGdesc:"Bruegel: Massacre of the Innocents (1567)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Bruegel-Procession_to_Calvary-1564.jpg", BGsrc:"http://bedno.com/g/infowall/art/Bruegel-Procession_to_Calvary-1564.jpg", BGdesc:"Bruegel: Procession to Calvary (1564)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Bruegel-The_Battle_Between_Carnival_and_Lent-1559.jpg", BGsrc:"http://bedno.com/g/infowall/art/Bruegel-The_Battle_Between_Carnival_and_Lent-1559.jpg", BGdesc:"Bruegel: The Battle Between Carnival and Lent (1559)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Bruegel-Triumph_of_Death-1562.jpg", BGsrc:"http://bedno.com/g/infowall/art/Bruegel-Triumph_of_Death-1562.jpg", BGdesc:"Bruegel: Triumph of Death (1562)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Caravaggio-Davide_Galea-1607.jpg", BGsrc:"http://bedno.com/g/infowall/art/Caravaggio-Davide_Galea-1607.jpg", BGdesc:"Caravaggio: Davide/ Galea (1607)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Chagall-I_and_the_Village-1911.jpg", BGsrc:"http://bedno.com/g/infowall/art/Chagall-I_and_the_Village-1911.jpg", BGdesc:"Chagall: I and the Village (1911)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Cranach-Flugelaltar_mit_dem_Jungsten_Gericht-1524.jpg", BGsrc:"http://bedno.com/g/infowall/art/Cranach-Flugelaltar_mit_dem_Jungsten_Gericht-1524.jpg", BGdesc:"Cranach: Flugelaltar mit dem Jungsten Gericht (1524)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Cranach-Johan_Friedun-1544.jpg", BGsrc:"http://bedno.com/g/infowall/art/Cranach-Johan_Friedun-1544.jpg", BGdesc:"Cranach: Johan Friedun (1544)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Dali-LEnigme_du_Desire-1929.jpg", BGsrc:"http://bedno.com/g/infowall/art/Dali-LEnigme_du_Desire-1929.jpg", BGdesc:"Dali: L'Enigme du Desire (1929)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Dali-Metamorphose_de_Narcisse-1937.jpg", BGsrc:"http://bedno.com/g/infowall/art/Dali-Metamorphose_de_Narcisse-1937.jpg", BGdesc:"Dali: Metamorphose de Narcisse (1937)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Dali-Persistence_of_Memory-1931.jpg", BGsrc:"http://bedno.com/g/infowall/art/Dali-Persistence_of_Memory-1931.jpg", BGdesc:"Dali: Persistence of Memory (1931)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Dali-Soft_Construction_with_Boiled_Beans-1936.jpg", BGsrc:"http://bedno.com/g/infowall/art/Dali-Soft_Construction_with_Boiled_Beans-1936.jpg", BGdesc:"Dali: Soft Construction with Boiled Beans (1936)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Ernst-Europe_After_the_Rain_II-1942.jpg", BGsrc:"http://bedno.com/g/infowall/art/Ernst-Europe_After_the_Rain_II-1942.jpg", BGdesc:"Ernst: Europe After the Rain II (1942)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Ernst-La_Ville_Entiere-1936.jpg", BGsrc:"http://bedno.com/g/infowall/art/Ernst-La_Ville_Entiere-1936.jpg", BGdesc:"Ernst: La Ville Entiere (1936)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Greco-Lacoonte-1610.jpg", BGsrc:"http://bedno.com/g/infowall/art/Greco-Lacoonte-1610.jpg", BGdesc:"Greco: Lacoonte (1610)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Greco-Toledo-1599.jpg", BGsrc:"http://bedno.com/g/infowall/art/Greco-Toledo-1599.jpg", BGdesc:"Greco: Toledo (1599)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Holbein-Ambassadors-1533.jpg", BGsrc:"http://bedno.com/g/infowall/art/Holbein-Ambassadors-1533.jpg", BGdesc:"Holbein: Ambassadors (1533)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Holbein-Georg_Gisze-1532.jpg", BGsrc:"http://bedno.com/g/infowall/art/Holbein-Georg_Gisze-1532.jpg", BGdesc:"Holbein: Georg Gisze (1532)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Holbein-Nikolaus_Kratzer-1528.jpg", BGsrc:"http://bedno.com/g/infowall/art/Holbein-Nikolaus_Kratzer-1528.jpg", BGdesc:"Holbein: Nikolaus Kratzer (1528)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klee-Ad_Marginen-1930.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klee-Ad_Marginen-1930.jpg", BGdesc:"Klee: Ad Marginen (1930)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klimt-Adele_Blochbauer-1907.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klimt-Adele_Blochbauer-1907.jpg", BGdesc:"Klimt: Adele Blochbauer (1907)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klimt-Avenue_Schloss_Kaven-1912.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klimt-Avenue_Schloss_Kaven-1912.jpg", BGdesc:"Klimt: Avenue Schloss Kaven (1912)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klimt-Beethovenfries-1902.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klimt-Beethovenfries-1902.jpg", BGdesc:"Klimt: Beethovenfries (1902)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klimt-Fritza_Riedler-1906.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klimt-Fritza_Riedler-1906.jpg", BGdesc:"Klimt: Fritza Riedler (1906)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klimt-Judith_I-1901.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klimt-Judith_I-1901.jpg", BGdesc:"Klimt: Judith I (1901)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klimt-Melo-1912.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klimt-Melo-1912.jpg", BGdesc:"Klimt: Melo (1912)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klimt-The_Kiss-1908.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klimt-The_Kiss-1908.jpg", BGdesc:"Klimt: The Kiss (1908)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Klimt-The_Virgin-1913.jpg", BGsrc:"http://bedno.com/g/infowall/art/Klimt-The_Virgin-1913.jpg", BGdesc:"Klimt: The Virgin (1913)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Leonardo-Gioconda_Mona_Lisa-1505.jpg", BGsrc:"http://bedno.com/g/infowall/art/Leonardo-Gioconda_Mona_Lisa-1505.jpg", BGdesc:"Leonardo: Gioconda/ Mona Lisa (1505)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Leonardo-Il_Cenacolo_The_Last_Supper-1497.jpg", BGsrc:"http://bedno.com/g/infowall/art/Leonardo-Il_Cenacolo_The_Last_Supper-1497.jpg", BGdesc:"Leonardo: Il Cenacolo/ The Last Supper (1497)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Magritte-Condition_Humain-1934.jpg", BGsrc:"http://bedno.com/g/infowall/art/Magritte-Condition_Humain-1934.jpg", BGdesc:"Magritte: Condition Humain (1934)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Magritte-Specchio_Falso-1928.jpg", BGsrc:"http://bedno.com/g/infowall/art/Magritte-Specchio_Falso-1928.jpg", BGdesc:"Magritte: Specchio Falso (1928)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Millet-Harvesters_Resting-1853.jpg", BGsrc:"http://bedno.com/g/infowall/art/Millet-Harvesters_Resting-1853.jpg", BGdesc:"Millet: Harvesters Resting (1853)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Monet-Nimphee-1926.jpg", BGsrc:"http://bedno.com/g/infowall/art/Monet-Nimphee-1926.jpg", BGdesc:"Monet: Nimphee (1926)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Monet-The_Grainstack-1896.jpg", BGsrc:"http://bedno.com/g/infowall/art/Monet-The_Grainstack-1896.jpg", BGdesc:"Monet: The Grainstack (1896)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Raffaello-Sposalizio_della_Vergine-1504.jpg", BGsrc:"http://bedno.com/g/infowall/art/Raffaello-Sposalizio_della_Vergine-1504.jpg", BGdesc:"Raffaello: Sposalizio della Vergine (1504)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Raffaello-Trasfigurazione-1519.jpg", BGsrc:"http://bedno.com/g/infowall/art/Raffaello-Trasfigurazione-1519.jpg", BGdesc:"Raffaello: Trasfigurazione (1519)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Rembrandt-Anatomy_Lesson_of_Dr_Nicolaes_Tulp-1632.jpg", BGsrc:"http://bedno.com/g/infowall/art/Rembrandt-Anatomy_Lesson_of_Dr_Nicolaes_Tulp-1632.jpg", BGdesc:"Rembrandt: Anatomy Lesson of Dr Nicolaes Tulp (1632)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Rembrandt-Belshazzars_Feast-1635.jpg", BGsrc:"http://bedno.com/g/infowall/art/Rembrandt-Belshazzars_Feast-1635.jpg", BGdesc:"Rembrandt: Belshazzar's Feast (1635)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Rembrandt-Militia_Company-1642.jpg", BGsrc:"http://bedno.com/g/infowall/art/Rembrandt-Militia_Company-1642.jpg", BGdesc:"Rembrandt: Militia Company (1642)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Renoir-Bal_du_Moulin_de_la_Galette-1876.jpg", BGsrc:"http://bedno.com/g/infowall/art/Renoir-Bal_du_Moulin_de_la_Galette-1876.jpg", BGdesc:"Renoir: Bal du Moulin de la Galette (1876)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Renoir-Le_Dejeuner_des_Canotiers-1881.jpg", BGsrc:"http://bedno.com/g/infowall/art/Renoir-Le_Dejeuner_des_Canotiers-1881.jpg", BGdesc:"Renoir: Le Dejeuner des Canotiers (1881)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Rousseau-Carnival_Evening-1886.jpg", BGsrc:"http://bedno.com/g/infowall/art/Rousseau-Carnival_Evening-1886.jpg", BGdesc:"Rousseau: Carnival Evening (1886)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Rousseau-Sleeping_Gypsy-1897.jpg", BGsrc:"http://bedno.com/g/infowall/art/Rousseau-Sleeping_Gypsy-1897.jpg", BGdesc:"Rousseau: Sleeping Gypsy (1897)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Rubens-Feast_of_Venus_Vennsfest-1637.jpg", BGsrc:"http://bedno.com/g/infowall/art/Rubens-Feast_of_Venus_Vennsfest-1637.jpg", BGdesc:"Rubens: Feast of Venus/ Vennsfest (1637)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Schiele-Death_and_the_Maiden-1915.jpg", BGsrc:"http://bedno.com/g/infowall/art/Schiele-Death_and_the_Maiden-1915.jpg", BGdesc:"Schiele: Death and the Maiden (1915)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Schiele-Family-1917.jpg", BGsrc:"http://bedno.com/g/infowall/art/Schiele-Family-1917.jpg", BGdesc:"Schiele: Family (1917)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Seurat-La_Grande_Jatte-1886.jpg", BGsrc:"http://bedno.com/g/infowall/art/Seurat-La_Grande_Jatte-1886.jpg", BGdesc:"Seurat: La Grande Jatte (1886)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Seurat-La_Parade_du_Cirque-1888.jpg", BGsrc:"http://bedno.com/g/infowall/art/Seurat-La_Parade_du_Cirque-1888.jpg", BGdesc:"Seurat: La Parade du Cirque (1888)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Tansey-Forward_Retreat-1986.jpg", BGsrc:"http://bedno.com/g/infowall/art/Tansey-Forward_Retreat-1986.jpg", BGdesc:"Tansey: Forward Retreat (1986)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Tansey-Mont_Sainte_Victoire-1987.jpg", BGsrc:"http://bedno.com/g/infowall/art/Tansey-Mont_Sainte_Victoire-1987.jpg", BGdesc:"Tansey: Mont Sainte-Victoire (1987)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Uccello-Battaglia_di_San_Romano_Part_I-1456.jpg", BGsrc:"http://bedno.com/g/infowall/art/Uccello-Battaglia_di_San_Romano_Part_I-1456.jpg", BGdesc:"Uccello: Battaglia di San Romano/Part I (1456)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Van_Eyck-Giovanni_Arnolfini_and_his_Wife-1434.jpg", BGsrc:"http://bedno.com/g/infowall/art/Van_Eyck-Giovanni_Arnolfini_and_his_Wife-1434.jpg", BGdesc:"Van Eyck: Giovanni Arnolfini and his Wife (1434)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Van_Eyck-The_Virgin_of_Ivers-1435.jpg", BGsrc:"http://bedno.com/g/infowall/art/Van_Eyck-The_Virgin_of_Ivers-1435.jpg", BGdesc:"Van Eyck: The Virgin of Ivers (1435)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Van_Gogh-Cypresses-1889.jpg", BGsrc:"http://bedno.com/g/infowall/art/Van_Gogh-Cypresses-1889.jpg", BGdesc:"Van Gogh: Cypresses (1889)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Van_Gogh-Potato_Eaters-1885.jpg", BGsrc:"http://bedno.com/g/infowall/art/Van_Gogh-Potato_Eaters-1885.jpg", BGdesc:"Van Gogh: Potato Eaters (1885)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Van_Gogh-Starry_Night-1889.jpg", BGsrc:"http://bedno.com/g/infowall/art/Van_Gogh-Starry_Night-1889.jpg", BGdesc:"Van Gogh: Starry Night (1889)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Velasquez-Las_Meninas-1656.jpg", BGsrc:"http://bedno.com/g/infowall/art/Velasquez-Las_Meninas-1656.jpg", BGdesc:"Velasquez: Las Meninas (1656)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Vermeer-Malkunst-1666.jpg", BGsrc:"http://bedno.com/g/infowall/art/Vermeer-Malkunst-1666.jpg", BGdesc:"Vermeer: Malkunst (1666)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Vermeer-The_Astronomer-1668.jpg", BGsrc:"http://bedno.com/g/infowall/art/Vermeer-The_Astronomer-1668.jpg", BGdesc:"Vermeer: The Astronomer (1668)", BGdur:15000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/art/Veronese-Nozze_di_Cana-1563.jpg", BGsrc:"http://bedno.com/g/infowall/art/Veronese-Nozze_di_Cana-1563.jpg", BGdesc:"Veronese: Nozze di Cana (1563)", BGdur:15000, BGzoom:1, BGsub:0 } ] },
  { BGcode:"yoga", BGshow:"I", BGslides: [
    { BGlink:"http://bedno.com/g/infowall/yoga/01.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/01.jpg", BGdesc:"Namaste", BGdur:6200, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/02.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/02.jpg", BGdesc:"Mountain", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/03.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/03.jpg", BGdesc:"Forward Fold", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/04.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/04.jpg", BGdesc:"Left Leg Lunge", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/05.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/05.jpg", BGdesc:"Plank", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/06.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/06.jpg", BGdesc:"8 Point", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/07.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/07.jpg", BGdesc:"Cobra", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/08.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/08.jpg", BGdesc:"Downward Dog", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/09.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/09.jpg", BGdesc:"Right Leg Lunge", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/10.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/10.jpg", BGdesc:"Forward Fold", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/11.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/11.jpg", BGdesc:"Mountain", BGdur:4800, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/12.jpg", BGsrc:"http://bedno.com/g/infowall/yoga/12.jpg", BGdesc:"Namaste", BGdur:2000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/g/infowall/yoga/workout.png", BGsrc:"http://bedno.com/g/infowall/yoga/workout.png", BGdesc:"Workout", BGdur:6000, BGzoom:1, BGsub:0 } ] },
  { BGcode:"zoom", BGshow:"CDI", BGslides: [
    { BGlink:"http://bedno.com/photos/album/zoom/universe", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-00-universe.jpg", BGdesc:"Observable Universe. 1.7E26m", BGdur:2000, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/supercluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-01-supercluster.jpg", BGdesc:"Local Galactic Supercluster. 2.7E24m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/cluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-02-cluster.jpg", BGdesc:"Local Galactic Cluster. 9E22m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/galaxy", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-03-galaxy.jpg", BGdesc:"Galaxy Similar to Ours. 5.2E20m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/stars", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-10-stars.jpg", BGdesc:"Local Star Clusters. 9.5E17m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/sun", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-11-sun.jpg", BGdesc:"Sun. 1.4E9m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/planets", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-12-planets.jpg", BGdesc:"Solar System. 2.5E8m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/earth", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-13-earth.jpg", BGdesc:"Earth. 1.3E7m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/nation", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-20-nation.jpg", BGdesc:"North America. 4E6m ", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/city", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-21-city.jpg", BGdesc:"Chicago. 4.5E4m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/block", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-22-block.jpg", BGdesc:"Neighborhood. 5E2m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/room", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-23-room.jpg", BGdesc:"Apartment. 1E1m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/cells", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-31-cells.jpg", BGdesc:"Cells. 2E-5m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/atoms", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-32-atoms.jpg", BGdesc:"Molecules. 9E-9m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/quark", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-33-quark.jpg", BGdesc:"Instantons. 1.6E-35m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/atoms", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-32-atoms.jpg", BGdesc:"Molecules. 9E-9m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/cells", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-31-cells.jpg", BGdesc:"Cells. 2E-5m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/room", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-23-room.jpg", BGdesc:"Apartment. 1E1m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/block", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-22-block.jpg", BGdesc:"Neighborhood. 5E2m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/city", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-21-city.jpg", BGdesc:"Chicago. 4.5E4m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/nation", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-20-nation.jpg", BGdesc:"North America. 4E6m ", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/earth", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-13-earth.jpg", BGdesc:"Earth. 1.3E7m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/planets", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-12-planets.jpg", BGdesc:"Solar System. 2.5E8m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/sun", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-11-sun.jpg", BGdesc:"Sun. 1.4E9m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/stars", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-10-stars.jpg", BGdesc:"Local Star Clusters. 9.5E17m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/galaxy", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-03-galaxy.jpg", BGdesc:"Galaxy Similar to Ours. 5.2E20m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/cluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-02-cluster.jpg", BGdesc:"Local Galactic Cluster. 9E22m", BGdur:1500, BGzoom:1, BGsub:0 },
    { BGlink:"http://bedno.com/photos/album/zoom/supercluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-01-supercluster.jpg", BGdesc:"Local Galactic Supercluster. 2.7E24m", BGdur:1500, BGzoom:1, BGsub:0 } ] },
  { BGcode:"movie", BGshow:"ADIW", BGslides: [
    { BGsrc:"http://bedno.com/g/infowall/v/beach/beach-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:50 },
    { BGsrc:"http://bedno.com/g/infowall/v/candles/candles-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:36 },
    { BGsrc:"http://bedno.com/g/infowall/v/clouds/clouds-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:21 },
    { BGsrc:"http://bedno.com/g/infowall/v/fire/fire-000.jpg", BGlink:"", BGdesc:"", BGdur:333, BGzoom:1, BGsub:424 },
    { BGsrc:"http://bedno.com/g/infowall/v/fish/fish-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:330 },
    { BGsrc:"http://bedno.com/g/infowall/v/lava/lava-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:258 },
    { BGsrc:"http://bedno.com/g/infowall/v/lcars/lcars-000.jpg", BGlink:"", BGdesc:"", BGdur:250, BGzoom:1, BGsub:627 },
    { BGsrc:"http://bedno.com/g/infowall/v/matrix/matrix-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:70 },
    { BGsrc:"http://bedno.com/g/infowall/v/snow/snow-000.jpg", BGlink:"", BGdesc:"", BGdur:500, BGzoom:1, BGsub:80 },
    { BGsrc:"http://bedno.com/g/infowall/v/space/space-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:595 },
    { BGsrc:"http://bedno.com/g/infowall/v/sun/sun-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:543 },
    { BGsrc:"http://bedno.com/g/infowall/v/warp/warp-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:211 },
    { BGsrc:"http://bedno.com/g/infowall/v/waterfall/waterfall-000.jpg", BGlink:"", BGdesc:"", BGdur:375, BGzoom:1, BGsub:37 } ] },
  { BGcode:"colors", BGshow:"", BGslides: [
    { BGsrc:"#303030", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#505050", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#707070", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#909090", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#B0B0B0", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#D0D0D0", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#FFFFFF", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#000030", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#000050", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#000070", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#000090", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#0000B0", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#0000D0", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#0000FF", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#003000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#005000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#007000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#009000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#00B000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#00D000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#00FF00", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#300000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#500000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#700000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#900000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#B00000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#D00000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 },
    { BGsrc:"#FF0000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0 } ] },
  { BGcode:"twister", BGshow:"ISV", BGslides: [
    { BGsrc:"http://bedno.com/g/infowall/twister/lfb.png", BGlink:"http://bedno.com/twister", BGdesc:"Left Foot Blue", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/lfg.png", BGlink:"http://bedno.com/twister", BGdesc:"Left Foot Green", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/lfr.png", BGlink:"http://bedno.com/twister", BGdesc:"Left Foot Red", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/lfy.png", BGlink:"http://bedno.com/twister", BGdesc:"Left Foot Yellow", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/lhb.png", BGlink:"http://bedno.com/twister", BGdesc:"Left Hand Blue", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/lhg.png", BGlink:"http://bedno.com/twister", BGdesc:"Left Hand Green", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/lhr.png", BGlink:"http://bedno.com/twister", BGdesc:"Left Hand Red", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/lhy.png", BGlink:"http://bedno.com/twister", BGdesc:"Left Hand Yellow", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/rfb.png", BGlink:"http://bedno.com/twister", BGdesc:"Right Foot Blue", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/rfg.png", BGlink:"http://bedno.com/twister", BGdesc:"Right Foot Green", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/rfr.png", BGlink:"http://bedno.com/twister", BGdesc:"Right Foot Red", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/rfy.png", BGlink:"http://bedno.com/twister", BGdesc:"Right Foot Yellow", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/rhb.png", BGlink:"http://bedno.com/twister", BGdesc:"Right Hand Blue", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/rhg.png", BGlink:"http://bedno.com/twister", BGdesc:"Right Hand Green", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/rhr.png", BGlink:"http://bedno.com/twister", BGdesc:"Right Hand Red", BGdur:TwisterDur, BGzoom:1, BGsub:0 },
    { BGsrc:"http://bedno.com/g/infowall/twister/rhy.png", BGlink:"http://bedno.com/twister", BGdesc:"Right Hand Yellow", BGdur:TwisterDur, BGzoom:1, BGsub:0 } ] }
  ];

// GLOBALS
var MasterDur = 100;  // Master update frequency.  All timers and durations are in milliseconds.  500=half second.
var MasterTimer = null;
var WinWidPhys, WinHgtPhys, WinWid, WinHgt, WinMin, WinMax;
var MarginTop = 0;  var MarginLeft = 0;  var MarginBottom = 0;  var MarginRight = 0;
var OfsX = 0;  var OfsY = 0;  // Randomized slight offsets to reduce screen burn-in.
var BGcurr = 0;  var BGcurrChk = 0;  var BGflooded = 0;
var BGprev  = -1;
var BGshowCurr = "";  var BGshowOverride = 0;  var BGdurMult = 0;  var BGdurMultStr = '';  var BGshowArg = '';
var BGshowArr = new Array('','CI', 'CDI', 'CDIW', 'CDFIMRW', 'AI','ADI','ADWI');  // [A]nalog [C]lock [D]ate [F]orecast [I]ntro [M]oon [R]adar [W]eather
var ShowIntro = 1;
var BGframe = 0;  var BGframePrev = BGframe;  var BGframePrevs = new Array(-1,-1,-1);
var BGframeInc = 1;  var BGtimer = -1;  var BGframeIncPrev = BGframeInc;
var BGdescBG = "";
var BGsubIdx = 0;  var SaveFrame = false;

var SunRise = '';  var SunSet = '';  var SunTimeSizing = 0.04;
var ClockColor = ClockColorDay;  var ClockColorPrev = '';  var ClockColorOpp = ClockColorNight;
var ClockUpdTimer = 0;  var AnalogClockUpdDur = 500;
var ClockShadow = "";  var ClockShadowSeq = 0;  var ClockShade = "";
var ClockCanvas, ClockContext;
var ClockCanvasBG, ClockContextBG;
var HourPrev = -1;  var HourCurr = -1;
var MinutePrev = -1;  var MinuteCurr = -1;
var AbrvMon = new Array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
var AbrvDoW = new Array('Su', 'Mo','Tu','We','Th','Fr', 'Sa');
var WeatherCurrent = '';
var WeatherCurrentIcon = '';
var WeatherCurrentSpoken = "";
var WeatherForecast = '';
var WeatherForecastSpoken = [];
var WeatherForecastTimer = 0;
var WeatherCurrentTimer = 0;
var WeatherURLeff = "";
var RadarURLeff = "";
var RadarWid, RadarHgt;
var IntroDur = 10000;  var IntroTimer = IntroDur+1;
var BootedCurr = "";  var BootedFirst = "";
var ResizeTimer = null;
var StopwatchStarted = 0;  var StopwatchLaps = "";  var StopwatchDT;
var StopwatchDur = 1000;  var StopwatchTimer = StopwatchDur;
var SpeechVoices = null;

// Utils.
function IsIOS () { return((navigator.userAgent.toLowerCase().indexOf('iphone')>-1) || (navigator.userAgent.toLowerCase().indexOf('ipod')>-1) || (navigator.userAgent.toLowerCase().indexOf('ipad')>-1) || (navigator.userAgent.toLowerCase().indexOf('ios')>-1) ); }
function IsAndroid () { return((navigator.userAgent.toLowerCase().indexOf('droid')>-1)); }

// Remember some settings.
function haslocalstorage () { try { return 'localStorage' in window && window['localStorage'] !== null; } catch(e){ return false; } }
function DTadj () {
  var DTadjTmp = new Date();
  return(DTadjTmp.getTime() + (InfoZone*60*60*1000));
}

// Used to force non-caching of webcam images.
function UnqSec () {
  var UAdt=new Date(DTadj());
  return(''+UAdt.getYear().toString()+''+UAdt.getMonth().toString()+''+UAdt.getDate().toString()+''+UAdt.getHours().toString()+''+UAdt.getMinutes().toString()+''+UAdt.getSeconds().toString()+'');
}
function UnqMin () {
  var UAdt=new Date(DTadj());
  var UAMinFrac = Math.floor(UAdt.getMinutes()/5);
  return(''+UAdt.getYear().toString()+''+UAdt.getMonth().toString()+''+UAdt.getDate().toString()+''+UAdt.getHours().toString()+''+UAMinFrac.toString()+'');
}

// Check if current slideshow contains any movie slides.
function HasAniSubs () {
  for (var AniLp=0; AniLp<BGdata[BGcurr].BGslides.length; AniLp++) {
    if (BGdata[BGcurr].BGslides[AniLp].BGsub>0) { return(true); }
  }
  return(false)
}

// Setup required mix of visibilities.
function SetupVisibilities () {
  // BGshow= [A]nalog [C]lock [D]ate [F]orecast [M]oon [R]adar [S]huffle [W]eather
  if (document.getElementById('DivIntro')) { document.getElementById('DivIntro').style.visibility='hidden'; }
  if (document.getElementById('DivWhole')) { document.getElementById('DivWhole').style.visibility='visible'; }
  if (document.getElementById('DivIntro')) { document.getElementById('DivIntro').style.visibility='hidden'; }
  if (document.getElementById('DivBG')) {
    document.getElementById('DivBG').style.visibility='visible';
  }
  if (document.getElementById('DivBGdesc')) { document.getElementById('DivBGdesc').style.visibility='visible'; }
  if (BGshowCurr.indexOf('C')<0) {
    document.getElementById('DivTime').style.visibility='hidden';
    document.getElementById('SpanTime').style.visibility='hidden';
  } else {
    document.getElementById('DivTime').style.visibility='visible';
    document.getElementById('SpanTime').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('A')<0) {
    document.getElementById('DivAnalogBG').style.visibility='hidden';
    document.getElementById('DivAnalog').style.visibility='hidden';
  } else {
    document.getElementById('DivAnalogBG').style.visibility='visible';
    document.getElementById('DivAnalog').style.visibility='visible';
    DrawAnalogBG();
  }
  if ( (BGshowCurr.indexOf('I')<0) || (location.href.toLowerCase().indexOf('kiosk')>=0) ) {
    document.getElementById('DivAbout').style.visibility='hidden';
  } else {
    document.getElementById('DivAbout').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('D')<0) {
    document.getElementById('DivDate').style.visibility = 'hidden';
    document.getElementById('SpanDate').style.visibility = 'hidden';
  } else {
    document.getElementById('DivDate').style.visibility = 'visible';
    document.getElementById('SpanDate').style.visibility = 'visible';
  }
  if (BGshowCurr.indexOf('W')<0) {
    document.getElementById('DivWeatherCurrent').style.visibility='hidden';
  } else {
    document.getElementById('DivWeatherCurrent').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('F')<0) {
    document.getElementById('DivWeatherForecast').style.visibility='hidden';
  } else {
    document.getElementById('DivWeatherForecast').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('M')<0) {
    document.getElementById('DivMoonImg').style.visibility='hidden';
    document.getElementById('DivSunTimes').style.visibility='hidden';
  } else {
    document.getElementById('DivMoonImg').style.visibility='visible';
    document.getElementById('DivSunTimes').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('R')<0) {
    document.getElementById('DivRadar').style.visibility='hidden';
    document.getElementById('RadarImg').style.visibility='hidden';
  } else {
    document.getElementById('DivRadar').style.visibility='visible';
    document.getElementById('RadarImg').style.visibility='visible';
  }
  if ( (BGshowCurr.indexOf('A')<0) && (BGshowCurr.indexOf('C')<0) && (BGshowCurr.indexOf('D')<0) ) {
    document.getElementById('DivBG').addEventListener("click", NextBG, false);
  }
  if (StopwatchStarted > 0) { 
    document.getElementById('DivStopwatch').style.visibility='visible';
  }
}

// Initialize and arrange all screen elements based on options.
function SetupScreen () {
  var FrameCheck = '';
  SetupVisibilities();
  BGtimer = -1;
  if (HasAniSubs()) { // Subanimate frame.
    BGframe = 0;  // Recall which animated frame is in use.
    if (haslocalstorage()) {
      try {
        FrameCheck = ''+localStorage.getItem('sub');
      } catch (err) { }
    }
    FrameCheck = FrameCheck.replace(/\D/g, '');
    if (FrameCheck.length>0) {
      BGframe = parseInt(FrameCheck);
      if ( (BGframe<0) || (BGframe>=BGdata[BGcurr].BGslides.length) ) { BGframe = 0; }
      BGframePrev = BGframe;
    }
    BGframeInc = 0;  // Pause frame incrementing.
    SaveFrame = true;
  } else {  // Handle frames normally.
    BGsubIdx = -1;
    BGframeInc = 1;
  }
  document.getElementById('DivWhole').style.backgroundColor = '#000000';
}

// Increment to next BG on user keypress or click.
function NextBG () {
  BGcurr = (BGcurr+1) % BGdata.length;  BGprev = -1;
  if (haslocalstorage()) {
    try { localStorage.setItem('main', BGcurr.toString()); }
    catch (err) { }
  }
  BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
  ShowIntro = 0;  IntroTimer = -1;
  DoRefresh();
}

function DoSpeech (DSin) {
  if ('speechSynthesis' in window) {
    window.speechSynthesis.cancel();
    var SFmsg = new SpeechSynthesisUtterance();
    SFmsg.voice = SpeechVoices[10];
    SFmsg.voiceURI = 'native';
    SFmsg.volume = 1.0; // 0 to 1
    SFmsg.rate = 1.0; // 0.1 to 10
    SFmsg.pitch = 1.0; // 0 to 2
    SFmsg.lang = 'en-US';
    SFmsg.text = DSin;
    window.speechSynthesis.speak(SFmsg);
  }
}

// Background update handler.  Sequences through slides.
function UpdBG () {
  var ImgSrc = '';
  var ImgNumStr = '';
  var ImgIdxStr = '';
  var BGlinkEff = "";
  if (BGtimer < MasterDur) {
    if (BGframeInc < 1) {  // If not incrementing frame, restore last index.
      BGframe = BGframePrev;
    } else {  // If shuffling, pick semi-random frame.
      if (BGshowCurr.indexOf('S')>=0) {
        BGframePrev = BGframe;
        do { BGframe = Math.floor(Math.random()*BGdata[BGcurr].BGslides.length); }
        while ( (BGframePrev==BGframe) || (BGframePrevs[0]==BGframe) || (BGframePrevs[1]==BGframe) || (BGframePrevs[2]==BGframe) );
        BGframePrevs[2]=BGframePrevs[1];  BGframePrevs[1]=BGframePrevs[0];  BGframePrevs[0]=BGframe;
      }
      // Otherwise use current frame index (incremented in NextBG() function)
    }
    document.getElementById('DivBGdesc').innerHTML = '';
    if (BGdata[BGcurr].BGslides[BGframe].BGzoom==1) {
      document.getElementById('DivBG').style.top = 0;
      document.getElementById('DivBG').style.left = 0;
    } else {
      document.getElementById('DivBG').style.top = Math.floor(0.5*(WinHgt-(WinHgt*BGdata[BGcurr].BGslides[BGframe].BGzoom)));
      document.getElementById('DivBG').style.left = Math.floor(0.5*(WinWid-(WinWid*BGdata[BGcurr].BGslides[BGframe].BGzoom)));
    }
    ImgSrc = BGdata[BGcurr].BGslides[BGframe].BGsrc;
    if (BGdata[BGcurr].BGslides[BGframe].BGsub > 0) {  // Subanimate frame.
      ImgNumStr = ImgSrc.replace(/\D/g, '');
      if (ImgNumStr.length>0) {
        if ( (BGsubIdx < 0) || (BGsubIdx > BGdata[BGcurr].BGslides[BGframe].BGsub) ) { BGsubIdx = 0; }
        ImgIdxStr = BGsubIdx.toString();
        if (ImgIdxStr.length < ImgNumStr.length) ImgIdxStr = new Array(ImgNumStr.length - ImgIdxStr.length + 1).join("0") + ImgIdxStr;
        ImgSrc = ImgSrc.replace(ImgNumStr, ImgIdxStr);
        BGsubIdx++;
        if (BGsubIdx > BGdata[BGcurr].BGslides[BGframe].BGsub) { BGsubIdx = 0; }
      }
    }
    if (SaveFrame) {
      if (haslocalstorage()) {
        try { localStorage.setItem('sub', BGframe.toString()); }
        catch (err) { }
      }
      SaveFrame = false;
    }
    if (ImgSrc.length<12) {  // Simple color flood.
      if (BGflooded < 1) {
        AllDivsOff();
        document.getElementById('DivCanvas').style.visibility='visible';
        BGflooded = 1;
      }
      document.getElementById('DivBG').style.visibility='hidden';
      DrawFloodlight(ImgSrc);
    } else {
      BGflooded = 0;
      if (ImgSrc.toLowerCase().indexOf('.htm')>=0) {  // Incomplete support for HTM/JS backgrounds.
        if (document.getElementById('DivBG').innerHTML.toLowerCase().indexOf('<iframe')<0) { document.getElementById('DivBG').innerHTML = '<iframe id="ImgBG" align="center" frameborder=0 height="'+WinHgt.toString()+'" width="'+WinWid.toString()+'" scrolling=no src="" onClick="NextBG();"></iframe>'; }
        document.getElementById('ImgBG').src = ImgSrc;
      } else {
        ImgSrc = ImgSrc.replace(/{unqsec}/,UnqSec());
        ImgSrc = ImgSrc.replace(/{unqmin}/,UnqMin());
        if (document.getElementById('DivBG').innerHTML.toLowerCase().indexOf('<img')<0) { document.getElementById('DivBG').innerHTML = '<img src="" id="ImgBG" width=0 height=0 style="margin-top:0px; margin-left:0px;" border=0>'; }
        document.getElementById('ImgBG').src = ImgSrc;
        document.getElementById('ImgBG').height = Math.floor(WinHgt*BGdata[BGcurr].BGslides[BGframe].BGzoom);
        document.getElementById('ImgBG').width = Math.floor(WinWid*BGdata[BGcurr].BGslides[BGframe].BGzoom);
      }
      document.getElementById('DivBG').style.visibility='visible';
    }
    BGlinkEff = BGdata[BGcurr].BGslides[BGframe].BGlink;
    if (BGlinkEff == WeatherURL) { BGlinkEff = WeatherURLeff; }
    if (IsIOS()) { DescSize = 8; } else { DescSize = 12; }
    if (BGdata[BGcurr].BGslides[BGframe].BGdesc) {
      if (BGlinkEff!="") {
        document.getElementById('DivBGdesc').innerHTML = '<a href="'+BGlinkEff+'" target=_blank style="font-family:Arial; color:#EEEEEE; text-decoration:none; font-size:'+DescSize.toString()+'pt; '+BGdescBG+' text-shadow:-2px 2px 0px #000000;" id="SpanBGdesc">&nbsp;&nbsp;&nbsp;'+BGdata[BGcurr].BGslides[BGframe].BGdesc+BGdurMultStr+'&nbsp;</a>';
      } else {
        document.getElementById('DivBGdesc').innerHTML = '<span style="font-family:Arial; color:#EEEEEE; text-decoration:none; font-size:'+DescSize.toString()+'pt; text-shadow:-2px 2px 0px #000000;" id="SpanBGdesc">&nbsp;&nbsp;&nbsp;'+BGdata[BGcurr].BGslides[BGframe].BGdesc+BGdurMultStr+'&nbsp;</span>';
      }
      // Speak the current image description (used by Twister mode)
      if (BGshowCurr.indexOf('V')>=0) { DoSpeech(BGdata[BGcurr].BGslides[BGframe].BGdesc.substr(0,99)); }
    }
    if (BGshowCurr.indexOf('R')>=0) {  // Hide embedded radar if frame is same radar
      if (ImgSrc.toUpperCase().indexOf(RadarURLsrc.toUpperCase())>=0) {
        document.getElementById('RadarImg').style.visibility='hidden';
      } else {
        document.getElementById('RadarImg').style.visibility='visible';
      }
    } else {
      document.getElementById('RadarImg').style.visibility='hidden';
    }
    BGtimer = BGdata[BGcurr].BGslides[BGframe].BGdur*(1+Math.round(.5*BGdurMult*10)/10);
    BGframePrev = BGframe;
    if (BGframeInc>0) { BGframe = (BGframe+BGframeInc) % BGdata[BGcurr].BGslides.length; }
  } else {
    if (BGtimer<999999) { BGtimer -= MasterDur; }
  }
}

// Show the moon in current phase.
function ShowMoon () {
  SetupSun();
  var MoonTimes = SunCalc.getMoonIllumination(new Date());
  var MoonPhase = Math.floor(MoonTimes.phase*10);
  var MoonDaysToFull = 0;
  var SunMoonOut = "";
  if (MoonTimes.phase<0.5) {
    MoonDaysToFull = ''+(Math.floor((29.53/2) - (29.53*MoonTimes.phase)));
  } else {
    MoonDaysToFull = (Math.floor(29.53*(0.5-MoonTimes.phase)));
  }
  if (BGshowCurr.indexOf('M')>=0) {
    document.getElementById('DivMoonImg').style.left = OfsX+Math.floor(WinWid-(WinMin*MoonDiam)+11)+'px';
    document.getElementById('DivMoonImg').innerHTML = '<img align=top src="http://bedno.com/g/moon'+(MoonPhase)+'.gif" height='+(WinMin*MoonDiam)+' width='+(WinMin*MoonDiam)+' border=0>';
    document.getElementById('DivSunTimes').style.left = (OfsX)+'px';
    document.getElementById('DivSunTimes').style.top = (OfsY)+'px';
    document.getElementById('DivSunTimes').style.width = (WinWid-4)+'px';
    SunMoonOut += '<span style="line-height:'+Math.floor(WinWid*SunTimeSizing*.77)+'px;">';
    SunMoonOut += '<span style="line-height:'+Math.floor(WinWid*SunTimeSizing*1.3)+'px; font-size:'+Math.floor(WinWid*SunTimeSizing*1.2)+'px; text-decoration:bold; font-family:Arial; ';
    if (MoonDaysToFull<0) {
      SunMoonOut += 'color:#000000; text-shadow:-2px 2px 0px #FFFFFF;" alt="Days SINCE full moon.';
    } else {
      SunMoonOut += 'color:#FFFFFF; text-shadow:-2px 2px 0px #000000;" alt="Days UNTIL full moon.';
    }
    SunMoonOut += '">'+Math.abs(MoonDaysToFull).toString()+'&nbsp;&nbsp;</span><br>';
    SunMoonOut += '<span style="font-family:Arial; text-decoration:bold; color:#FFFF40; font-size:'+Math.floor(WinWid*SunTimeSizing)+'px;" alt="Sunrise time.">'+SunRise+'<br></span>';
    SunMoonOut += '<span style="font-family:Arial; text-decoration:bold; color:#FFFF40; font-size:'+Math.floor(WinWid*SunTimeSizing)+'px;" alt="Sunset time.">'+SunSet+'</span></span>';
    document.getElementById('DivSunTimes').innerHTML = SunMoonOut;
  }
}

// Fetch sunrise/set times and moon phase.  Set clock color.
function SetupSun () {
  var SunTimes = SunCalc.getTimes(new Date(DTadj()), InfoLat, InfoLon);
  var SunAdjMS = SunTimes.sunrise.getTime() + (InfoZone*60*60*1000);
  var SunAdjDT = new Date(SunAdjMS);
  if (SunAdjDT.getHours()<1) { SunRise = '12'; }
  if (SunAdjDT.getHours()>12) { SunRise = ''+(SunAdjDT.getHours()-12); } else { SunRise = ''+SunAdjDT.getHours(); }
  if (SunAdjDT.getMinutes()<10) { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.5)+'">:</span>0'+SunAdjDT.getMinutes(); } else { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.5)+'">:</span>'+SunAdjDT.getMinutes(); }
  // if (SunAdjDT.getHours()>11) { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.4)+'">P</span>'; } else { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.4)+'">A</font>'; }
  SunUp = Math.floor(SunAdjDT.getHours());
  SunAdjMS = SunTimes.sunset.getTime() + (InfoZone*60*60*1000);
  SunAdjDT = new Date(SunAdjMS);
  if (SunAdjDT.getHours()<1) { SunSet = '12'; }
  if (SunAdjDT.getHours()>12) { SunSet = ''+(SunAdjDT.getHours()-12); } else { SunSet = ''+SunAdjDT.getHours(); }
  if (SunAdjDT.getMinutes()<10) { SunSet += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.5)+'">:</span>0'+SunAdjDT.getMinutes(); } else { SunSet += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.5)+'">:</span>'+SunAdjDT.getMinutes(); }
  // if (SunAdjDT.getHours()>11) { SunSet += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.4)+'">P</font>'; } else { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.4)+'">A</font>'; }
  SunDown = Math.floor(SunAdjDT.getHours());
  var SSdt=new Date(DTadj()); SSh=SSdt.getHours();
  if ( (SSh >= SunUp) && (SSh < SunDown) ) { ClockColor = ClockColorDay; ClockColorOpp = ClockColorNight; } else { ClockColor = ClockColorNight; ClockColorOpp = ClockColorDay; }
}

// Configure location and visibility of radar inset.
function SetupRadar () {
  var RadarImgOut = "";
  document.getElementById('DivRadar').style.top = '-2px';
  document.getElementById('DivRadar').style.left = (WinWid-RadarWid+2)+'px';
  document.getElementById('DivRadar').innerHTML = RadarImgOut;
  if (RadarURLeff != "") { RadarImgOut += '<a href="'+RadarURLeff+'" target="weather">'; }
  RadarImgOut += '<img src="'+RadarURLsrc+'" id="RadarImg" width='+RadarWid+' height='+RadarHgt+' style="border-radius:25px;" border=0>';
  if (RadarURLeff != "") { RadarImgOut += '</a>'; }
  document.getElementById('DivRadar').innerHTML = RadarImgOut;
  if (BGshowCurr.indexOf('R')<1) {
    document.getElementById('RadarImg').style.visibility='hidden';
    document.getElementById('DivRadar').style.visibility='hidden';
  }
}

// Speak the weather forecast on capable browsers (including Chrome and Safari)
function SpeakForecast(WFSnum) {
  var SFstr = "";
  if ('speechSynthesis' in window) {
    var SpkDT=new Date(DTadj());
    var SpkHr = 0;
    SpkHr = SpkDT.getHours();
    if (SpkHr>12) SpkHr = SpkHr-12;  if (SpkHr==0) SpkHr = 12;
    var SpkMn = "";
    if (SpkDT.getMinutes()>0) {
      SpkMn = SpkDT.getMinutes().toString();
      if (SpkMn.length<2) SpkMn = " OH "+SpkMn;
    }
    if (typeof WeatherForecastSpoken[0] !== 'undefined') {
      if (WFSnum==0) {
        if (WeatherCurrentSpoken.length>4) {
          if (WeatherForecastSpoken[0].length>4) {
            SFstr = "At "+SpkHr.toString()+"  "+SpkMn+" its "+WeatherCurrentSpoken.toUpperCase()+" "+WeatherForecastSpoken[0].replace(/^[^\s]+\ /,'FORECASTING ');
          } else {
            SFstr = "At "+SpkHr.toString()+"  "+SpkMn+" its "+WeatherCurrentSpoken.toUpperCase();
          }
        } else {
          if (WeatherForecastSpoken[0].length>4) {
            SFstr = WeatherForecastSpoken[0].replace(/^[^\s]+\ /,'Forecasting ');
          }
        }
      } else {
        SFstr = WeatherForecastSpoken[WFSnum];
      }
      DoSpeech(SFstr);
    }
  }
}

// Asynchronous receive and parse of JSON response to weather forecast query (on capable browsers).  Current supports only Wunderground.com format.
var WeatherForecastHandle = 0;
function FmtMinus (FMin) {
  return(Math.floor(FMin).toString().replace(/-([0-9]+)/gi,"<span style='font-size:80%; vertical-align:40%;'>-</span>$1"));
}
function WeatherForecastReceive () {
  WeatherForecast = '';
  WeatherForecastSpoken = [];
  if ( (WeatherForecastHandle.readyState==4) && (WeatherForecastHandle.status==200) ) {
    var FWFread = WeatherForecastHandle.responseText;
    try {
      var FWFrec = JSON.parse(FWFread);
      function WFspokenPrep(WFSnum) {
        FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['low']['fahrenheit'] = Math.floor(FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['low']['fahrenheit']);
        FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['high']['fahrenheit'] = Math.floor(FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['high']['fahrenheit']);
        WeatherForecastSpoken[WFSnum] = FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['date']['weekday']+" ";
        WeatherForecastSpoken[WFSnum] += FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['low']['fahrenheit']+" to "+FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['high']['fahrenheit']+". ";
        WeatherForecastSpoken[WFSnum] += FWFrec['forecast']['txt_forecast']['forecastday'][WFSnum]['fcttext'];
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].toUpperCase();
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/\.[0-9]+/gi,"");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([0-9])s([^A-Z0-9])/gi,"$1's$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([0-9])F/gi,"$1");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])E([^A-Z0-9])/gi,"$1EAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])W([^A-Z0-9])/gi,"$1WEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])N([^A-Z0-9])/gi,"$1NORTH$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])S([^A-Z0-9])/gi,"$1SOUTH$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])NE([^A-Z0-9])/gi,"$1NORTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])SE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])SW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])NW([^A-Z0-9])/gi,"$1NORTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])NNE([^A-Z0-9])/gi,"$1NORTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])ENE([^A-Z0-9])/gi,"$1NORTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])ESE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])SSE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])SSW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])WSW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])WNW([^A-Z0-9])/gi,"$1NORTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])NNW([^A-Z0-9])/gi,"$1NORTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])PRECIP([^A-Z0-9])/gi,"$1PRECIPITATION$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/MPH/gi,"");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/wind/gi,"wend");
      }
      for (var FWFlp=0; FWFlp<2; FWFlp++) {
        if (WeatherForecast.length > 10) { WeatherForecast += "\n &nbsp; "; }
        if ('speechSynthesis' in window) {
          WeatherForecast += '<a href="JavaScript:SpeakForecast('+FWFlp+');" title="Speak the forecast." style="text-decoration:none;">';
        } else {
          if (WeatherURLeff!="") {
            WeatherForecast += '<a href="'+WeatherURLeff+'" title="Detailed Weather Forecast" target="weather" style="text-decoration:none;">';
          }
        }
        WeatherForecast += '<span style="font-family:Arial; font-size:'+(Math.floor(WinHgt*WeatherForecastHgt))+'px; line-height:84%; color:'+ForecastColor+'; -webkit-font-smoothing:antialiased;'+WeatherShadow+'">';
        WeatherForecast += '<nobr>';
	if (FWFrec['forecast']['txt_forecast']['forecastday'][FWFlp]['icon_url'].indexOf('nt_.gif')<1) {
	  WeatherForecast += '<img src="'+FWFrec['forecast']['txt_forecast']['forecastday'][FWFlp]['icon_url']+'" height="'+(Math.floor(WinHgt*WeatherForecastHgt*.6))+'; margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px;" border=0>';
        }
        WeatherForecast += FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['date']['weekday_short']+":&nbsp;";
        if (FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['low']['fahrenheit'] != FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['high']['fahrenheit']) {
          WeatherForecast += FmtMinus(FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['low']['fahrenheit'])+"<span style='font-size:70%;'>&#8209;</span>";
        }
        WeatherForecast += FmtMinus(FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['high']['fahrenheit'])+"&deg;</nobr>\n";
        WFtext = FWFrec['forecast']['txt_forecast']['forecastday'][FWFlp]['fcttext'];
        WFtext = WFtext.replace(/ -([0-9]+)/gi," <span style='font-size:80%; vertical-align:40%;'>-</span>$1");
        WeatherForecast += WFtext+"</span>";
        if ( ('speechSynthesis' in window) || (WeatherURLeff!="") ) { WeatherForecast += "</a>"; }
        WeatherForecast = WeatherForecast.replace(/([0-9])F/gi,"$1&deg;");
        WeatherForecast = WeatherForecast.replace(/([0-9<>;]+) to ([0-9<>;]+)/gi,"$1<span style='font-size:70%;'>&#8209;</span>$2");
        WeatherForecast = WeatherForecast.replace(/ at ([0-9<>;]+)/gi," $1");
        WeatherForecast = WeatherForecast.replace(/ mph/gi,"");
        WeatherForecast = WeatherForecast.replace(/\.\.\./gi,"; ");
        WeatherForecast = WeatherForecast.replace(/\s[\s]+/gi," ");
        WeatherForecast = WeatherForecast.replace(/ inches/gi," in");
        WeatherForecast = WeatherForecast.replace(/^[\s]+/gi,"");
        WeatherForecast = WeatherForecast.replace(/[\s]+$/gi,"");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])NNE([^A-Z0-9])/gi,"$1NE$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])ENE([^A-Z0-9])/gi,"$1NE$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])ESE([^A-Z0-9])/gi,"$1SE$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])SSE([^A-Z0-9])/gi,"$1SE$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])SSW([^A-Z0-9])/gi,"$1SW$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])WSW([^A-Z0-9])/gi,"$1SW$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])WNW([^A-Z0-9])/gi,"$1NW$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])NNW([^A-Z0-9])/gi,"$1NW$2");
        WFspokenPrep(FWFlp);
      }
      WeatherForecast += "\n";
    } catch (err) {
      WeatherForecast = '<font size=2>Weather forecast is not available on this browser.</font>';
    }
    if (BGshowCurr.indexOf('F')>=0) {
      document.getElementById('DivWeatherForecast').innerHTML = WeatherForecast;
    }
  }
}
// Request weather forecast on capable browsers.
function WeatherForecastRequest () {
  var WFout = "";
  try {
    WeatherForecastHandle = new XMLHttpRequest();
  } catch (trymicrosoft) {
    try {
      WeatherForecastHandle = new ActiveXObject('Msxml2.XMLHTTP');
    } catch (othermicrosoft) {
      try {
        WeatherForecastHandle = new ActiveXObject('Microsoft.XMLHTTP');
      } catch (failed) {
        WeatherForecastHandle = false;
      }
    }
  }
  if (WeatherForecastHandle) {
    try {
      if (WeatherForecastURL.length>1) {
        WeatherForecastHandle.open('GET', WeatherForecastURL, true);
        WeatherForecastHandle.timeout = 20000;
        WeatherForecastHandle.onreadystatechange = WeatherForecastReceive;
        WeatherForecastHandle.send(null);
      }
    } catch (err) {
      WeatherForecast = '<font size=2>Weather forecast is not available on this browser.</font>';
      if (WeatherURLeff!="") { WFout += '<a href="'+WeatherURLeff+'" title="Detailed Weather Forecast" target="weather">"'; }
      WFout += '<span style="font-family:Arial; font-size:'+(Math.floor(WinHgt*WeatherForecastHgt))+'px; line-height:'+(Math.floor(WinHgt*WeatherForecastHgt*.7))+'px; text-decoration:none; color:'+ForecastColor+'; -webkit-font-smoothing:antialiased;">'+WeatherForecast+'</span>';
      if (WeatherURLeff!="") { WFout += '</a>'; }
      document.getElementById('DivWeatherForecast').innerHTML = WFout;
    }
  }
  WeatherForecastTimer = WeatherForecastDur;
}

// Asynchronous receive and parse of JSON response to weather current conditions query (on capable browsers).  Current supports only Wunderground.com format.
var WeatherCurrentHandle = false;
function WeatherCurrentReceive () {
  var WeatherCurrentSpokenTmp = "";
  if ( (WeatherCurrentHandle.readyState==4) && (WeatherCurrentHandle.status==200) ) {
    var FWCread = WeatherCurrentHandle.responseText;
    try {
      var FWCrec = JSON.parse(FWCread);
      WeatherCurrent = '';
      WeatherCurrentIcon = '<img src="'+FWCrec['current_observation']['icon_url']+'" border=0 height='+(Math.floor(WinHgt*WeatherCurrentHgt*.6))+'>';
      WeatherCurrent += '<nobr><span style="white-space:nowrap; font-size:'+Math.floor(WinHgt*WeatherCurrentHgt)+'px;">'+FmtMinus(FWCrec['current_observation']['temp_f'])+'</span>&deg;</nobr> ';
      WeatherCurrentSpokenTmp += FWCrec['current_observation']['temp_f']+", ";
      if (FWCrec['current_observation']['weather'].length>1) {
        WeatherCurrentSpokenTmp += FWCrec['current_observation']['weather']+", "
      }
      FWCrec['current_observation']['wind_mph'] = Math.floor(FWCrec['current_observation']['wind_mph']);
      FWCrec['current_observation']['wind_gust_mph'] = Math.floor(FWCrec['current_observation']['wind_gust_mph']);
      if ( (FWCrec['current_observation']['wind_mph']>2) || (FWCrec['current_observation']['wind_gust_mph']>2) ) {
        WeatherCurrentSpokenTmp += ", ";
        if (FWCrec['current_observation']['wind_dir'].length<1) {
          WeatherCurrentSpokenTmp += "variable ";
        } else {
          WeatherCurrentSpokenTmp += FWCrec['current_observation']['wind_dir']+" ";
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])NE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])NNE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])ENE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])ESE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])SE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])SSE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])SW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])SSW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])WSW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])NW([^A-Z0-9])/gi,"$1NorthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])WNW([^A-Z0-9])/gi,"$1NorthWest$2");
          WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/([^A-Z0-9])NNW([^A-Z0-9])/gi,"$1NorthWest$2");
        }
        if (FWCrec['current_observation']['wind_mph']<=2) {
          WeatherCurrentSpokenTmp += "gusting at "+FWCrec['current_observation']['wind_gust_mph'];
        } else {
          WeatherCurrentSpokenTmp += "at "+FWCrec['current_observation']['wind_mph'];
          if ( (FWCrec['current_observation']['wind_gust_mph']>2) && ((FWCrec['current_observation']['wind_gust_mph']-FWCrec['current_observation']['wind_mph'])>1) ) {
            WeatherCurrentSpokenTmp += " to "+FWCrec['current_observation']['wind_gust_mph'];
          }
        }
      }
      var FWhum = FWCrec['current_observation']['relative_humidity'].replace('%','');
      // if ( (FWhum>1) && (FWhum<120) ) { WeatherCurrentSpokenTmp += ", humidity "+FWhum.toString()+" percent"; }
      if ( (FWCrec['current_observation']['windchill_f']!="") && (FWCrec['current_observation']['windchill_f']!="NA") && (FWCrec['current_observation']['windchill_f']!="N/A") && (FWCrec['current_observation']['windchill_f']!="null") && (FWCrec['current_observation']['windchill_f']!="undefined") &&
           (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['windchill_f'])>4) ) {
        WeatherCurrentSpokenTmp += ", feels like "+FWCrec['current_observation']['windchill_f'];
      } else {
        if ( (FWCrec['current_observation']['heat_index_f']!="") && (FWCrec['current_observation']['heat_index_f']!="NA") && (FWCrec['current_observation']['heat_index_f']!="N/A") && (FWCrec['current_observation']['heat_index_f']!="null") && (FWCrec['current_observation']['heat_index_f']!="undefined") &&
             (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['heat_index_f'])>4) ) {
          WeatherCurrentSpokenTmp += ", feels like "+FWCrec['current_observation']['heat_index_f'];
        }
      }
      WeatherCurrentSpokenTmp += ".";
      WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/\.[0-9]+/g,'');
      var WindText = '';
      var WindDir = FWCrec['current_observation']['wind_dir'];
      if (WindDir.length < 1) { WindDir = 'V'; }
      if ( (FWCrec['current_observation']['wind_mph']>2) || (FWCrec['current_observation']['wind_gust_mph']>2) ) {
        if (FWCrec['current_observation']['wind_mph']<=2) {
          WindText += '<span style="font-size:'+(Math.floor(WinHgt*WeatherCurrentHgt*.8))+'px; font-stretch:condensed;">'+WindDir+'</span><i><span style="font-size:'+(Math.floor(WinHgt*WeatherCurrentHgt*.7))+'px; vertical-align:20%; margin-right:-4px">&#45;</span>'+FWCrec['current_observation']['wind_gust_mph']+'</i>';
        } else {
          WindText += '<span style="font-size:'+(Math.floor(WinHgt*WeatherCurrentHgt*.8))+'px; font-stretch:condensed;">'+WindDir+'</span>';
          WindText += FWCrec['current_observation']['wind_mph'];
          if ( (FWCrec['current_observation']['wind_gust_mph']>2) && ((FWCrec['current_observation']['wind_gust_mph']-FWCrec['current_observation']['wind_mph'])>1) ) {
            WindText += '<span style="font-size:'+(Math.floor(WinHgt*WeatherCurrentHgt*.8))+'px;"><i><span style="font-size:'+(Math.floor(WinHgt*WeatherCurrentHgt*0.7))+'px; vertical-align:20%; margin-right:-4px">&#45;</span>'+FWCrec['current_observation']['wind_gust_mph']+'</i></span>';
          }
        }
      }
      if (WindText.length>1) {
        WeatherCurrent += '<nobr><span style="white-space:nowrap;">'+WindText+'</span></nobr> ';
      }
      if ( (FWhum>1) && (FWhum<120) ) {
        WeatherCurrent += '<nobr><span style="white-space:nowrap; font-size:'+Math.floor(WinHgt*WeatherCurrentHgt)+'px;">'+FWhum+'<span style="font-size:'+Math.floor(WinHgt*WeatherCurrentHgt*.7)+'px; font-stretch:condensed;">&oslash;</span></span></nobr> ';
      }
      if ( (FWCrec['current_observation']['windchill_f']!="") && (FWCrec['current_observation']['windchill_f']!="NA") && (FWCrec['current_observation']['windchill_f']!="N/A") && (FWCrec['current_observation']['windchill_f']!="null") && (FWCrec['current_observation']['windchill_f']!="undefined") &&
           (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['windchill_f'])>4) ) {
        WeatherCurrent += '<nobr><span style="white-space:nowrap; font-size:'+Math.floor(WinHgt*WeatherCurrentHgt)+'px;"><i>'+FmtMinus(FWCrec['current_observation']['windchill_f'])+'<span style="font-size:'+Math.floor(WinHgt*WeatherCurrentHgt*0.7)+'px;">&#8226;</span></i></span></nobr> ';
      } else {
        if ( (FWCrec['current_observation']['heat_index_f']!="") && (FWCrec['current_observation']['heat_index_f']!="NA") && (FWCrec['current_observation']['heat_index_f']!="N/A") && (FWCrec['current_observation']['heat_index_f']!="null") && (FWCrec['current_observation']['heat_index_f']!="undefined") &&
             (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['heat_index_f'])>4) ) {
          WeatherCurrent += '<nobr><span style="white-space:nowrap; font-size:'+Math.floor(WinHgt*WeatherCurrentHgt)+'px;"><i>'+FmtMinus(FWCrec['current_observation']['heat_index_f'])+'<span style="font-size:'+Math.floor(WinHgt*WeatherCurrentHgt*0.7)+'px;">i</span></i></span></nobr> ';
        }
      }
      WeatherCurrent = WeatherCurrentIcon+' '+WeatherCurrent+' '+FWCrec['current_observation']['weather']+"\n";
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])East([^A-Z0-9])/gi,"$1E$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])West([^A-Z0-9])/gi,"$1W$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])North([^A-Z0-9])/gi,"$1N$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])South([^A-Z0-9])/gi,"$1S$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])NNE([^A-Z0-9])/gi,"$1NE$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])ENE([^A-Z0-9])/gi,"$1NE$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])ESE([^A-Z0-9])/gi,"$1SE$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])SSE([^A-Z0-9])/gi,"$1SE$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])SSW([^A-Z0-9])/gi,"$1SW$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])WSW([^A-Z0-9])/gi,"$1SW$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])WNW([^A-Z0-9])/gi,"$1NW$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])NNW([^A-Z0-9])/gi,"$1NW$2");
      WeatherCurrent = WeatherCurrent.replace(/Mostly /,"M.");
      WeatherCurrent = WeatherCurrent.replace(/Partly /,"P.");
      WeatherCurrent = WeatherCurrent.replace(/Scattered /,"Sct.");
      WeatherCurrent = WeatherCurrent.replace(/Isolated /,"Iso.");
      WeatherCurrent = WeatherCurrent.replace(/Thunderstorm/,"T-Storm");
      WeatherCurrent = WeatherCurrent.replace(/\.0/g,'');
      WeatherCurrent += '</span>';
    } catch (err) {
      WeatherCurrent = '';
    }
    if (BGshowCurr.indexOf('W')>=0) {
      var WeatherURLtmp = "";
      if ('speechSynthesis' in window) { WeatherURLtmp = 'JavaScript:SpeakForecast(0);'; }
      var FWCout = "";
      FWCout += '<span style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; font-family:Arial; font-size:'+Math.floor(WinHgt*WeatherCurrentHgt)+'px; line-height:'+Math.floor(WinHgt*WeatherCurrentHgt*0.7)+'px; color:#FFFFFF; text-decoration:none; font-stretch:condensed; -webkit-font-smoothing:antialiased;'+WeatherShadow+'" title="Detailed Weather Forecast" onMousedown="'+WeatherURLtmp+'">'+WeatherCurrent+'</span>';
      document.getElementById('DivWeatherCurrent').innerHTML = FWCout;
      // alert(FWCout);
    }
    ShowMoon();
  }
  WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/^[\s]+/gi,"");
  WeatherCurrentSpokenTmp = WeatherCurrentSpokenTmp.replace(/[\s]+$/gi,"");
  if (WeatherCurrentSpokenTmp.length > 4) {
    WeatherCurrentSpoken = WeatherCurrentSpokenTmp;
  }
}
// Request weather current conditions on capable browsers.
function WeatherCurrentRequest () {
  try {
    WeatherCurrentHandle = new XMLHttpRequest();
  } catch (trymicrosoft) {
    try {
      WeatherCurrentHandle = new ActiveXObject('Msxml2.XMLHTTP');
    } catch (othermicrosoft) {
      try {
        WeatherCurrentHandle = new ActiveXObject('Microsoft.XMLHTTP');
      } catch (failed) {
        WeatherCurrentHandle = false;
      }
    }
  }
  if (WeatherCurrentHandle) {
    try {
      if (WeatherCurrentURL.length>1) {
        WeatherCurrentHandle.open('GET', WeatherCurrentURL, true);
        WeatherCurrentHandle.timeout = 20000;
        WeatherCurrentHandle.onreadystatechange = WeatherCurrentReceive;
        WeatherCurrentHandle.send(null);
      }
    } catch (err) {
    }
  }
  WeatherCurrentTimer = WeatherCurrentDur;
}

// Setup weather display areas.
function SetupWeather () {
  if (BGshowCurr.indexOf('F')>=0) {
    document.getElementById('DivWeatherCurrent').style.top = (OfsY+Math.floor(WinHgt*.57))+'px';
  } else {
    document.getElementById('DivWeatherCurrent').style.top = (OfsY+Math.floor(WinHgt*.8))+'px';
  }
  document.getElementById('DivWeatherCurrent').style.height = Math.floor(WinHgt*.3)+'px';
  document.getElementById('DivWeatherCurrent').style.left = (OfsX)+'px';
  document.getElementById('DivWeatherCurrent').style.width = (WinWid-OfsX-20)+'px';
  document.getElementById('DivWeatherForecast').style.top = (OfsY+Math.floor(WinHgt*.7))+'px';
  document.getElementById('DivWeatherForecast').style.height = Math.floor(WinHgt*.3)+'px';
  document.getElementById('DivWeatherForecast').style.left = (OfsX+18)+'px';
  document.getElementById('DivWeatherForecast').style.width = (WinWid-OfsX-36)+'px';
  WeatherForecastTimer = 0;
  WeatherCurrentTimer = 0;
}

// Display the date.
function ShowDate () {
  var SDdt = new Date(DTadj());
  var SDday = SDdt.getDate();
  var SDdow = SDdt.getDay();
  var SDmonth = SDdt.getMonth();
  if (BGshowCurr.indexOf('D')>=0) {
    document.getElementById('DivDate').style.textAlign = 'center';
    document.getElementById('DivDate').style.top = (OfsY)+'px';
    document.getElementById('DivDate').style.left = (OfsX+48)+'px';
    document.getElementById('DivDate').style.width = (WinWid-OfsX-48)+'px';
    document.getElementById('SpanDate').innerHTML = '<span style="font-family:Arial; text-decoration:bold; font-variant:small-caps; text-shadow:-3px 3px 0px '+ClockColorOpp+'; -webkit-font-smoothing:antialiased; color:'+ClockColor+'; font-size:'+Math.floor(WinHgt*0.18)+'px;" onClick="NextBG();">' + AbrvDoW[SDdow] + "&nbsp;" + AbrvMon[SDmonth] + "&nbsp;" + SDday + '</span>';
  }
}

// Load current and total runtimes only on boot.
function FetchUptimes () {
  var UTdt = new Date(DTadj());
  var UTh = UTdt.getHours();
  var UTm = UTdt.getMinutes();
  var UTs = UTdt.getSeconds();
  BootedCurr = (UTdt.getYear()+1900).toString()+'.';
  if ((UTdt.getMonth()+1)<10) { BootedCurr += '0'; }
  BootedCurr += (UTdt.getMonth()+1).toString()+'.';
  if (UTdt.getDate()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getDate().toString()+' ';
  if (UTdt.getHours()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getHours().toString()+':';
  if (UTdt.getMinutes()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getMinutes().toString()+':';
  if (UTdt.getSeconds()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getSeconds().toString();
  if (haslocalstorage()) {
    try {
      BootedFirst = localStorage.getItem('Booted');
    } catch (err) { }
  }
  if ( (! BootedFirst) || (BootedFirst.length<8) || (BootedFirst.length>21) ) {
    BootedFirst = BootedCurr;
    if (haslocalstorage()) {
      try {
        localStorage.setItem('Booted', BootedFirst);
      } catch (err) { }
    }
  }
}

// Draw floodlight.
function DrawFloodlight (DFLin) {
  try {
    document.getElementById('DivCanvas').style.visibility='visible';
    CanvasDiv = document.getElementById("DivCanvas");
    if (CanvasDiv) {
      CanvasContext = CanvasDiv.getContext("2d");
      if (CanvasContext) {
        var CanvasGradient=CanvasContext.createRadialGradient(150,50,70,150,50,200);
        CanvasGradient.addColorStop(0,DFLin);
        CanvasGradient.addColorStop(1,"#000000");
        CanvasContext.fillStyle=CanvasGradient;
        CanvasContext.fillRect(0,0,999,999);
      }
    }
  } catch (err) { }
}

// Setup analog clock.
function AnalogSetup () {
  try {
    ClockCanvas = document.getElementById("AnalogClock");
    if (ClockCanvas) {
      ClockContext = ClockCanvas.getContext("2d");
      if (ClockContext) {
        ClockCanvas.width = (WinWid-(Math.abs(OfsX)*2));
        ClockCanvas.height = (WinHgt-(Math.abs(OfsY)*2));
        ClockCanvasBG = document.getElementById("AnalogClockBG");
        if (ClockCanvasBG) {
          ClockContextBG = ClockCanvasBG.getContext("2d");
          if (ClockContextBG) {
            ClockCanvasBG.width = (WinWid-(Math.abs(OfsX)*2));
            ClockCanvasBG.height = (WinHgt-(Math.abs(OfsY)*2));
          }
        }
      } else {
        BGshowCurr = BGshowCurr.replace(/A/gi,'')+'C';  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
      }
    } else {
      BGshowCurr = BGshowCurr.replace(/A/gi,'')+'C';  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
    }
  } catch (err) {
    BGshowCurr = BGshowCurr.replace(/A/gi,'')+'C';  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
  }
}

// Draw clock outline and ticks.
function DrawAnalogBG () {
  var ACtickLp, ACtickI, ACtickO, ACtickR, ACtickX1, ACtickX2, ACtickY1, ACtickY2;
  ClockContextBG.clearRect(0, 0, ClockCanvasBG.width, ClockCanvasBG.height);
  for (ACtickLp=0; ACtickLp< 12; ACtickLp++) {
    ACtickI = (ACtickLp % 3) ? 0.75 : 0.7;
    ACtickO = (ACtickLp % 3) ? 0.95 : 1.0;
    ACtickR = (Math.TAU * (ACtickLp/12)) - (Math.TAU/4);
    ACtickX1 = (WinWid / 2) + Math.cos(ACtickR) * (ACtickI * (WinMin/2));
    ACtickY1 = (WinHgt / 2) + Math.sin(ACtickR) * (ACtickI * (WinMin/2));
    ACtickX2 = (WinWid / 2) + Math.cos(ACtickR) * (ACtickO * (WinMin/2));
    ACtickY2 = (WinHgt / 2) + Math.sin(ACtickR) * (ACtickO * (WinMin/2));
    ClockContextBG.lineWidth = (ACtickLp % 3) ? 4 : 10;
    ClockContextBG.beginPath();
    ClockContextBG.moveTo(ACtickX1, ACtickY1);
    ClockContextBG.lineTo(ACtickX2, ACtickY2);
    ClockContextBG.strokeStyle = '#999999';
    ClockContextBG.lineCap = 'round';
    ClockContextBG.stroke();
  }
}

// Display the time (includes both digitial and analog versions).
function ShowTime () {
  var ColonElev = 0;
  var STdt=new Date(DTadj());
  STap="A";
  STh=STdt.getHours();
  HourCurr = STh;
  STm=STdt.getMinutes();
  MinuteCurr = STm;
  STs=STdt.getSeconds();
  if (STh>11) { STap = "P"; }
  if (STh>12) { STh = STh-12; }
  if (STh==0) { STh = 12; }
  if (STm<10) { STm = "0" + STm; }
  ClockShadowSeq = (ClockShadowSeq+1)%ClockShadows.length;
  ClockShadow = "#"+ClockShadows[ClockShadowSeq];
  ClockShade = "#"+ClockShadows[(ClockShadowSeq+Math.floor(ClockShadows.length/2))%ClockShadows.length];
  if (BGshowCurr.indexOf('C')>=0) {
    ColonElev = Math.floor((STs/59)*80)+10;
    document.getElementById('SpanTime').innerHTML = '<span style="color:'+ClockShade+'; font-size:'+Math.floor(WinMin*0.5)+'px; font-family:Arial; text-decoration:bold; text-shadow:-6px 6px 0px '+ClockShadow+';">' + STh + '</span><span style="vertical-align:'+ColonElev.toString()+'%; margin-left:-'+Math.floor(WinMin*0.05)+'px; font-size:'+Math.floor(WinMin*0.2)+'px; color:'+ClockShadow+'; text-shadow:none;">:</span><span style="color:'+ClockShade+'; font-size:'+Math.floor(WinMin*0.5)+'px; font-family:Arial; text-decoration:bold; text-shadow:-6px 6px 0px '+ClockShadow+';">' + STm + '</span><span style="font-size:'+Math.floor(WinMin*0.09)+'px; font-family:Arial; color:'+ClockShadow+'; margin-left:-4px; vertical-align:150%;">'+STap+'</span>';
  }
  if (BGshowCurr.indexOf('A')>=0) {
    Math.TAU = 2 * Math.PI;
    // Function for drawing hands.
    function ACdraw(ACtype, ACprogress, ACwidth, AClength) {
      var ACrads = (Math.TAU * ACprogress) - (Math.TAU/4);
      var ACtgtX = Math.floor((WinWid / 2) + Math.cos(ACrads) * (AClength * (WinMin/2)));
      var ACtgtY = Math.floor((WinHgt / 2) + Math.sin(ACrads) * (AClength * (WinMin/2)));
      var ACcolor = '#FF0000';
      if (ACtype=='H') { ACcolor = '#000000'; } // Hour
      if (ACtype=='M') { ACcolor = '#000000' } // Minute
      ClockContext.lineWidth = ACwidth;
      ClockContext.beginPath();
      ClockContext.moveTo((WinWid / 2), (WinHgt / 2));
      ClockContext.lineTo(ACtgtX, ACtgtY);
      ClockContext.strokeStyle = ACcolor;
      ClockContext.stroke();
      // Inner color.
      if (ACtype!='S') {
        ClockContext.lineCap = 'round';
        ClockContext.lineWidth = ACwidth*0.6;
        ClockContext.beginPath();
        ClockContext.moveTo((WinWid / 2), (WinHgt / 2));
        ClockContext.lineTo(ACtgtX, ACtgtY);
        ClockContext.strokeStyle = '#FFFFFF';
        ClockContext.stroke();
      }
    }
    try {
      // Clears and redraws hands every refresh.  Sloppy but simple approach.
      ClockContext.clearRect(0, 0, ClockCanvas.width, ClockCanvas.height);
      // Render clock hands.
      ACdraw('H', (STh+(STm/60)) / 12, 36, 0.40); // Hour
      ACdraw('M', STm / 60, 20, 0.75); // Minute
      ACdraw('S', STs / 60, 4, 0.90); // Second
      document.getElementById('DivAnalog').style.visibility='visible';
    } catch (err) {
    }
  }
}

function FmtSeconds (FSin) {
  var FSout = "";
  var FSint = Math.floor(FSin);
  var FSpre = FSint;
  FSint = Math.floor(FSpre/60);
  var FSse = FSpre - Math.floor(FSint*60);
  FSpre = FSint;
  FSint = Math.floor(FSpre/60);
  var FSmi = FSpre - Math.floor(FSint*60);
  FSpre = FSint;
  FSint = Math.floor(FSpre/24);
  var FShr = FSpre - Math.floor(FSint*24);
  var FSda = Math.floor(FSpre/24);
  var FSfont = "<font size='33%' style='line-height:30%;vertical-align:150%;'>";
  if (FSda > 0) {
    FSout = FSout+FSda.toString()+FSfont+"D</font>";
  }
  if ( (FShr > 0) || (FSda > 0) ) {
    if ( (FShr < 10) && (FSda > 0) ) { FSout = FSout+"0"; }
    FSout = FSout+FShr.toString()+FSfont+"H</font>";
  }
  if (FSda < 10) {
    if ( (FSmi > 0) || (FShr > 0) || (FSda > 0) ) {
      if ( (FSmi < 10) && (FShr > 0) ) { FSout = FSout+"0"; }
      FSout = FSout+FSmi.toString()+FSfont+"M</font>";
    }
    if (FShr < 10) {
      if ( (FSse > 0) || (FSmi > 0) || (FShr > 0) || (FSda > 0) ) {
        if ( (FSse < 10) && (FSmi > 0) ) { FSout = FSout+"0"; }
        FSout = FSout+FSse.toString();
      }
    }
  }
  return(FSout);
}

function ShowStopwatch () {
  StopwatchDT = new Date();
  var StopwatchCur = Math.floor(StopwatchDT.getTime() / 1000);
  var StopwatchLapsFmt = "";
  if (StopwatchLaps.length > 0) {
    StopwatchLapsFmt = "<span style='font-family:Arial; text-decoration:bold; color:#4040FF; line-height:84%; text-shadow:-1px 1px 0px #9A008D; font-size:"+(Math.round(WinHgt*.2))+"px;'>"+StopwatchLaps+"</span>";
  }
  document.getElementById('SpanStopwatch').innerHTML = FmtSeconds(StopwatchCur-StopwatchStarted)+StopwatchLapsFmt;
  document.getElementById('DivStopwatch').style.visibility='visible';
}

// Master update handler.  Uses a single timer.
function DoUpd () {
  if (StopwatchStarted > 0) {
    StopwatchTimer -= MasterDur;
    if (StopwatchTimer<1) {
      ShowStopwatch();
      StopwatchTimer = StopwatchDur;
    }
  }
  ClockUpdTimer -= MasterDur;
  if (ClockUpdTimer<1) {
    ShowTime();
    if (BGshowCurr.indexOf('A')>=0) {
      ClockUpdTimer = AnalogClockUpdDur;
    } else {
      ClockUpdTimer = ClockUpdDur;
    }
    if (HourCurr != HourPrev) {  // Hourly change.
      SetupOfs();
      HourPrev = HourCurr;
      ShowMoon();
      ShowDate();
    }
    if (MinuteCurr != MinutePrev) {
      MinutePrev = MinuteCurr;
      ClockShadowSeq = 0;
    }
    if (ClockColor != ClockColorPrev) {  // Sunset/Sunrise change.
      ShowMoon();
      ShowDate();
      if (ClockColorPrev!='') DoRefresh();  // Force reload on sunrise/sunset to reposition elements to reduce screen burn-in.
      ClockColorPrev = ClockColor;
    }
  }
  WeatherForecastTimer -= MasterDur;
  if (WeatherForecastTimer<1) {
    WeatherForecastRequest();
  }
  WeatherCurrentTimer -= MasterDur;
  if (WeatherCurrentTimer<1) {
    WeatherCurrentRequest();
  }
  if (IntroTimer <= IntroDur) {
    IntroTimer -= MasterDur;
    if (IntroTimer < MasterDur) {
      document.getElementById('DivIntro').style.visibility = 'hidden';
      IntroTimer = IntroDur+1;
    } else {
      document.getElementById('DivIntro').style.visibility = 'visible';
    }
  }
  UpdBG();
  if (MasterTimer!=null) {
    clearTimeout(MasterTimer);
    MasterTimer = null;
  }
  MasterTimer = setTimeout('DoUpd()',MasterDur);
}

// Special color testing diagnostic mode on C keypress.
var STtimer = null;
var STred = 0;  var STgreen = 0;  var STblue = 0;  var STnum = 0;
var STinc = 16;  var STdur = 200;  var STflag = 0;  var STmode = 0;
function toHex(n) {
  n = parseInt(n,10);
  if (isNaN(n)) return "00";
  n = Math.max(0,Math.min(n,255));
  return "0123456789ABCDEF".charAt((n - (n % 16))/16) + "0123456789ABCDEF".charAt(n % 16);
}
function rgbToHex(R,G,B) {return('#'+toHex(R)+toHex(G)+toHex(B)); }
function DoColors () {
  STred += STinc;
  if (STred>255) { STred=0; STgreen += STinc; if (STgreen>255) { STgreen=0; STblue += STinc; if (STblue>255) { STblue=0; } } }
  document.bgColor = rgbToHex(STred,STgreen,STblue);
  STtimer = setTimeout('DoColors()',20);
}
function DoBlink () {
  if (STflag > 0) {
    document.bgColor = '#000000';
    STflag = 0;
  } else {
    document.bgColor = '#FFFFFF';
    STflag = 1;
  }
  STtimer = setTimeout('DoBlink()',STdur);
}
function DoTestPattern () {
  document.getElementById('DivBG').style.visibility='visible';
  if (document.getElementById('DivBG').innerHTML.toLowerCase().indexOf('<img')<0) { document.getElementById('DivBG').innerHTML = '<img src="" id="ImgBG" width=0 height=0 style="margin-top:0px; margin-left:0px;" border=0>'; }
  document.getElementById('ImgBG').height = WinHgt;
  document.getElementById('ImgBG').width = WinWid;
  document.getElementById('ImgBG').src = "http://bedno.com/g/Test_Pattern.jpg";
}
function DoDiags () {
  if (STmode==0) { DoTestPattern(); STmode=1; } else { if (STmode==1) { DoColors(); STmode=2; } else { if (STmode==2) { STdur = 5000; DoBlink(); STmode=3; } else { if (STmode==3) { STdur = 250; DoBlink(); STmode=4; } else { STdur = 20; DoBlink(); STmode=0; } } } }
}

// Shift most elements around a bit everysometimes potentially to abate screen burn-in.
function SetupOfs () {
  OfsX = 4-Math.floor(Math.random()*9);  OfsY = 4-Math.floor(Math.random()*9);
}

// Resizing handler, calls full screen update.
function DoResize () {
  HourPrev = -1; DoReBoot();
}

// Main setup, refreshes all screen elements.
function DoSetup () {
  SetupOfs();
  SetupSun();
  SetupRadar();
  SetupScreen();
  SetupWeather();
  document.getElementById('DivAbout').style.top = (OfsY+Math.round(WinHgt*.9))+'px';
  document.getElementById('DivAbout').style.left = (OfsX+Math.round(WinWid*.96))+'px';
  document.getElementById('SpanAbout').style.fontSize = (Math.round(WinHgt*.1))+'px';
  document.getElementById('DivIntro').style.top = (OfsY+Math.round(WinHgt*.25))+'px';
  document.getElementById('DivIntro').style.left = (OfsX+Math.round(WinWid*.25))+'px';
  document.getElementById('DivTime').style.left = (OfsX+48)+'px';
  document.getElementById('DivTime').style.top = Math.floor(OfsY+(WinHgt*0.1)).toString()+'px';
  document.getElementById('DivTime').style.width = (WinWid-OfsX-48)+'px';
  document.getElementById('DivTime').style.textAlign = 'center';
  document.getElementById('DivAnalog').style.left = (OfsX)+'px';
  document.getElementById('DivAnalog').style.top = (OfsY)+'px';
  document.getElementById('DivAnalogBG').style.left = (OfsX)+'px';
  document.getElementById('DivAnalogBG').style.top = (OfsY)+'px';
  document.getElementById('DivBGdesc').style.left = '0px';
  document.getElementById('DivBGdesc').style.top = '0px';
  document.getElementById('DivIntro').innerHTML = About;
  document.getElementById("DivCanvas").style.top = '0px';
  document.getElementById("DivCanvas").style.left = '0px';
  document.getElementById("DivCanvas").style.width = (WinWid-(Math.abs(OfsX)*2))+'px';
  document.getElementById("DivCanvas").style.height = (WinHgt-(Math.abs(OfsY)*2))+'px';
  window.onresize = function(event) { 
    if (ResizeTimer) { clearTimeout(ResizeTimer); }
    ResizeTimer = setTimeout('DoResize()',1200);
  }
  DoUpd();
  if (ShowIntro > 0) {
    var IntroDT = new Date(DTadj());
    var IntroHr = IntroDT.getHours();
    var IntroPrev = '';
    if (haslocalstorage()) {
      try {
        IntroPrev = localStorage.getItem('IntroPrev');
      } catch (err) { }
    }
    if (IntroPrev!=IntroHr) {
      IntroTimer=IntroDur;
      if (haslocalstorage()) {
        try {
          localStorage.setItem('IntroPrev', IntroHr);
        } catch (err) { }
      }
    }
  }
  document.getElementById('DivStopwatch').style.top = (OfsY+14)+'px';
  document.getElementById('DivStopwatch').style.left = (OfsX)+'px';
  document.getElementById('DivStopwatch').style.height = (WinHgt-OfsY)+'px';
  document.getElementById('DivStopwatch').style.width = (WinWid-OfsX)+'px';
  document.getElementById('SpanStopwatch').style.fontSize = (Math.round(WinHgt*.5))+'px';
}

// Blank screen.
function AllDivsOff () {
  ShowTime();
  document.bgColor = '#000000';
  if (document.getElementById('DivAbout')) { document.getElementById('DivAbout').style.visibility='hidden'; }
  if (document.getElementById('DivAnalog')) { document.getElementById('DivAnalog').style.visibility='hidden'; }
  if (document.getElementById('DivAnalogBG')) { document.getElementById('DivAnalogBG').style.visibility='hidden'; }
  if (document.getElementById('DivBG')) { document.getElementById('DivBG').style.visibility='hidden'; }
  if (document.getElementById('DivBGdesc')) { document.getElementById('DivBGdesc').style.visibility='hidden'; }
  if (document.getElementById('DivDate')) { document.getElementById('DivDate').style.visibility='hidden'; }
  if (document.getElementById('SpanDate')) { document.getElementById('SpanDate').style.visibility='hidden'; }
  if (document.getElementById('DivIntro')) { document.getElementById('DivIntro').style.visibility='hidden'; }
  if (document.getElementById('DivCanvas')) { document.getElementById('DivCanvas').style.visibility='hidden'; }
  if (document.getElementById('DivMoonImg')) { document.getElementById('DivMoonImg').style.visibility='hidden'; }
  if (document.getElementById('DivRadar')) { document.getElementById('DivRadar').style.visibility='hidden'; }
  if (document.getElementById('RadarImg')) { document.getElementById('RadarImg').style.visibility='hidden'; }
  if (document.getElementById('DivSunTimes')) { document.getElementById('DivSunTimes').style.visibility='hidden'; }
  if (document.getElementById('DivTime')) { document.getElementById('DivTime').style.visibility='hidden'; }
  if (document.getElementById('SpanTime')) { document.getElementById('SpanTime').style.visibility='hidden'; }
  if (document.getElementById('DivWeatherCurrent')) { document.getElementById('DivWeatherCurrent').style.visibility='hidden'; }
  if (document.getElementById('DivWeatherForecast')) { document.getElementById('DivWeatherForecast').style.visibility='hidden'; }
  if (document.getElementById('DivWhole')) {
    document.getElementById('DivWhole').style.visibility='hidden';
    document.getElementById('DivWhole').style.backgroundColor = '#000000';
  }
  if (document.getElementById('DivStopwatch')) { document.getElementById('DivStopwatch').style.visibility='hidden'; }
}

// Stop everything.
function ClearTimers () {
  if (STtimer!=null) { clearTimeout(STtimer); }
  if (MasterTimer!=null) { clearTimeout(MasterTimer); }
}

// Manually advance frame in current slideshow.
function NextFrame() {
  ClearTimers();
  BGtimer = -1;
  if (HasAniSubs()) {
    BGframe = (BGframe+1) % BGdata[BGcurr].BGslides.length;
    BGframePrev = BGframe;
    SaveFrame = true;
  } else {
    if (BGframeInc > 0) {
      // Skip over repeated frames.
      BaseFrame = BGframe;
      while ( ((BaseFrame+1)< BGdata[BGcurr].BGslides.length) &&
              (BGdata[BGcurr].BGslides[BGframe].BGsrc.substr(0,(RadarURLsrc.length-2))==BGdata[BGcurr].BGslides[BaseFrame+1].BGsrc.substr(0,(RadarURLsrc.length-2))) ) {
        BaseFrame++;
      }
      BGframe = BaseFrame;
    }
  }
  UpdBG();
  MasterTimer = setTimeout('DoUpd()',MasterDur);
}

// Reasonability check and adjust margins.
function LimitMargins () {
  if (MarginTop<0) { MarginTop=0; }
  if (MarginTop>(WinHgtPhys/3)) { MarginTop=Math.floor(WinHgtPhys/3); }
  if (MarginBottom<0) { MarginBottom=0; }
  if (MarginBottom>(WinHgtPhys/3)) { MarginBottom=Math.floor(WinHgtPhys/3); }
  if (MarginLeft<0) { MarginLeft=0; }
  if (MarginLeft>(WinWidPhys/3)) { MarginLeft=Math.floor(WinWidPhys/3); }
  if (MarginRight<0) { MarginRight=0; }
  if (MarginRight>(WinWidPhys/3)) { MarginRight=Math.floor(WinWidPhys/3); }
}
// Parse margin settings from string (such as URL or local storage).
function ParseMargins (PMin) {
  PMin = PMin.toUpperCase();
  var MarginPatt = /([0-9]+),([0-9]+),([0-9]+),([0-9]+)/;  // Top,Left,Bottom,Right
  var MarginPartStr = '';  var MarginPartVal = [];   var MarginMatches = [];
  MarginMatches = PMin.match(MarginPatt);
  if (MarginMatches) {
  if (MarginMatches.length==5) {
    if (! isNaN(MarginMatches[1])) {
      MarginPartVal[0] = parseInt(MarginMatches[1],10);
      if ( (MarginPartVal[0]>=0) && (MarginPartVal[0]<999) ) {
        if (! isNaN(MarginMatches[2])) {
          MarginPartVal[1] = parseInt(MarginMatches[2],10);
          if ( (MarginPartVal[1]>=0) && (MarginPartVal[1]<999) ) {
            if (! isNaN(MarginMatches[3])) {
              MarginPartVal[2] = parseInt(MarginMatches[3],10);
              if ( (MarginPartVal[2]>=0) && (MarginPartVal[2]<999) ) {
                if (! isNaN(MarginMatches[4])) {
                  MarginPartVal[3] = parseInt(MarginMatches[4],10);
                  if ( (MarginPartVal[3]>=0) && (MarginPartVal[3]<999) ) {
                     MarginTop = MarginPartVal[0];  MarginLeft = MarginPartVal[1];
                     MarginBottom = MarginPartVal[2];  MarginRight = MarginPartVal[3];
                  }
                }
              }
           }
          }
        }
      }
    }
  }
  }
}
// Process a margin change (from keyboard controls).
function UpdateMargins () {
  LimitMargins();
  if (haslocalstorage()) {
    try { localStorage.setItem('margins', MarginTop.toString()+','+MarginLeft.toString()+','+MarginBottom.toString()+','+MarginRight.toString()); }
    catch (err) { }
  }
  DoReBoot();
}

// Handle user keypress.  Used in body tag to catch all.
function CheckKeypress (e) {
  var KeyPressedCode = e.keyCode;
  var BaseFrame = -1;
  var IncTemp = 0;
  // Convert numeric keypad cursor keycodes back to numbers.
  if (KeyPressedCode==35) { KeyPressedCode=1+48; }
  if (KeyPressedCode==40) { KeyPressedCode=2+48; }
  if (KeyPressedCode==34) { KeyPressedCode=3+48; }
  if (KeyPressedCode==37) { KeyPressedCode=4+48; }
  if (KeyPressedCode==12) { KeyPressedCode=5+48; }
  if (KeyPressedCode==39) { KeyPressedCode=6+48; }
  if (KeyPressedCode==36) { KeyPressedCode=7+48; }
  if (KeyPressedCode==38) { KeyPressedCode=8+48; }
  if (KeyPressedCode==33) { KeyPressedCode=9+48; }
  if (KeyPressedCode==46) { KeyPressedCode=110; }
  if (KeyPressedCode == 32) {  // Space = next BG
    ClearTimers();
    if (MasterTimer!=null) { clearTimeout(MasterTimer); }
    NextBG();
    MasterTimer = setTimeout('DoUpd()',MasterDur);
  } else {
    if (KeyPressedCode == 67) {  // 'c' = Display tests.
      ClearTimers();
      AllDivsOff();
      DoDiags();
    } else {
      if ( (KeyPressedCode == 48) || (KeyPressedCode == 96) ) {  // '0' = Display Off
        if (BGprev<0) {
          BGprev = BGcurr;
          ClearTimers();
          AllDivsOff();
          StopwatchStarted = 0;
          StopwatchLaps = "";
          document.getElementById('SpanStopwatch').innerHTML = "";
        } else {
          BGcurr = BGprev;  BGprev = -1;
          BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
          SetupVisibilities();
          ClockUpdTimer = -1;
          DoUpd();
        }
      } else {
        if (KeyPressedCode == 106) {  // '*' = slow
          BGdurMult += 1;  if (BGdurMult>7) { BGdurMult = 0; }
          if (BGdurMult>0) { BGdurMultStr = ' *'+(1+Math.round(.5*BGdurMult*10)/10).toString(); } else { BGdurMultStr = ''; }
          if (document.getElementById('SpanBGdesc')) { document.getElementById('SpanBGdesc').innerText += BGdurMultStr; }
        } else {
          if ( (KeyPressedCode == 109) || (KeyPressedCode == 189) ) {  // '-' = Pause | Resume background sequencing.
            if (! HasAniSubs()) {
              if (BGframeInc>0) { BGframeInc = 0; } else { BGframeInc = 1; }              
              if (BGframeInc>0) {
                NextFrame();
                BGdescBG = '';
                if (document.getElementById('SpanBGdesc')) { document.getElementById('SpanBGdesc').style.backgroundColor  = ''; }
              } else {
                ClearTimers();
                BGdescBG = ' background-color:#020066; ';
                if (document.getElementById('SpanBGdesc')) { document.getElementById('SpanBGdesc').style.backgroundColor  = '#020066'; }
              }
              MasterTimer = setTimeout('DoUpd()',MasterDur);
            }
          } else {
            if ( (KeyPressedCode == 107) || (KeyPressedCode == 187) ) {  // '+' = Next frame in current slideshow.
              BGframeIncPrev = BGframeInc;  BGframeInc = 1;  NextFrame();  BGframeInc = BGframeIncPrev;
            } else {
              if ( (KeyPressedCode > 48) && (KeyPressedCode <= 48+BGdata.length) ) {  // Quick jump to specified mode, from numeric keypad.
                BGcurrChk = KeyPressedCode - (48+1);
                if (BGcurrChk == BGcurr) {
                  BGframeIncPrev = BGframeInc;  BGframeInc = 1;  NextFrame();  BGframeInc = BGframeIncPrev;
                } else {
                  ClearTimers();
                  BGcurr = BGcurrChk;  BGprev = -1;
                  if (haslocalstorage()) {
                    try { localStorage.setItem('main', BGcurr.toString()); }
                    catch (err) { }
                  }
                  BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
                  ShowIntro = 0;  IntroTimer = -1;
                  DoRefresh();
                }
              } else {
                if ( (KeyPressedCode > 96) && (KeyPressedCode <= 96+BGdata.length) ) {  // Quick jump to specified mode, from number keys.
                  BGcurrChk = KeyPressedCode - (96+1);
                  if (BGcurrChk == BGcurr) {
                    BGframeIncPrev = BGframeInc;  BGframeInc = 1;  NextFrame();  BGframeInc = BGframeIncPrev;
                  } else {
                    ClearTimers();
                    BGcurr = BGcurrChk;  BGprev = -1;
                    if (haslocalstorage()) {
                      try { localStorage.setItem('main', BGcurr.toString()); }
                      catch (err) { }
                    }
                    BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
                    ShowIntro = 0;  IntroTimer = -1;
                    DoRefresh();
                  }
                } else {
                  if ( (KeyPressedCode == 10) || (KeyPressedCode == 13) || (KeyPressedCode == 0) ) {  // ENTER speaks forecast.
                    ClearTimers();
                    MasterTimer = setTimeout('DoUpd()',MasterDur);
                    SpeakForecast(0);
                  } else {
                    if ( (KeyPressedCode == 46) || (KeyPressedCode == 110) || (KeyPressedCode == 190) ) {  // '.' = Stopwatch
                      if (StopwatchStarted < 1) {
                        StopwatchDT = new Date();
                        StopwatchStarted = Math.floor(StopwatchDT.getTime() / 1000);
                        StopwatchTimer = StopwatchDur;
                        StopwatchLaps = "";
                        document.getElementById('SpanStopwatch').innerHTML = "";
                      } else {
                        StopwatchDT = new Date();
                        var StopwatchCur = Math.floor(StopwatchDT.getTime() / 1000);
                        StopwatchLaps = "<br>"+FmtSeconds(StopwatchCur-StopwatchStarted)+StopwatchLaps;
                      }
                      document.getElementById('DivStopwatch').style.visibility='visible';
                    } else {
                      if ( (KeyPressedCode == 111) || (KeyPressedCode == 191) )  {  // '/' = Clock display manual options
                        if (BGshowOverride < 1) {  // Initialize override mode.
                          BGshowOverride = 1;
                        } else {
                          BGshowOverride++;  if (BGshowOverride > BGshowArr.length) { BGshowOverride = 1; }
                        }
                        BGshowCurr = BGshowArr[BGshowOverride-1];
                        if (BGdata[BGcurr].BGshow.indexOf('V')>=0) { BGshowCurr += 'V'; }
                        if (BGdata[BGcurr].BGshow.indexOf('S')>=0) { BGshowCurr += 'S'; }
                        BGframeIncPrev = BGframeInc;  BGframePrev = BGframe;  BGframeInc = 0;
                        AllDivsOff();
                        DoSetup();
                        ShowTime();
                        ShowDate();
                        BGframe = BGframePrev;  
                        BGframeInc = BGframeIncPrev;
                      } else {
                        switch(KeyPressedCode) {
                          case 85:
                            IncTemp = Math.min(MarginTop+1, Math.floor(WinHgtPhys/3)); // u=85=Top+
                            if (IncTemp != MarginTop) { MarginTop = IncTemp;  UpdateMargins(); }
                            break;
                          case 73:
                            IncTemp = Math.max(MarginTop-1, 0); // i=73=Top-
                            if (IncTemp != MarginTop) { MarginTop = IncTemp;  UpdateMargins(); }
                            break;
                          case 79:
                            IncTemp = Math.min(MarginLeft+1, Math.floor(WinWidPhys/3)); // o=79=Left+
                            if (IncTemp != MarginLeft) { MarginLeft = IncTemp;  UpdateMargins(); }
                            break;
                          case 80:
                            IncTemp = Math.max(MarginLeft-1, 0); // p=80=Left-
                            if (IncTemp != MarginLeft) { MarginLeft = IncTemp;  UpdateMargins(); }
                            break;
                          case 72:
                            IncTemp = Math.min(MarginBottom+1, Math.floor(WinHgtPhys/3)); // h=72=Bottom+
                            if (IncTemp != MarginBottom) { MarginBottom = IncTemp;  UpdateMargins(); }
                            break;
                          case 74:
                            IncTemp = Math.max(MarginBottom-1, 0); // j=74=Bottom-
                            if (IncTemp != MarginBottom) { MarginBottom = IncTemp;  UpdateMargins(); }
                            break;
                          case 75:
                            IncTemp = Math.min(MarginRight+1, Math.floor(WinWidPhys/3)); // k=75=Right+
                            if (IncTemp != MarginRight) { MarginRight = IncTemp;  UpdateMargins(); }
                            break;
                          case 76:
                            IncTemp = Math.max(MarginRight-1, 0); // l=76=Right-
                            if (IncTemp != MarginRight) { MarginRight = IncTemp;  UpdateMargins(); }
                            break;
                          case 81:  // Q key shows tech details
                            TechReadout();
                            break;
                          case 82:  // R key fully reloads
                            location.reload();
                            break;
                          default:
                           // Unhandled keys do nothing.
                           // alert(KeyPressedCode.toString());
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Diagnostic info pop-up.  Called from Q key.
function TechReadout () {
  var TRout = "";
  try { TRout = "Display: "+WinWidPhys.toString()+'x'+WinHgtPhys.toString()+"\n";
  } catch (err) { }
  try { TRout = TRout + "Margins: "+MarginTop.toString()+','+MarginLeft.toString()+','+MarginBottom.toString()+','+MarginRight.toString()+"\n";
  } catch (err) { }
  try { TRout = TRout +"Loaded: "+BootedCurr+"\n"+"Installed: "+BootedFirst+"\n";
  } catch (err) { }
  try { TRout = TRout +"Client: "+navigator.userAgent;
  } catch (err) { }
  alert(TRout);
}

// Finish screen setup for aspects that require a startup delay.
function FinishScreen () {
  if (IsIOS() || IsAndroid()) {
    window.scrollTo(0, 1);
  }
}

// Setup screen properties, dimensions, divs.
function SetupWindow () {
  if ( (MarginTop>0) || (MarginLeft>0) || (MarginBottom>0) || (MarginRight>0) ) {
    WinWid = WinWidPhys - MarginLeft - MarginRight;
    WinHgt = WinHgtPhys - MarginTop - MarginBottom;
  } else {
    WinWid = WinWidPhys;  WinHgt = WinHgtPhys;
    WeatherURLeff = WeatherURL;
    RadarURLeff = WeatherURL;
  }
  LimitMargins();
  // 'kiosk' mode disables offsite links.
  if (location.href.toLowerCase().indexOf('kiosk')>=0) {
    WeatherURLeff = "";
    RadarURLeff = "";
    ShowIntro = 0;
  }
  document.getElementById('DivWhole').style.top = MarginTop.toString()+'px';
  document.getElementById('DivWhole').style.left = MarginLeft.toString()+'px';
  document.getElementById('DivWhole').style.width = WinWid.toString()+'px';
  document.getElementById('DivWhole').style.height = WinHgt.toString()+'px';
  WinMin = Math.min(WinWid,WinHgt);
  WinMax = Math.max(WinWid,WinHgt);
  RadarWid = Math.floor(WinWid*0.3);
  RadarHgt = Math.floor(WinHgt*0.5);
  AnalogSetup();
  setTimeout('FinishScreen()',3000);
}

// Do (most) boot functions (almost) as if page was reloaded but including screen size re-evaluations.
function DoReBoot () {
  WinWidPhys = window.innerWidth && document.documentElement.clientWidth ? Math.min(window.innerWidth, document.documentElement.clientWidth) : window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth;
  WinHgtPhys = window.innerHeight && document.documentElement.clientHeight ? Math.min(window.innerHeight, document.documentElement.clientHeight) : window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;
//  if (IsIOS()) { WinWidPhys = screen.width; WinHgtPhys = screen.height; }
  SetupWindow();
  DoRefresh();
}

// Boot happens only once, after page load.
function DoBoot () {
  FetchUptimes();
  var ShowPatt = /show=([A-Z0-9]+)/i;
  var ShowMatches = location.href.toUpperCase().match(ShowPatt);
  if (ShowMatches) { if (ShowMatches.length>0) { if (ShowMatches[1].length>0) { BGshowArg = ShowMatches[1]; ShowIntro = 0; alert('Override option: '+BGshowArg); } } }
  if (haslocalstorage()) {
    try {
      var BGcurrArg = localStorage.getItem('main');  if ( (BGcurrArg.length<1) || (BGcurrArg.length>2) ) { BGcurrArg = ''; }
      if (BGcurrArg.length > 0) {
        var BGcurrTmp = parseInt(BGcurrArg);
        if ( (BGcurrTmp >= 0) && (BGcurrTmp < BGdata.length) ) {
          BGcurr = BGcurrTmp;  BGprev = -1;
          if (BGshowArg.length > 0) { BGshowCurr = BGshowArg; } else { BGshowCurr = BGdata[BGcurr].BGshow; }
          BGshowOverride = 0;  BGdurMult = 0;  BGdurMultStr = '';
          ShowIntro = 0; IntroTimer = -1;
        }
      } else { }
    } catch (err) { }
  }
  // Optionally set BG from URL using parameter like ?<code>
  var CodePatt = '';  var CodeMatch = '';  var CodeIn = '';
  CodeIn = ' '+location.href.toUpperCase()+' ';
  var ArgLp = 0;
  for (ArgLp=0; ArgLp<BGdata.length; ArgLp++) {
    CodePatt = '[^a-zA-Z0-9]'+BGdata[ArgLp].BGcode.toUpperCase()+'[^a-zA-Z0-9]';
    CodeMatch = new RegExp(CodePatt);
    if (CodeMatch.test(CodeIn)) {
      BGcurr = ArgLp;  BGprev = -1;
      if (BGshowArg.length > 0) { BGshowCurr = BGshowArg; } else { BGshowCurr = BGdata[BGcurr].BGshow; }
      BGshowOverride = 0;  BGdurMult = 0;  BGdurMultStr = '';  ShowIntro = 0;  IntroTimer = -1;
      // Check for optional .[frame] extension, launches slideshow at particular frame.  Esp. useful for movie slideshow.
      for (var SubLp=0; SubLp<BGdata[BGcurr].BGslides.length; SubLp++) {
        if (location.href.toLowerCase().indexOf(BGdata[BGcurr].BGcode.toLowerCase()+'.'+SubLp.toString())>=0) {
          BGframe = SubLp;  BGframePrev = BGframe;
          if (haslocalstorage()) {
            try { localStorage.setItem('sub', BGframe.toString()); }
            catch (err) { }
          }
        }
      }
      if (haslocalstorage()) {
        try { localStorage.setItem('main', BGcurr.toString()); }
        catch (err) {
        }
      }
    }
  }
  ParseMargins(CodeIn);
  if ( (MarginTop>0) || (MarginLeft>0) || (MarginBottom>0) || (MarginRight>0) ) {
    if (haslocalstorage()) {
      try { localStorage.setItem('margins', MarginTop.toString()+','+MarginLeft.toString()+','+MarginBottom.toString()+','+MarginRight.toString()); }
      catch (err) { }
    }
  } else {
    if (haslocalstorage()) {
      try {
        var ReadMargins = localStorage.getItem('margins');
        ParseMargins(ReadMargins);
      }
      catch (err) { }
    }
  }
  if ('speechSynthesis' in window) { SpeechVoices = window.speechSynthesis.getVoices(); }
  DoReBoot();
}

// Clear all counters and indecis.
function DoInit () {
  if (STtimer!=null) { clearTimeout(STtimer); }
  if (MasterTimer!=null) { clearTimeout(MasterTimer); }
  MasterTimer = null;
  BGframe = 0;  BGframePrev = BGframe;  BGframeInc = 1;  BGtimer = -1;
  ClockColor = ClockColorDay;  ClockColorPrev = '';  ClockColorOpp = ClockColorNight;
  ClockUpdTimer = 0;
  HourPrev = -1;  HourCurr = -1;  MinutePrev = -1;  MinuteCurr = -1;
  BGsubIdx = -1;
  if (BGshowArg.length > 0) { BGshowCurr = BGshowArg; } else { BGshowCurr = BGdata[BGcurr].BGshow; }
  BGshowOverride = 0;  BGdurMult = 0;  BGdurMultStr = '';
}

// Completely refresh screen to update from major display changes.
function DoRefresh () {
  DoInit();
  AllDivsOff();
  DoSetup();
}

</script>
</head>

<body onLoad="DoBoot();" style="margin-top:0px; margin-left:0px; margin-bottom:0px; margin-right:0px; overflow:hidden;" bgColor='#000000' onKeydown='CheckKeypress(event);'>

<div id="DivWhole" style="z-index:0; position:relative; width:100%; height:100%; overflow:hidden; border-radius:25px;">
<canvas id="DivCanvas" style="z-index:1;" onClick="NextBG();"> </canvas>

<div id="DivBG" style="z-index:2; position:absolute; left:0px; top:0px; overflow:hidden;"></div>

<div id="DivAnalogBG" style="z-index:3; position:absolute; left:0px; top:0px; visibility:hidden;"><canvas id="AnalogClockBG" onClick="NextFrame();"> </canvas>
<div id="DivAnalog" style="z-index:4; position:absolute; left:0px; top:0px; visibility:hidden;"><canvas id="AnalogClock" onClick="NextFrame();"> </canvas></div>
</div>

<div id="DivRadar" style="z-index:5; position:absolute; left:0px; top:0px;"></div>
<div id="DivMoonImg" style="z-index:6; position:absolute; left:0px; top:-34px;"></div>
<div id="DivSunTimes" style="z-index:7; position:absolute; left:0px; top:0px; text-align:right;"></div>

<div id="DivWeatherForecast" style="z-index:8; position:absolute; left:0px; top:0px;"></div>

<div id="DivBGdesc" style="z-index:9; position:absolute; left:0px; top:0px;"></div>

<div id="DivTime" style="z-index:10; position:absolute; left:1px; top:-10px; text-align:center;"><span id="SpanTime" onMouseDown='NextFrame();'></span></div>

<div id="DivWeatherCurrent" style="z-index:11; position:absolute; left:0px; top:0px; text-align:center;"></div>

<div id="DivDate" style="z-index:12; position:absolute; left:1px; top:0px;"><span id="SpanDate"></span></div>

<div id="DivStopwatch" style="z-index:13; position:absolute; left:0px; top:0px; visibility:hidden; text-align:center;"><span id="SpanStopwatch" style="font-family:Arial; text-decoration:bold; font-stretch:condensed; text-shadow:-4px 4px 0px #9A008D; -webkit-font-smoothing:antialiased; color:red; line-height:81%; font-size:36px;"></span></div>

<div id="DivAbout" style="z-index:14; position:absolute; left:0px; top:0px; visibility:hidden;"><span id="SpanAbout" onClick="IntroTimer=IntroDur;" style="font-family:Arial; color:#4040FF; text-decoration:none; font-size:36px; -webkit-font-smoothing:antialiased;"><b>?</b></span></div>

<div id="DivIntro" style="z-index:15; position:absolute; left:0px; top:0px; visibility:hidden; background-color:#FFFFFF; padding-left:16px; padding-top:16px; padding-right:16px; padding-bottom:16px; font-family:Arial; color:#000000; font-size:12pt; border-style:solid; border-width:8px; border-color:#FF0000; display:inline-block;" onClick="IntroTimer=0;document.getElementById('DivIntro').style.visibility='hidden';"></div>

</div>

<script>
// SunCalc.js - (c) 2011-2014, Vladimir Agafonkin * JavaScript library for calculating sun/mooon position and phases. * https://github.com/mourner/suncalc
(function () { 'use strict';
// shortcuts for easier to read formulas
var PI   = Math.PI,
    sin  = Math.sin,
    cos  = Math.cos,
    tan  = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad  = PI / 180;
// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas
// date/time constants and conversions
var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;
function toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }
function fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }
function toDays(date)   { return toJulian(date) - J2000; }
// general calculations for position
var e = rad * 23.4397; // obliquity of the Earth
function rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }
function declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }
function azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }
function altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }
function siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }
// general sun calculations
function solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }
function eclipticLongitude(M) {
    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center
        P = rad * 102.9372; // perihelion of the Earth
    return M + C + P + PI;
}
function sunCoords(d) {
    var M = solarMeanAnomaly(d),
        L = eclipticLongitude(M);
    return {
        dec: declination(L, 0),
        ra: rightAscension(L, 0)
    };
}
var SunCalc = {};
// calculates sun position for a given date and latitude/longitude
SunCalc.getPosition = function (date, lat, lng) {
    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),
        c  = sunCoords(d),
        H  = siderealTime(d, lw) - c.ra;
    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: altitude(H, phi, c.dec)
    };
};
var times = SunCalc.times = [  // sun times configuration (angle, morning name, evening name)
    [-0.833, 'sunrise',       'sunset'      ],
    [  -0.3, 'sunriseEnd',    'sunsetStart' ],
    [    -6, 'dawn',          'dusk'        ],
    [   -12, 'nauticalDawn',  'nauticalDusk'],
    [   -18, 'nightEnd',      'night'       ],
    [     6, 'goldenHourEnd', 'goldenHour'  ]
];
SunCalc.addTime = function (angle, riseName, setName) {  // adds a custom time to the times config
    times.push([angle, riseName, setName]);
};
// calculations for sun times
var J0 = 0.0009;
function julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }
function approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }
function solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }
function hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }
function getSetJ(h, lw, phi, dec, n, M, L) {  // returns set time for the given sun altitude
    var w = hourAngle(h, phi, dec),
        a = approxTransit(w, lw, n);
    return solarTransitJ(a, M, L);
}
SunCalc.getTimes = function (date, lat, lng) {  // calculates sun times for a given date and latitude/longitude
    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),
        n = julianCycle(d, lw),
        ds = approxTransit(0, lw, n),
        M = solarMeanAnomaly(ds),
        L = eclipticLongitude(M),
        dec = declination(L, 0),
        Jnoon = solarTransitJ(ds, M, L),
        i, len, time, Jset, Jrise;
    var result = {
        solarNoon: fromJulian(Jnoon),
        nadir: fromJulian(Jnoon - 0.5)
    };
    for (i = 0, len = times.length; i < len; i += 1) {
        time = times[i];
        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);
        Jrise = Jnoon - (Jset - Jnoon);
        result[time[1]] = fromJulian(Jrise);
        result[time[2]] = fromJulian(Jset);
    }
    return result;
};
// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas
function moonCoords(d) { // geocentric ecliptic coordinates of the moon
    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
        M = rad * (134.963 + 13.064993 * d), // mean anomaly
        F = rad * (93.272 + 13.229350 * d),  // mean distance
        l  = L + rad * 6.289 * sin(M), // longitude
        b  = rad * 5.128 * sin(F),     // latitude
        dt = 385001 - 20905 * cos(M);  // distance to the moon in km
    return {
        ra: rightAscension(l, b),
        dec: declination(l, b),
        dist: dt
    };
}
SunCalc.getMoonPosition = function (date, lat, lng) {
    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),
        c = moonCoords(d),
        H = siderealTime(d, lw) - c.ra,
        h = altitude(H, phi, c.dec);
    // altitude correction for refraction
    h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));
    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: h,
        distance: c.dist
    };
};
// calculations for illumination parameters of the moon,
// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.
SunCalc.getMoonIllumination = function (date) {
    var d = toDays(date),
        s = sunCoords(d),
        m = moonCoords(d),
        sdist = 149598000, // distance from Earth to Sun in km
        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),
        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -
                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));
    return {
        fraction: (1 + cos(inc)) / 2,
        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,
        angle: angle
    };
};
function hoursLater(date, h) {
    return new Date(date.valueOf() + h * dayMs / 24);
}
// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article
SunCalc.getMoonTimes = function (date, lat, lng) {
    var t = new Date(date);
    t.setHours(0);
    t.setMinutes(0);
    t.setSeconds(0);
    t.setMilliseconds(0);
    var hc = 0.133 * rad,
        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,
        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;
    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)
    for (var i = 1; i <= 24; i += 2) {
        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;
        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;
        a = (h0 + h2) / 2 - h1;
        b = (h2 - h0) / 2;
        xe = -b / (2 * a);
        ye = (a * xe + b) * xe + h1;
        d = b * b - 4 * a * h1;
        roots = 0;
        if (d >= 0) {
            dx = Math.sqrt(d) / (Math.abs(a) * 2);
            x1 = xe - dx;
            x2 = xe + dx;
            if (Math.abs(x1) <= 1) roots++;
            if (Math.abs(x2) <= 1) roots++;
            if (x1 < -1) x1 = x2;
        }
        if (roots === 1) {
            if (h0 < 0) rise = i + x1;
            else set = i + x1;
        } else if (roots === 2) {
            rise = i + (ye < 0 ? x2 : x1);
            set = i + (ye < 0 ? x1 : x2);
        }
        if (rise && set) break;
        h0 = h2;
    }
    var result = {};
    if (rise) result.rise = hoursLater(t, rise);
    if (set) result.set = hoursLater(t, set);
    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;
    return result;
};
// export as AMD module / Node module / browser variable
if (typeof define === 'function' && define.amd) define(SunCalc);
else if (typeof module !== 'undefined') module.exports = SunCalc;
else window.SunCalc = SunCalc;
}());
</script>

</body>
</html>
