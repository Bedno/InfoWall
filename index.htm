<html>
<head>
<title>InfoWall</title>
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0"/>
<meta property="og:title" content="InfoWall">
<meta property="og:description" content="InfoWall : At-a-glance time, date, weather, webcams, more.">
<meta property="og:image" content="http://bedno.com/g/infowall.jpg">
<meta property="og:url" content="http://bedno.com/infowall">
<meta property="og:site_name" content="Bedno.com">

<script language="JavaScript">
var About = 'InfoWall : At-a-glance time, date, weather, webcams, more.<br><br>' +
            'Press <b>SPACE</b> for next background.<br>Tap the weather forecast to speak it.<br><br>' +
            '<span style="font-size:10pt;">Works best in Safari and Chrome (F11 for Full Screen).<br>Ideal for constant-on <span onClick="TechReadout();">projector</span>, dedicated laptop or tablet.</span><br><br>' +
            '<a href="http://Bedno.com/infowall/about" target="About">More info...</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
            '<a href="http://AndrewBedno.com" target="AndrewBedno">AndrewBedno.com</a>';
// Demonstrates a number of advanced Javascript techniques:
//    Responsive auto-formatting.  Text to speech.  Canvas element and drawing.  Analog clock.
//    Weather API use (Wunderground.com).  JSON fetch and parse.
//    Querystring checking.  Read/write localstorage.
//    Catch/try feature detection.    Structured constant array.
//    Keypress handling.  Master updater using timer.
//    Sun/Moon calculations.  No dependencies.
// Incorporates SunCalc.js by Vladimir Agafonkin https://github.com/mourner/suncalc

// CONFIGURABLES:

// Configure Wunderground.com (Weather Underground) aspects below.  See http://www.wunderground.com/weather/api/
var InfoZip = '60657';  // Zipcode of this installation.  60657=Chicago
var InfoLat = 41.94637;  var InfoLon = -87.64519;  // Geocoordinates of this installation.  41.94637,-87.64519=Chicago
var InfoZone = 0;  // Timezone adjustment hours.  Should = <dateobj>.getTimezoneOffset()/60 but reads wrong on most browsers?!?
var WeatherURL = 'http://www.wunderground.com/cgi-bin/findweather/getForecast?query=zmw:'+InfoZip+'.1.99999&apiref=bf1a242569a63476';  // Detailed local forecast.  Change apiref if you have one.
// Examples below use periodically cached Chicago mirrors.  For live use substitute api specific as shown:
var WeatherForecastURL = 'http://massup.us/d/w/wz-chicago-more.json';  // http://api.wunderground.com/api/<api_key>/forecast/pws/q/pws:KILCHICA173.json
var WeatherCurrentURL = 'http://massup.us/d/w/wz-chicago-now.json';  // http://api.wunderground.com/api/<api_key>/conditions/pws/q/pws:KILCHICA173.json

function IsIOS () { return((navigator.userAgent.indexOf('iphone')>-1) || (navigator.userAgent.indexOf('ipod')>-1) || (navigator.userAgent.indexOf('ipad')>-1) || (navigator.userAgent.indexOf('ios')>-1) ); }

// Local radar details link and sequenced (0:new..9:old) img src jpeg base:
var RadarQty=11;  var RadarMin=1;
var RadarStartTop=4;  var RadarStartBot=0;
var RadarURL = 'http://www.fox32chicago.com/weather/radar';
var RadarURLsrc = 'http://static.lakana.com/media.fox32chicago.com/photo/MAP/4439741/4439741_Position';

var ClockDay = '#40FFFF';  // Daytime color of time/date.
var ClockNight = '#FFFFFF';  // Nighttime color of time/date.
var ForecastColor = '#FFE3E3';  // Forecast text color.
var WeatherForecastDur = 19*60*1000;  // Update forecast every 42 minutes to minimize API calls.
var WeatherCurrentDur = 10*60*1000;  // Update current every 10 minutes to minimize API calls.
var ForecastRows = 10;  // Forecast text sizing, in rows comprising whole screen.
var ForecastRowsHgt = 0.75;
var WeatherHgtMult = 0.13;
var WeatherCurrentSizing = 0.15;
var MoonDiam = 1/6;  // Relative size of the displayed moon.

// BACKGROUNDS and STYLING
var BGdata = [  // BGcode=Matched in URL.  BGshow= [A]nalog [C]lock [D]ate [F]orecast [I]ntro [M]oon [R]adar [S]huffle [W]eather
  { BGcode:"webcams", BGshow:"CDFIMRW", BGslides: [  // BGlink=url for more info.  BGsrc=img src URL, 600-1200px wide, no extended chars.  BGdesc=Displayed name.  BGdur=milliseconds.  BGzoom=magnification (auto-centers)
    // Dead as of 2015.04.14: { BGlink:"http://www.luc.edu/webcams/", BGsrc:"http://www.luc.edu/webcam/schbus/schbusfull.jpg#{unq}", BGdesc:"Loyola, Water Tower", BGdur:4000, BGzoom:1 },
    // Dead as of 2015.04.14: { BGlink:"http://abc7chicago.com/weather/cams/daleycam/", BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/DaleyCam.jpg#{unq}", BGdesc:"Daley Plaza", BGdur:5000, BGzoom:1 },
    { BGlink:"http://web.live.weatherbug.com/LiveCameras/1/LiveCameras.aspx?no_cookie_zip=60618&no_cookie_stat=WGNTV&no_cookie_world_stat=&zcode=z5764&lid=NAV5", BGsrc:"http://wwc.instacam.com/instacamimg/WGNTV/WGNTV_l.jpg#{unq}", BGdesc:"WGN, Western and Addison", BGdur:5000, BGzoom:1 },
    { BGlink:"http://web.live.weatherbug.com/LiveCameras/1/LiveCameras.aspx?no_cookie_zip=60618&no_cookie_stat=WGNTV&no_cookie_world_stat=&zcode=z5764&camera_group=1&camera_zip=60613&enlarge=1&camera_id=CHSTC&lid=CNXCC", BGsrc:"http://wwc.instacam.com/instacamimg/CHSTC/CHSTC_l.jpg#{unq}", BGdesc:"St. Clement School, 2524 N Orchard", BGdur:5000, BGzoom:1 },
    // Dead as of 2015.11.27: { BGlink:"http://web.live.weatherbug.com/LiveCameras/1/LiveCameras.aspx?no_cookie_zip=60618&no_cookie_stat=WGNTV&no_cookie_world_stat=&zcode=z5764&camera_group=1&enlarge=1&camera_id=CUBBY&lid=CNXCC", BGsrc:"http://wwc.instacam.com/instacamimg/CUBBY/CUBBY_l.jpg#{unq}", BGdesc:"Wrigley Field, Clark and Addison", BGdur:5000, BGzoom:1 },
    { BGlink:"http://www.oakstbeach.com/", BGsrc:"http://205.178.49.123:8080/snapshot.cgi?user=guest&amp;pwd=password&amp;t=1421826844#{unq}", BGdesc:"Oak Street Beach", BGdur:5000, BGzoom:1 },
    { BGlink:"http://abc7chicago.com/weather/cams/columbiacam/", BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/ColumbiaCam.jpg#{unq}", BGdesc:"Grant Park", BGdur:5000, BGzoom:1 },
    { BGlink:"http://abc7chicago.com/weather/cams/belmont_cap/", BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/Belmont_cap.jpg#{unq}", BGdesc:"Belmont Harbor", BGdur:5000, BGzoom:1 },
    { BGlink:"http://abc7chicago.com/weather/cams/hancock-north/", BGsrc:"http://cdn.abclocal.go.com/three/wls/webcam/HancockNorth.jpg#{unq}", BGdesc:"Hancock North", BGdur:5000, BGzoom:1 },
    { BGlink:"http://www.sportsworldchicago.com/fieldcam/", BGsrc:"http://images.earthcam.com/ec_metros/ourcams/rosensports.jpg?z={unq}", BGdesc:"Wrigley, Clark and Addison", BGdur:2000, BGzoom:1 },
    { BGlink:"http://www.sportsworldchicago.com/fieldcam/", BGsrc:"http://images.earthcam.com/ec_metros/ourcams/rosensports.jpg?z={unq}", BGdesc:"Wrigley, Clark and Addison", BGdur:2000, BGzoom:1 },
    { BGlink:"http://www.sportsworldchicago.com/fieldcam/", BGsrc:"http://images.earthcam.com/ec_metros/ourcams/rosensports.jpg?z={unq}", BGdesc:"Wrigley, Clark and Addison", BGdur:2000, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-5+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1200, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-4+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1200, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-3+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1200, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-2+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1200, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-1+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1200, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1600, BGzoom:1 } ] },
  { BGcode:"wrigley", BGshow:"CDFIMRW", BGslides: [
    { BGlink:"http://www.sportsworldchicago.com/fieldcam/", BGsrc:"http://images.earthcam.com/ec_metros/ourcams/rosensports.jpg?z={unq}", BGdesc:"Wrigleyville, Clark and Addison", BGdur:2000, BGzoom:1 } ] },
  { BGcode:"radar", BGshow:"CDFIMW", BGslides: [
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:2200, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-6+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1300, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-5+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1300, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-4+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1300, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-3+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1300, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-2+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1300, BGzoom:1 },
    { BGlink:WeatherURL, BGsrc:RadarURLsrc+(((RadarQty-1+RadarStartTop)%RadarQty)+RadarMin)+".JPEG#{unq}", BGdesc:"Local Radar", BGdur:1300, BGzoom:1 } ] },
  { BGcode:"art", BGshow:"ADSW", BGslides: [
    { BGlink:"http://en.wikipedia.org/wiki/Mona_Lisa", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa,_by_Leonardo_da_Vinci,_from_C2RMF_retouched.jpg/402px-Mona_Lisa,_by_Leonardo_da_Vinci,_from_C2RMF_retouched.jpg", BGdesc:"Mona Lisa, Leonardo da Vinci, 1506", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/Nighthawks", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Nighthawks_by_Edward_Hopper_1942.jpg/800px-Nighthawks_by_Edward_Hopper_1942.jpg", BGdesc:"Nighthawks, Edward Hopper, 1942", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/American_Gothic", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Grant_Wood_-_American_Gothic_-_Google_Art_Project.jpg/497px-Grant_Wood_-_American_Gothic_-_Google_Art_Project.jpg", BGdesc:"American Gothic, Grant Wood, 1930", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/Paris_Street;_Rainy_Day", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Gustave_Caillebotte_-_Paris_Street;_Rainy_Day_-_Google_Art_Project.jpg/792px-Gustave_Caillebotte_-_Paris_Street;_Rainy_Day_-_Google_Art_Project.jpg", BGdesc:"Paris Street; Rainy Day, Gustave Caillebotte, 1877", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/A_Sunday_Afternoon_on_the_Island_of_La_Grande_Jatte", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/6/67/A_Sunday_on_La_Grande_Jatte,_Georges_Seurat,_1884.png", BGdesc:"Sunday Afternoon on La Grande Jatte, Georges Seurat, 1884", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/The_Grand_Canal_in_Venice_from_Palazzo_Flangini_to_Campo_San_Marcuola", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Canaletto_Grand_Canal_from_Palazzo_Flangini_-_JPGM.jpg/800px-Canaletto_Grand_Canal_from_Palazzo_Flangini_-_JPGM.jpg", BGdesc:"The Grand Canal, Canaletto, 1738", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/Vanitas", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/7/77/Adriaen_van_Utrecht-_Vanitas_-_Still_Life_with_Bouquet_and_Skull.JPG", BGdesc:"Vanitas, Adriaen van Utrecht, 1642", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/Haystacks_(Monet)", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/b/b8/Wheatstacks_(End_of_Summer),_1890-91_(190_Kb);_Oil_on_canvas,_60_x_100_cm_(23_5-8_x_39_3-8_in),_The_Art_Institute_of_Chicago.jpg", BGdesc:"Wheatstacks, Claude Monet, 1891", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/James_Tissot", BGsrc:"http://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/James_Tissot_-_Young_Lady_in_a_Boat.jpg/800px-James_Tissot_-_Young_Lady_in_a_Boat.jpg", BGdesc:"Young Lady in a Boat, James Tissot, 1870", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/The_Persistence_of_Memory", BGsrc:"http://upload.wikimedia.org/wikipedia/en/d/dd/The_Persistence_of_Memory.jpg", BGdesc:"The Persistence of Memory, Salvador Dal&iacute;, 1931", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/Les_Demoiselles_d'Avignon", BGsrc:"http://upload.wikimedia.org/wikipedia/en/thumb/4/4c/Les_Demoiselles_d'Avignon.jpg/579px-Les_Demoiselles_d'Avignon.jpg", BGdesc:"Les Demoiselles d&#8217Avignon, Pablo Picasso, 1907", BGdur:15000, BGzoom:1 },
    { BGlink:"http://en.wikipedia.org/wiki/Henri_Matisse", BGsrc:"http://upload.wikimedia.org/wikipedia/en/a/a7/Matissedance.jpg", BGdesc:"La danse, Henri Matisse, 1910", BGdur:15000, BGzoom:1 },
    { BGlink:"http://images.nga.gov/en/asset/show_zoom_window_popup.html?asset=120079", BGsrc:"http://images.nga.gov/?service=asset&action=show_preview&asset=120079", BGdesc:"The Japanese Footbridge, Claude Monet, 1899", BGdur:15000, BGzoom:1 },
    { BGlink:"http://images.nga.gov/en/asset/show_zoom_window_popup.html?asset=121693", BGsrc:"http://images.nga.gov/?service=asset&action=show_preview&asset=121693", BGdesc:"Sainte-Adresse, Claude Monet, 1867", BGdur:15000, BGzoom:1 },
    { BGlink:"http://images.nga.gov/en/asset/show_zoom_window_popup.html?asset=57125", BGsrc:"http://images.nga.gov/?service=asset&action=show_preview&asset=57125", BGdesc:"Ginevra de Benci, Leonardo da Vinci, 1452", BGdur:15000, BGzoom:1 },
    { BGlink:"http://images.nga.gov/en/asset/show_zoom_window_popup.html?asset=135937", BGsrc:"http://images.nga.gov/?service=asset&action=show_preview&asset=135937", BGdesc:"Green Wheat Fields, Vincent van Gogh, 1853", BGdur:15000, BGzoom:1 },
    { BGlink:"http://images.nga.gov/en/asset/show_zoom_window_popup.html?asset=21816", BGsrc:"http://images.nga.gov/?service=asset&action=show_preview&asset=21816", BGdesc:"Woman Holding a Balance, Johannes Vermeer, 1664", BGdur:15000, BGzoom:1 },
    { BGlink:"http://images.nga.gov/en/asset/show_zoom_window_popup.html?asset=45785", BGsrc:"http://images.nga.gov/?service=asset&action=show_preview&asset=45785", BGdesc:"Self-Portrait, Paul Gauguin, 1848", BGdur:15000, BGzoom:1 } ] },
  { BGcode:"yoga", BGshow:"", BGslides: [
    { BGsrc:"http://bedno.com/g/infowall/yoga/01.jpg", BGlink:"", BGdesc:"Namaste", BGdur:6200, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/02.jpg", BGlink:"", BGdesc:"Mountain", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/03.jpg", BGlink:"", BGdesc:"Forward Fold", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/04.jpg", BGlink:"", BGdesc:"Left Leg Lunge", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/05.jpg", BGlink:"", BGdesc:"Plank", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/06.jpg", BGlink:"", BGdesc:"8 Point", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/07.jpg", BGlink:"", BGdesc:"Cobra", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/08.jpg", BGlink:"", BGdesc:"Downward Dog", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/09.jpg", BGlink:"", BGdesc:"Right Leg Lunge", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/10.jpg", BGlink:"", BGdesc:"Forward Fold", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/11.jpg", BGlink:"", BGdesc:"Mountain", BGdur:4800, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/yoga/12.jpg", BGlink:"", BGdesc:"Namaste", BGdur:2000, BGzoom:1 } ] },
  { BGcode:"maps", BGshow:"", BGslides: [
    { BGsrc:"http://bedno.com/g/infowall/maps/neighborhood.jpg", BGlink:"http://tinyurl.com/3510npinegrove", BGdesc:"Neighborhood", BGdur:999999, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/maps/city.jpg", BGlink:"http://tinyurl.com/3510npinegrove", BGdesc:"City", BGdur:999999, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/maps/region.jpg", BGlink:"http://tinyurl.com/3510npinegrove", BGdesc:"Neighborhood", BGdur:999999, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/maps/USA.gif", BGlink:"http://emergency.cdc.gov", BGdesc:"USA", BGdur:999999, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/maps/World.jpg", BGlink:"http://www.mapsofworld.com", BGdesc:"World", BGdur:999999, BGzoom:1 },
    { BGsrc:"http://bedno.com/g/infowall/maps/Constellations.png", BGlink:"http://www.aurorahunter.com", BGdesc:"Constellations", BGdur:999999, BGzoom:1 } ] },
  { BGcode:"zoom", BGshow:"CD", BGslides: [
    { BGlink:"http://bedno.com/photos/album/zoom/universe", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-00-universe.jpg", BGdesc:"Observable Universe. 1.7E26m", BGdur:2000, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/universe", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-00-universe.jpg", BGdesc:"Observable Universe. 1.7E26m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/universe", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-00-universe.jpg", BGdesc:"Observable Universe. 1.7E26m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/supercluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-01-supercluster.jpg", BGdesc:"Local Galactic Supercluster. 2.7E24m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/supercluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-01-supercluster.jpg", BGdesc:"Local Galactic Supercluster. 2.7E24m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/supercluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-01-supercluster.jpg", BGdesc:"Local Galactic Supercluster. 2.7E24m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/cluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-02-cluster.jpg", BGdesc:"Local Galactic Cluster. 9E22m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/cluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-02-cluster.jpg", BGdesc:"Local Galactic Cluster. 9E22m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/cluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-02-cluster.jpg", BGdesc:"Local Galactic Cluster. 9E22m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/galaxy", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-03-galaxy.jpg", BGdesc:"Galaxy Similar to Ours. 5.2E20m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/galaxy", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-03-galaxy.jpg", BGdesc:"Galaxy Similar to Ours. 5.2E20m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/galaxy", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-03-galaxy.jpg", BGdesc:"Galaxy Similar to Ours. 5.2E20m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/stars", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-10-stars.jpg", BGdesc:"Local Star Clusters. 9.5E17m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/stars", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-10-stars.jpg", BGdesc:"Local Star Clusters. 9.5E17m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/stars", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-10-stars.jpg", BGdesc:"Local Star Clusters. 9.5E17m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/sun", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-11-sun.jpg", BGdesc:"Sun. 1.4E9m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/sun", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-11-sun.jpg", BGdesc:"Sun. 1.4E9m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/sun", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-11-sun.jpg", BGdesc:"Sun. 1.4E9m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/planets", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-12-planets.jpg", BGdesc:"Solar System. 2.5E8m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/planets", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-12-planets.jpg", BGdesc:"Solar System. 2.5E8m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/planets", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-12-planets.jpg", BGdesc:"Solar System. 2.5E8m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/earth", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-13-earth.jpg", BGdesc:"Earth. 1.3E7m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/earth", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-13-earth.jpg", BGdesc:"Earth. 1.3E7m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/earth", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-13-earth.jpg", BGdesc:"Earth. 1.3E7m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/nation", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-20-nation.jpg", BGdesc:"North America. 4E6m ", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/nation", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-20-nation.jpg", BGdesc:"North America. 4E6m ", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/nation", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-20-nation.jpg", BGdesc:"North America. 4E6m ", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/city", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-21-city.jpg", BGdesc:"Chicago. 4.5E4m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/city", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-21-city.jpg", BGdesc:"Chicago. 4.5E4m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/city", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-21-city.jpg", BGdesc:"Chicago. 4.5E4m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/block", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-22-block.jpg", BGdesc:"Neighborhood. 5E2m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/block", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-22-block.jpg", BGdesc:"Neighborhood. 5E2m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/block", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-22-block.jpg", BGdesc:"Neighborhood. 5E2m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/room", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-23-room.jpg", BGdesc:"Apartment. 1E1m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/room", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-23-room.jpg", BGdesc:"Apartment. 1E1m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/room", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-23-room.jpg", BGdesc:"Apartment. 1E1m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/cells", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-31-cells.jpg", BGdesc:"Cells. 2E-5m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/cells", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-31-cells.jpg", BGdesc:"Cells. 2E-5m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/cells", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-31-cells.jpg", BGdesc:"Cells. 2E-5m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/atoms", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-32-atoms.jpg", BGdesc:"Molecules. 9E-9m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/atoms", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-32-atoms.jpg", BGdesc:"Molecules. 9E-9m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/atoms", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-32-atoms.jpg", BGdesc:"Molecules. 9E-9m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/quark", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-33-quark.jpg", BGdesc:"Instantons. 1.6E-35m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/quark", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-33-quark.jpg", BGdesc:"Instantons. 1.6E-35m", BGdur:1500, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/quark", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-33-quark.jpg", BGdesc:"Instantons. 1.6E-35m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/quark", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-33-quark.jpg", BGdesc:"Instantons. 1.6E-35m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/quark", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-33-quark.jpg", BGdesc:"Instantons. 1.6E-35m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/atoms", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-32-atoms.jpg", BGdesc:"Molecules. 9E-9m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/atoms", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-32-atoms.jpg", BGdesc:"Molecules. 9E-9m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/atoms", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-32-atoms.jpg", BGdesc:"Molecules. 9E-9m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/cells", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-31-cells.jpg", BGdesc:"Cells. 2E-5m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/cells", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-31-cells.jpg", BGdesc:"Cells. 2E-5m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/cells", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-31-cells.jpg", BGdesc:"Cells. 2E-5m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/room", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-23-room.jpg", BGdesc:"Apartment. 1E1m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/room", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-23-room.jpg", BGdesc:"Apartment. 1E1m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/room", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-23-room.jpg", BGdesc:"Apartment. 1E1m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/block", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-22-block.jpg", BGdesc:"Neighborhood. 5E2m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/block", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-22-block.jpg", BGdesc:"Neighborhood. 5E2m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/block", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-22-block.jpg", BGdesc:"Neighborhood. 5E2m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/city", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-21-city.jpg", BGdesc:"Chicago. 4.5E4m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/city", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-21-city.jpg", BGdesc:"Chicago. 4.5E4m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/city", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-21-city.jpg", BGdesc:"Chicago. 4.5E4m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/nation", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-20-nation.jpg", BGdesc:"North America. 4E6m ", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/nation", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-20-nation.jpg", BGdesc:"North America. 4E6m ", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/nation", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-20-nation.jpg", BGdesc:"North America. 4E6m ", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/earth", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-13-earth.jpg", BGdesc:"Earth. 1.3E7m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/earth", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-13-earth.jpg", BGdesc:"Earth. 1.3E7m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/earth", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-13-earth.jpg", BGdesc:"Earth. 1.3E7m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/planets", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-12-planets.jpg", BGdesc:"Solar System. 2.5E8m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/planets", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-12-planets.jpg", BGdesc:"Solar System. 2.5E8m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/planets", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-12-planets.jpg", BGdesc:"Solar System. 2.5E8m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/sun", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-11-sun.jpg", BGdesc:"Sun. 1.4E9m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/sun", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-11-sun.jpg", BGdesc:"Sun. 1.4E9m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/sun", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-11-sun.jpg", BGdesc:"Sun. 1.4E9m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/stars", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-10-stars.jpg", BGdesc:"Local Star Clusters. 9.5E17m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/stars", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-10-stars.jpg", BGdesc:"Local Star Clusters. 9.5E17m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/stars", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-10-stars.jpg", BGdesc:"Local Star Clusters. 9.5E17m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/galaxy", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-03-galaxy.jpg", BGdesc:"Galaxy Similar to Ours. 5.2E20m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/galaxy", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-03-galaxy.jpg", BGdesc:"Galaxy Similar to Ours. 5.2E20m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/galaxy", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-03-galaxy.jpg", BGdesc:"Galaxy Similar to Ours. 5.2E20m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/cluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-02-cluster.jpg", BGdesc:"Local Galactic Cluster. 9E22m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/cluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-02-cluster.jpg", BGdesc:"Local Galactic Cluster. 9E22m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/cluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-02-cluster.jpg", BGdesc:"Local Galactic Cluster. 9E22m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/supercluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-01-supercluster.jpg", BGdesc:"Local Galactic Supercluster. 2.7E24m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/supercluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-01-supercluster.jpg", BGdesc:"Local Galactic Supercluster. 2.7E24m", BGdur:1000, BGzoom:3 },
    { BGlink:"http://bedno.com/photos/album/zoom/supercluster", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-01-supercluster.jpg", BGdesc:"Local Galactic Supercluster. 2.7E24m", BGdur:1500, BGzoom:1 },
    { BGlink:"http://bedno.com/photos/album/zoom/universe", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-00-universe.jpg", BGdesc:"Observable Universe. 1.7E26m", BGdur:1000, BGzoom:6 },
    { BGlink:"http://bedno.com/photos/album/zoom/universe", BGsrc:"http://bedno.com/p/a/zoom/v/zoom-00-universe.jpg", BGdesc:"Observable Universe. 1.7E26m", BGdur:1000, BGzoom:3 } ] },
  { BGcode:"workout", BGshow:"", BGslides: [
    { BGsrc:"http://bedno.com/g/workout.png", BGlink:"", BGdesc:"", BGdur:0, BGzoom:1 } ] }
  ];

// GLOBALS
var MasterDur = 500;  // Master update frequency.  All timers and durations are in milliseconds.  500=half second.
var MasterTimer = null;
var WinWidPhys, WinHgtPhys, WinWid, WinHgt, WinMin, WinMax;
var OfsX = 0;  var OfsY = 0;  // Randomized slight offsets to reduce screen burn-in.
var BGcurr = 0;
var ShowIntro = 1;
var BGframe = 0;  var BGframePrev = BGframe;
var BGframeInc = 1;  var BGtimer = -1;

var SunRise = '';  var SunSet = '';  var SunTimeSizing = 0.04;
var ClockColor = ClockDay;  var ClockColorPrev = '';  var ClockColorOpp = ClockNight;
var ClockCursor = '';  var ClockBlink = 0;
var ClockDur = MasterDur;  var ClockTimer = 0;
var ClockCanvas, ClockContext;
var HourPrev = -1;  var HourCurr = -1;
var MinutePrev = -1;  var MinuteCurr = -1;
var AbrvMon = new Array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
var AbrvDoW = new Array('Su', 'Mo','Tu','We','Th','Fr', 'Sa');
var WeatherCurrent = '';
var WeatherCurrentIcon = '';
var WeatherCurrentSpoken = "";
var WeatherForecast = '';
var WeatherForecastSpoken = [];
var WeatherForecastTimer = 0;
var WeatherCurrentTimer = 0;
var WeatherURLeff = "";
var RadarURLeff = "";
var RadarWid, RadarHgt;
var RadarIdx = -1;
var RadarTimer = -1;
var IntroDur = 10000;  var IntroTimer = IntroDur+1;
var Display = "";
var BootedCurr = "";  var BootedFirst = "";

// Remember some settings.
function haslocalstorage() { try { return 'localStorage' in window && window['localStorage'] !== null; } catch(e){ return false; } }
function DTadj () {
  var DTadjTmp = new Date();
  return(DTadjTmp.getTime() + (InfoZone*60*60*1000));
}

function FmtMinus (FMin) {
  return(FMin.toString().replace(/-([0-9]+)/gi,"<nobr><span style='font-size:80%; vertical-align:40%;'>-</span>$1</nobr>"));
}
// Used to force non-caching of webcam images.
function UnqArg () {
  var UAdt=new Date(DTadj());
  return(''+UAdt.getYear()+''+(UAdt.getMonth()+1)+''+UAdt.getDate()+''+UAdt.getHours()+''+UAdt.getMinutes()+''+UAdt.getSeconds()+'');
}

function SetupBG() {
  // BGshow= [A]nalog [C]lock [D]ate [F]orecast [M]oon [R]adar [S]huffle [W]eather
  if (document.getElementById('DivIntro')) { document.getElementById('DivIntro').style.visibility='hidden'; }
  if (document.getElementById('DivWhole')) { document.getElementById('DivWhole').style.visibility='visible'; }
  if (document.getElementById('DivBG')) { document.getElementById('DivBG').style.visibility='visible'; }
  if (document.getElementById('DivBGdesc')) { document.getElementById('DivBGdesc').style.visibility='visible'; }
  if (BGdata[BGcurr].BGshow.indexOf('C')<0) {
    document.getElementById('DivTime').style.visibility='hidden';
    document.getElementById('SpanTime').style.visibility='hidden';
  } else {
    document.getElementById('DivTime').style.visibility='visible';
    document.getElementById('SpanTime').style.visibility='visible';
  }
  if (BGdata[BGcurr].BGshow.indexOf('A')<0) {
    document.getElementById('DivAnalog').style.visibility='hidden';
  } else {
    document.getElementById('DivAnalog').style.visibility='visible';
  }
  if (BGdata[BGcurr].BGshow.indexOf('I')<0) {
    document.getElementById('DivAbout').style.visibility='hidden';
  } else {
    document.getElementById('DivAbout').style.visibility='visible';
  }
  if (BGdata[BGcurr].BGshow.indexOf('D')<0) {
    document.getElementById('DivDate').style.visibility = 'hidden';
    document.getElementById('SpanDate').style.visibility = 'hidden';
  } else {
    document.getElementById('DivDate').style.visibility = 'visible';
    document.getElementById('SpanDate').style.visibility = 'visible';
  }
  if (BGdata[BGcurr].BGshow.indexOf('W')<0) {
    document.getElementById('DivWeatherCurrent').style.visibility='hidden';
  } else {
    document.getElementById('DivWeatherCurrent').style.visibility='visible';
  }

  if (BGdata[BGcurr].BGshow.indexOf('F')<0) {
    if (BGdata[BGcurr].BGshow.indexOf('W')<0) {
      document.getElementById('DivWeatherForecast').style.visibility='hidden';
      document.getElementById('DivWeatherCurrent').style.visibility='hidden';
    } else {
      document.getElementById('DivWeatherForecast').style.visibility='visible';
      document.getElementById('DivWeatherCurrent').style.visibility='hidden';
    }
  } else {
    document.getElementById('DivWeatherForecast').style.visibility='visible';
    if (BGdata[BGcurr].BGshow.indexOf('W')<0) {
      document.getElementById('DivWeatherCurrent').style.visibility='hidden';
    } else {
      document.getElementById('DivWeatherCurrent').style.visibility='visible';
    }
  }
  if (BGdata[BGcurr].BGshow.indexOf('M')<0) {
    document.getElementById('DivMoonImg').style.visibility='hidden';
    document.getElementById('DivSunTimes').style.visibility='hidden';
  } else {
    document.getElementById('DivMoonImg').style.visibility='visible';
    document.getElementById('DivSunTimes').style.visibility='visible';
  }
  if (BGdata[BGcurr].BGshow.indexOf('R')<0) {
    document.getElementById('DivRadar').style.visibility='hidden';
    document.getElementById('RadarImg').style.visibility='hidden';
    RadarIdx=-1;
  } else {
    document.getElementById('DivRadar').style.visibility='visible';
    document.getElementById('RadarImg').style.visibility='visible';
  }
  if (BGdata[BGcurr].BGshow=="") {
    document.getElementById('DivBG').addEventListener("click", NextBG, false);
  }
  RadarTimer = -1;  BGtimer = -1;
}

// Increment to next BG on user keypress or click.
function NextBG() {
  BGcurr = (BGcurr+1) % BGdata.length;
  if (haslocalstorage()) {
    try { localStorage.setItem('BGcurr', BGcurr.toString()); }
    catch (err) { }
  }
  ShowIntro = 0;  IntroTimer = -1;
  DoReLoad();
}

// Background update handler.  Sequences through slides.
function UpdBG() {
  var ImgSrc = '';
  var BGlinkEff = "";
  if (BGtimer < MasterDur) {
    if (BGframeInc < 1) {
      BGframe = BGframePrev;
    } else {
      if (BGdata[BGcurr].BGshow.indexOf('S')>=0) {
        BGframePrev = BGframe;
        do { BGframe = Math.floor(Math.random()*BGdata[BGcurr].BGslides.length); }
        while (BGframe==BGframePrev);
      }
    }
    ImgSrc = BGdata[BGcurr].BGslides[BGframe].BGsrc;
    ImgSrc = ImgSrc.replace(/{unq}/,UnqArg());
    if (ImgSrc.indexOf('#') >= 0) { ImgSrc += UnqArg(); }
    document.getElementById('DivBGdesc').innerHTML = '';
    if (BGdata[BGcurr].BGshow.indexOf('R')>=0) {
      if (ImgSrc.toUpperCase().indexOf(RadarURLsrc.toUpperCase())>=0) {
        document.getElementById('RadarImg').style.visibility='hidden';
      } else {
        document.getElementById('RadarImg').style.visibility='visible';
      }
    } else {
      document.getElementById('RadarImg').style.visibility='hidden';
    }    
    document.getElementById('ImgBG').src = ImgSrc;
    document.getElementById('ImgBG').height = Math.floor(WinHgt*BGdata[BGcurr].BGslides[BGframe].BGzoom);
    document.getElementById('ImgBG').width = Math.floor(WinWid*BGdata[BGcurr].BGslides[BGframe].BGzoom);
    document.getElementById('DivBG').style.top = Math.floor(0.5*(WinHgt-(WinHgt*BGdata[BGcurr].BGslides[BGframe].BGzoom)));
    document.getElementById('DivBG').style.left = Math.floor(0.5*(WinWid-(WinWid*BGdata[BGcurr].BGslides[BGframe].BGzoom)));
    document.getElementById('DivBG').style.visibility='visible';
    BGlinkEff = BGdata[BGcurr].BGslides[BGframe].BGlink;
    if (BGlinkEff == WeatherURL) { BGlinkEff = WeatherURLeff; }
    if (BGlinkEff!="") {
      document.getElementById('DivBGdesc').innerHTML = '<a href="'+BGlinkEff+'" target=_blank style="font-family:Arial; color:#000000; text-decoration:none; font-size:12pt; text-shadow:1px 1px 0px #EEEEEE; -webkit-font-smoothing:antialiased;">'+BGdata[BGcurr].BGslides[BGframe].BGdesc+'</a>';
    } else {
      document.getElementById('DivBGdesc').innerHTML = BGdata[BGcurr].BGslides[BGframe].BGdesc;
    }
    BGtimer = BGdata[BGcurr].BGslides[BGframe].BGdur;
    BGframePrev = BGframe;
    BGframe = (BGframe+BGframeInc) % BGdata[BGcurr].BGslides.length;
  } else {
    if (BGtimer<999999) { BGtimer -= MasterDur; }
  }
}

// Show the moon in current phase.
function ShowMoon() {
  SetupSun();
  var MoonTimes = SunCalc.getMoonIllumination(new Date());
  var MoonPhase = Math.floor(MoonTimes.phase*10);
  var MoonDaysToFull = 0;
  var SunMoonOut = "";
  if (MoonTimes.phase<0.5) {
    MoonDaysToFull = ''+(Math.floor((29.53/2) - (29.53*MoonTimes.phase)));
  } else {
    MoonDaysToFull = (Math.floor(29.53*(0.5-MoonTimes.phase)));
  }
  if (BGdata[BGcurr].BGshow.indexOf('M')>=0) {
    document.getElementById('DivMoonImg').style.left = OfsX+Math.floor(WinWid-(WinMin*MoonDiam)+11)+'px';
    document.getElementById('DivMoonImg').innerHTML = '<img align=top src="http://bedno.com/g/moon'+(MoonPhase)+'.gif" height='+(WinMin*MoonDiam)+' width='+(WinMin*MoonDiam)+' border=0>';
    document.getElementById('DivSunTimes').style.left = (OfsX)+'px';
    document.getElementById('DivSunTimes').style.top = (OfsY)+'px';
    document.getElementById('DivSunTimes').style.width = (WinWid-40)+'px';
    SunMoonOut += '<span style="font-family:Arial; color:#FDFF59; font-size:'+Math.floor(WinWid*SunTimeSizing)+'px; font-decoration:bold; text-shadow:-0.03em 0.03em 0em #9A008D; -webkit-font-smoothing:antialiased;" title="Sunrise time.">'+SunRise+'</span>&nbsp;';
    SunMoonOut += '<span style="font-family:Arial; color:#FFB883; font-size:'+Math.floor(WinWid*SunTimeSizing)+'px; font-decoration:bold; text-shadow:-0.03em 0.03em 0em #9A008D; -webkit-font-smoothing:antialiased;" title="Sunset time.">'+SunSet+'</span>&nbsp;';
    if (MoonDaysToFull<0) {
      SunMoonOut += '<span style="font-family:Arial; color:#000000; font-size:'+Math.floor(WinWid*SunTimeSizing*.9)+'px; text-shadow:-0.03em 0.03em 0em #FFFFFF; -webkit-font-smoothing:antialiased;" title="Days SINCE full moon.">'+Math.abs(MoonDaysToFull)+'</span>';
    } else {
      SunMoonOut += '<span style="font-family:Arial; color:#FFFFFF; font-size:'+Math.floor(WinWid*SunTimeSizing*.9)+'px; text-shadow:-0.03em 0.03em 0em #000000; -webkit-font-smoothing:antialiased;" title="Days UNTIL full moon.">'+Math.abs(MoonDaysToFull)+'</span>';
    }
    document.getElementById('DivSunTimes').innerHTML = SunMoonOut;
  }
}

// Fetch sunrise/set times and moon phase.  Set clock color.
function SetupSun() {
  var SunTimes = SunCalc.getTimes(new Date(DTadj()), InfoLat, InfoLon);
  var SunAdjMS = SunTimes.sunrise.getTime() + (InfoZone*60*60*1000);
  var SunAdjDT = new Date(SunAdjMS);
  if (SunAdjDT.getHours()<1) { SunRise = '12'; }
  if (SunAdjDT.getHours()>12) { SunRise = ''+(SunAdjDT.getHours()-12); } else { SunRise = ''+SunAdjDT.getHours(); }
  if (SunAdjDT.getMinutes()<10) { SunRise += '<font size=2>:</font>0'+SunAdjDT.getMinutes(); } else { SunRise += '<font size=2>:</font>'+SunAdjDT.getMinutes(); }
  if (SunAdjDT.getHours()>11) { SunRise += '<font size=2>P</font>'; } else { SunRise += '<font size=2>A</font>'; }
  SunUp = Math.floor(SunAdjDT.getHours());
  SunAdjMS = SunTimes.sunset.getTime() + (InfoZone*60*60*1000);
  SunAdjDT = new Date(SunAdjMS);
  if (SunAdjDT.getHours()<1) { SunSet = '12'; }
  if (SunAdjDT.getHours()>12) { SunSet = ''+(SunAdjDT.getHours()-12); } else { SunSet = ''+SunAdjDT.getHours(); }
  if (SunAdjDT.getMinutes()<10) { SunSet += '<font size=2>:</font>0'+SunAdjDT.getMinutes(); } else { SunSet += '<font size=2>:</font>'+SunAdjDT.getMinutes(); }
  if (SunAdjDT.getHours()>11) { SunSet += '<font size=2>P</font>'; } else { SunRise += '<font size=2>A</font>'; }
  SunDown = Math.floor(SunAdjDT.getHours());
  var SSdt=new Date(DTadj()); SSh=SSdt.getHours();
  if ( (SSh >= SunUp) && (SSh < SunDown) ) { ClockColor = ClockDay; ClockColorOpp = ClockNight; } else { ClockColor = ClockNight; ClockColorOpp = ClockDay; }
}

// Handle frame sequencing for inset radar.
function NextRadar() {
  if (BGdata[BGcurr].BGshow.indexOf('R')>=0) {
    if (BGdata[BGcurr].BGslides[BGframePrev].BGsrc.toUpperCase().indexOf(RadarURLsrc.toUpperCase())>=0) {
      document.getElementById('RadarImg').style.visibility='hidden';
    } else {
      if (RadarIdx>=0) {
        document.getElementById('RadarImg').style.visibility='visible';
        document.getElementById('RadarImg').src = RadarURLsrc+(((RadarIdx+RadarStartTop)%RadarQty)+RadarMin)+'.JPEG#'+UnqArg();
        RadarTimer = 1500;
        if (RadarIdx==RadarStartTop) { RadarTimer *= 2; }
      } else {
        document.getElementById('RadarImg').style.visibility='hidden';
        RadarTimer = 4000;
      }
      RadarIdx = (RadarIdx+1) % RadarQty;
    }
  }
}

// Configure location and visibility of radar inset.
function SetupRadar() {
  var RadarImgOut = "";
  document.getElementById('DivRadar').style.top = (OfsY-2)+'px';
  document.getElementById('DivRadar').style.left = (WinWid-RadarWid+2)+'px';
  document.getElementById('DivRadar').innerHTML = RadarImgOut;
  if (RadarURLeff != "") { RadarImgOut += '<a href="'+RadarURLeff+'" target="weather">'; }
  RadarImgOut += '<img src="" id="RadarImg" width='+RadarWid+' height='+RadarHgt+' onMouseover="this.width='+(RadarWid*2)+';this.height='+(RadarHgt*2)+';" onMouseout="this.width='+RadarWid+';this.height='+RadarHgt+';" style="border-radius:25px;" border=0>';
  if (RadarURLeff != "") { RadarImgOut += '</a>'; }
  document.getElementById('DivRadar').innerHTML = RadarImgOut;
  RadarTimer = 4000;
  if (BGdata[BGcurr].BGshow.indexOf('R')<1) {
    document.getElementById('RadarImg').style.visibility='hidden';
    document.getElementById('DivRadar').style.visibility='hidden';
  }
}

// Speak the weather forecast on capable browsers (including Chrome and Safari)
function SpeakForecast(WFSnum) {
  if ('speechSynthesis' in window) {
    var SpkDT=new Date(DTadj());
    var SpkHr = 0;
    SpkHr = SpkDT.getHours();
    // var SpkAP = 'AM';  if (SpkHr>11) SpkAP = 'PM';
    if (SpkHr>12) SpkHr = SpkHr-12;  if (SpkHr==0) SpkHr = 12;
    var SpkMn = "";
    if (SpkDT.getMinutes()>0) {
      SpkMn = SpkDT.getMinutes().toString();
      if (SpkMn.length<2) SpkMn = " OH "+SpkMn;
    }
    window.speechSynthesis.cancel();
    if (typeof WeatherForecastSpoken[0] !== 'undefined') {
      var SFmsg = new SpeechSynthesisUtterance();
      // var SFvoices = window.speechSynthesis.getVoices();
      // SFmsg.voice = SFvoices[10];
      // SFmsg.voiceURI = 'native';
      SFmsg.volume = 1; // 0 to 1
      SFmsg.rate = 1; // 0.1 to 10
      SFmsg.pitch = 1; //0 to 2
      SFmsg.lang = 'en-US';
      if (WFSnum==0) {
        SFmsg.text = "AT "+SpkHr.toString()+" "+SpkMn+" IT'S "+WeatherCurrentSpoken.toUpperCase()+" "+WeatherForecastSpoken[0].replace(/^[^\s]+\ /,'FORECAST ');
      } else {
        SFmsg.text = WeatherForecastSpoken[WFSnum];
      }
      window.speechSynthesis.speak(SFmsg);
    }
  }
}

// Asynchronous receive and parse of JSON response to weather forecast query (on capable browsers).  Current supports only Wunderground.com format.
var WeatherForecastHandle = 0;
function WeatherForecastReceive() {
  WeatherForecast = '';
  if ( (WeatherForecastHandle.readyState==4) && (WeatherForecastHandle.status==200) ) {
    var FWFread = WeatherForecastHandle.responseText;
    try {
      var FWFrec = JSON.parse(FWFread);
      function WFspokenPrep(WFSnum) {
        WeatherForecastSpoken[WFSnum] = FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['date']['weekday']+" ";
        WeatherForecastSpoken[WFSnum] += FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['low']['fahrenheit']+" to "+FWFrec['forecast']['simpleforecast']['forecastday'][WFSnum]['high']['fahrenheit']+". ";
        WeatherForecastSpoken[WFSnum] += FWFrec['forecast']['txt_forecast']['forecastday'][WFSnum]['fcttext'];
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].toUpperCase();
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([0-9])s([^A-Z0-9])/gi,"$1's$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([0-9])F/gi,"$1");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])E([^A-Z0-9])/gi,"$1EAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])W([^A-Z0-9])/gi,"$1WEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])N([^A-Z0-9])/gi,"$1NORTH$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])S([^A-Z0-9])/gi,"$1SOUTH$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])NE([^A-Z0-9])/gi,"$1NORTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])SE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])SW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])NW([^A-Z0-9])/gi,"$1NORTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])NNE([^A-Z0-9])/gi,"$1NORTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])ENE([^A-Z0-9])/gi,"$1NORTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])ESE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])SSE([^A-Z0-9])/gi,"$1SOUTHEAST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])SSW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])WSW([^A-Z0-9])/gi,"$1SOUTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])WNW([^A-Z0-9])/gi,"$1NORTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/([^A-Z0-9\.\-'\,])NNW([^A-Z0-9])/gi,"$1NORTHWEST$2");
        WeatherForecastSpoken[WFSnum] = WeatherForecastSpoken[WFSnum].replace(/MPH/gi,"");
      }
      for (var FWFlp=0; FWFlp<2; FWFlp++) {
        if (WeatherForecast.length > 10) { WeatherForecast += "\n &nbsp; "; }
        if ('speechSynthesis' in window) {
          WeatherForecast += '<a href="JavaScript:SpeakForecast('+FWFlp+');" title="Speak the forecast." style="text-decoration:none;">';
        } else {
          if (WeatherURLeff!="") {
            WeatherForecast += '<a href="'+WeatherURLeff+'" title="Detailed Weather Forecast" target="weather" style="text-decoration:none;">';
          }
        }
        WeatherForecast += '<span style="font-family:Arial; font-size:'+(Math.floor(WinHgt/ForecastRows))+'px; line-height:90%; color:'+ForecastColor+'; text-shadow:-0.03em 0.03em 0em #9A008D; -webkit-font-smoothing:antialiased;">';
        WeatherForecast += '<nobr><img src="'+FWFrec['forecast']['txt_forecast']['forecastday'][FWFlp]['icon_url']+'" height="'+(Math.floor((WinHgt/ForecastRows)*0.8))+'; margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px;" border=0>';
        WeatherForecast += FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['date']['weekday_short']+":&nbsp;";
        if (FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['low']['fahrenheit'] != FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['high']['fahrenheit']) {
          WeatherForecast += FmtMinus(FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['low']['fahrenheit'])+"-";
        }
        WeatherForecast += FmtMinus(FWFrec['forecast']['simpleforecast']['forecastday'][FWFlp]['high']['fahrenheit'])+"&deg;</nobr>\n";
        WFtext = FWFrec['forecast']['txt_forecast']['forecastday'][FWFlp]['fcttext'];
        WFtext = WFtext.replace(/ -([0-9]+)/gi," <nobr><span style='font-size:80%; vertical-align:40%;'>-</span>$1</nobr>");
        WeatherForecast += WFtext+"</span>";
        if ( ('speechSynthesis' in window) || (WeatherURLeff!="") ) { WeatherForecast += "</a>"; }
        WeatherForecast = WeatherForecast.replace(/([0-9])F/gi,"$1&deg;");
        WeatherForecast = WeatherForecast.replace(/([0-9<>;]+) to ([0-9<>;]+)/gi,"$1-$2");
        WeatherForecast = WeatherForecast.replace(/ at ([0-9<>;]+)/gi," $1");
        WeatherForecast = WeatherForecast.replace(/ mph/gi,"");
        WeatherForecast = WeatherForecast.replace(/\.\.\./gi,"; ");
        WeatherForecast = WeatherForecast.replace(/\s[\s]+/gi," ");
        WeatherForecast = WeatherForecast.replace(/ inches/gi," in");
        WeatherForecast = WeatherForecast.replace(/^[\s]+/gi,"");
        WeatherForecast = WeatherForecast.replace(/[\s]+$/gi,"");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])NNE([^A-Z0-9])/gi,"$1NE$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])ENE([^A-Z0-9])/gi,"$1NE$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])ESE([^A-Z0-9])/gi,"$1SE$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])SSE([^A-Z0-9])/gi,"$1SE$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])SSW([^A-Z0-9])/gi,"$1SW$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])WSW([^A-Z0-9])/gi,"$1SW$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])WNW([^A-Z0-9])/gi,"$1NW$2");
        WeatherForecast = WeatherForecast.replace(/([^A-Z0-9])NNW([^A-Z0-9])/gi,"$1NW$2");
        WFspokenPrep(FWFlp);
      }
      WeatherForecast += "\n";
    } catch (err) {
      WeatherForecast = '<font size=2>Weather forecast is not available on this browser.</font>';
    }
    if (BGdata[BGcurr].BGshow.indexOf('F')>=0) {
      document.getElementById('DivWeatherForecast').innerHTML = WeatherForecast;
    }
  }
}
// Request weather forecast on capable browsers.
function WeatherForecastRequest() {
  var WFout = "";
  try {
    WeatherForecastHandle = new XMLHttpRequest();
  } catch (trymicrosoft) {
    try {
      WeatherForecastHandle = new ActiveXObject('Msxml2.XMLHTTP');
    } catch (othermicrosoft) {
      try {
        WeatherForecastHandle = new ActiveXObject('Microsoft.XMLHTTP');
      } catch (failed) {
        WeatherForecastHandle = false;
      }
    }
  }
  if (WeatherForecastHandle) {
    try {
      if (WeatherForecastURL.length>1) {
        WeatherForecastHandle.open('GET', WeatherForecastURL, true);
        WeatherForecastHandle.timeout = 20000;
        WeatherForecastHandle.onreadystatechange = WeatherForecastReceive;
        WeatherForecastHandle.send(null);
      }
    } catch (err) {
      WeatherForecast = '<font size=2>Weather forecast is not available on this browser.</font>';
      if (WeatherURLeff!="") { WFout += '<a href="'+WeatherURLeff+'" title="Detailed Weather Forecast" target="weather">"'; }
      WFout += '<span style="font-family:Arial; font-size:'+(Math.floor(WinHgt/ForecastRows))+'px; line-height:'+(Math.floor((WinHgt/ForecastRows)*ForecastRowsHgt))+'px; text-decoration:none; color:'+ForecastColor+'; text-shadow:-0.03em 0.03em 0em #9A008D; -webkit-font-smoothing:antialiased;">'+WeatherForecast+'</span>';
      if (WeatherURLeff!="") { WFout += '</a>'; }
      document.getElementById('DivWeatherForecast').innerHTML = WFout;
    }
  }
  WeatherForecastTimer = WeatherForecastDur;
}

// Asynchronous receive and parse of JSON response to weather current conditions query (on capable browsers).  Current supports only Wunderground.com format.
var WeatherCurrentHandle = false;
function WeatherCurrentReceive() {
  if ( (WeatherCurrentHandle.readyState==4) && (WeatherCurrentHandle.status==200) ) {
    var FWCread = WeatherCurrentHandle.responseText;
    try {
      var FWCrec = JSON.parse(FWCread);
      WeatherCurrent = '';
      WeatherCurrentIcon = '<img src="'+FWCrec['current_observation']['icon_url']+'" border=0 width=64 height=64';
      if (WeatherURLeff!="") { WeatherCurrentIcon += ' onClick="window.open(WeatherURLeff);"'; }
      WeatherCurrentIcon += '>';
      WeatherCurrent += '<nobr><span style="font-size:'+Math.floor(RadarWid*WeatherCurrentSizing*1.1)+'pt;">'+FmtMinus(FWCrec['current_observation']['temp_f'])+'</span>&deg;</nobr> ';
      WeatherCurrentSpoken += FWCrec['current_observation']['temp_f']+", ";
      if (FWCrec['current_observation']['weather'].length>1) {
        WeatherCurrentSpoken += FWCrec['current_observation']['weather']+", "
      }
      if ( (FWCrec['current_observation']['wind_mph']>2) || (FWCrec['current_observation']['wind_gust_mph']>2) ) {
        WeatherCurrentSpoken += ", ";
        if (FWCrec['current_observation']['wind_dir'].length<1) {
          WeatherCurrentSpoken += "variable ";
        } else {
          WeatherCurrentSpoken += FWCrec['current_observation']['wind_dir']+" ";
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])NE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])NNE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])ENE([^A-Z0-9])/gi,"$1NorthEast$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])ESE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])SE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])SSE([^A-Z0-9])/gi,"$1SouthEast$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])SW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])SSW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])WSW([^A-Z0-9])/gi,"$1SouthWest$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])NW([^A-Z0-9])/gi,"$1NorthWest$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])WNW([^A-Z0-9])/gi,"$1NorthWest$2");
          WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/([^A-Z0-9])NNW([^A-Z0-9])/gi,"$1NorthWest$2");
        }
        if (FWCrec['current_observation']['wind_mph']<=2) {
          WeatherCurrentSpoken += "gusting at "+FWCrec['current_observation']['wind_gust_mph'];
        } else {
          WeatherCurrentSpoken += "at "+FWCrec['current_observation']['wind_mph'];
          if ( (FWCrec['current_observation']['wind_gust_mph']>2) && ((FWCrec['current_observation']['wind_gust_mph']-FWCrec['current_observation']['wind_mph'])>1) ) {
            WeatherCurrentSpoken += " to "+FWCrec['current_observation']['wind_gust_mph'];
          }
        }
      }
      var FWhum = FWCrec['current_observation']['relative_humidity'].replace('%','');
      // if ( (FWhum>1) && (FWhum<120) ) { WeatherCurrentSpoken += ", humidity "+FWhum.toString()+" percent"; }
      if ( (FWCrec['current_observation']['windchill_f']!="") && (FWCrec['current_observation']['windchill_f']!="NA") && (FWCrec['current_observation']['windchill_f']!="N/A") && (FWCrec['current_observation']['windchill_f']!="null") && (FWCrec['current_observation']['windchill_f']!="undefined") &&
           (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['windchill_f'])>4) ) {
        WeatherCurrentSpoken += ", feels like "+FWCrec['current_observation']['windchill_f'];
      } else {
        if ( (FWCrec['current_observation']['heat_index_f']!="") && (FWCrec['current_observation']['heat_index_f']!="NA") && (FWCrec['current_observation']['heat_index_f']!="N/A") && (FWCrec['current_observation']['heat_index_f']!="null") && (FWCrec['current_observation']['heat_index_f']!="undefined") &&
             (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['heat_index_f'])>4) ) {
          WeatherCurrentSpoken += ", feels like "+FWCrec['current_observation']['heat_index_f'];
        }
      }
      WeatherCurrentSpoken += ".";
      WeatherCurrentSpoken = WeatherCurrentSpoken.replace(/\.0/g,'');
      var WindText = '';
      var WindDir = FWCrec['current_observation']['wind_dir'];
      if (WindDir.length < 1) { WindDir = 'V'; }
      if ( (FWCrec['current_observation']['wind_mph']>2) || (FWCrec['current_observation']['wind_gust_mph']>2) ) {
        if (FWCrec['current_observation']['wind_mph']<=2) {
          WindText += '<span style="font-size:'+(Math.floor(RadarWid*WeatherHgtMult*0.8))+'pt; font-stretch:condensed;">'+WindDir+'</span><i><span style="font-size:'+(Math.floor(RadarWid*WeatherHgtMult*0.4))+'pt; vertical-align:20%; margin-right:-4px">&#45;</span>'+FWCrec['current_observation']['wind_gust_mph']+'</i></span>';
        } else {
          WindText += '<span style="font-size:'+(Math.floor(RadarWid*WeatherHgtMult*0.8))+'pt; font-stretch:condensed;">'+WindDir+'</span>';
          WindText += FWCrec['current_observation']['wind_mph'];
          if ( (FWCrec['current_observation']['wind_gust_mph']>2) && ((FWCrec['current_observation']['wind_gust_mph']-FWCrec['current_observation']['wind_mph'])>1) ) {
            WindText += '<span style="font-size:'+(Math.floor(RadarWid*WeatherHgtMult*0.9))+'pt;"><i><span style="font-size:'+(Math.floor(RadarWid*WeatherHgtMult*0.4))+'pt; vertical-align:20%; margin-right:-4px">&#45;</span>'+FWCrec['current_observation']['wind_gust_mph']+'</i></span>';
          }
        }
      }
      if (WindText.length>1) {
        WeatherCurrent += '<nobr>'+WindText+'</nobr> ';
      }
      if ( (FWhum>1) && (FWhum<120) ) {
        WeatherCurrent += '<nobr><span style="font-size:'+Math.floor(RadarWid*WeatherHgtMult*0.9)+'pt;">'+FWhum+'<span style="font-size:'+Math.floor(RadarWid*WeatherHgtMult*0.6)+'pt; font-stretch:condensed;">&oslash;</span></span></nobr> ';
      }
      if ( (FWCrec['current_observation']['windchill_f']!="") && (FWCrec['current_observation']['windchill_f']!="NA") && (FWCrec['current_observation']['windchill_f']!="N/A") && (FWCrec['current_observation']['windchill_f']!="null") && (FWCrec['current_observation']['windchill_f']!="undefined") &&
           (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['windchill_f'])>4) ) {
        WeatherCurrent += '<span style="font-size:'+Math.floor(RadarWid*WeatherHgtMult*0.9)+'pt;"><i>'+FmtMinus(FWCrec['current_observation']['windchill_f'])+'<span style="font-size:'+Math.floor(RadarWid*WeatherHgtMult*0.7)+'pt;">&#8226;</span></i></span></nobr> ';
      } else {
        if ( (FWCrec['current_observation']['heat_index_f']!="") && (FWCrec['current_observation']['heat_index_f']!="NA") && (FWCrec['current_observation']['heat_index_f']!="N/A") && (FWCrec['current_observation']['heat_index_f']!="null") && (FWCrec['current_observation']['heat_index_f']!="undefined") &&
             (Math.abs(FWCrec['current_observation']['temp_f']-FWCrec['current_observation']['heat_index_f'])>4) ) {
          WeatherCurrent += '<nobr><span style="font-size:'+Math.floor(RadarWid*WeatherHgtMult*0.9)+'pt;"><i>'+FmtMinus(FWCrec['current_observation']['heat_index_f'])+'<span style="font-size:'+Math.floor(RadarWid*WeatherHgtMult*0.7)+'pt;">i</span></i></span></nobr> ';
        }
      }
      if (BGdata[BGcurr].BGshow.indexOf('A')<0) {
        WeatherCurrent += ' '+FWCrec['current_observation']['weather']+"<br>\n"+WeatherCurrentIcon;
      } else {
        WeatherCurrent = WeatherCurrentIcon+' '+WeatherCurrent+"\n";
      }
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])East([^A-Z0-9])/gi,"$1E$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])West([^A-Z0-9])/gi,"$1W$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])North([^A-Z0-9])/gi,"$1N$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])South([^A-Z0-9])/gi,"$1S$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])NNE([^A-Z0-9])/gi,"$1NE$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])ENE([^A-Z0-9])/gi,"$1NE$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])ESE([^A-Z0-9])/gi,"$1SE$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])SSE([^A-Z0-9])/gi,"$1SE$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])SSW([^A-Z0-9])/gi,"$1SW$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])WSW([^A-Z0-9])/gi,"$1SW$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])WNW([^A-Z0-9])/gi,"$1NW$2");
      WeatherCurrent = WeatherCurrent.replace(/([^A-Z0-9])NNW([^A-Z0-9])/gi,"$1NW$2");
      WeatherCurrent = WeatherCurrent.replace(/\.0/g,'');
    } catch (err) {
      WeatherCurrent = '';
    }
    if (BGdata[BGcurr].BGshow.indexOf('W')>=0) {
      var WeatherURLtmp = WeatherURLeff;
      if ( (BGdata[BGcurr].BGshow.indexOf('F')<0) && ('speechSynthesis' in window) ) { WeatherURLtmp = 'JavaScript:SpeakForecast(0);'; }
      var FWCout = "";
      if (WeatherURLtmp!="") { FWCout += '<a href="'+WeatherURLtmp+'" title="Detailed Weather Forecast" target="weather" style="text-decoration:none;">'; }
      FWCout += '<span style="font-family:Arial; font-size:'+Math.floor(RadarWid*WeatherHgtMult)+'pt; line-height:'+Math.floor(RadarWid*WeatherHgtMult*0.85)+'pt; color:#FFFFFF; text-decoration:none; text-shadow:-0.03em 0.03em 0em #9A008D; -webkit-font-smoothing:antialiased;">'+WeatherCurrent+'</span>';
      if (WeatherURLtmp!="") { FWCout += '</a>'; }
      if (BGdata[BGcurr].BGshow.indexOf('F')<0) {
        document.getElementById('DivWeatherForecast').innerHTML = FWCout;
      } else {
        document.getElementById('DivWeatherCurrent').innerHTML = FWCout;
      }
    }
    ShowMoon();
  }
}
// Request weather current conditions on capable browsers.
function WeatherCurrentRequest() {
  try {
    WeatherCurrentHandle = new XMLHttpRequest();
  } catch (trymicrosoft) {
    try {
      WeatherCurrentHandle = new ActiveXObject('Msxml2.XMLHTTP');
    } catch (othermicrosoft) {
      try {
        WeatherCurrentHandle = new ActiveXObject('Microsoft.XMLHTTP');
      } catch (failed) {
        WeatherCurrentHandle = false;
      }
    }
  }
  if (WeatherCurrentHandle) {
    try {
      if (WeatherCurrentURL.length>1) {
        WeatherCurrentHandle.open('GET', WeatherCurrentURL, true);
        WeatherCurrentHandle.timeout = 20000;
        WeatherCurrentHandle.onreadystatechange = WeatherCurrentReceive;
        WeatherCurrentHandle.send(null);
      }
    } catch (err) {
    }
  }
  WeatherCurrentTimer = WeatherCurrentDur;
}

// Setup weather display areas.
function SetupWeather() {
  if ( (BGdata[BGcurr].BGshow.indexOf('F')<0) && (BGdata[BGcurr].BGshow.indexOf('W')>=0) ) { // Current weather but no forecast.
    document.getElementById('DivWeatherForecast').style.top = (OfsY+WinHgt-(Math.floor(((WinHgt/ForecastRows)*ForecastRowsHgt)*3)))+'px';
    document.getElementById('DivWeatherForecast').style.height = (Math.floor(((WinHgt/ForecastRows)*ForecastRowsHgt)*5)-2)+'px';
    document.getElementById('DivWeatherForecast').style.left = (OfsX+30)+'px';
    document.getElementById('DivWeatherForecast').style.width = (WinWid-(RadarWid*0.85)-(OfsX+30))+'px';
  } else {  // Forecast block.
    document.getElementById('DivWeatherForecast').style.top = (OfsY+WinHgt-(Math.floor(((WinHgt/ForecastRows)*ForecastRowsHgt)*4.6)))+'px';
    document.getElementById('DivWeatherForecast').style.height = (Math.floor(((WinHgt/ForecastRows)*ForecastRowsHgt)*5)-2)+'px';
    document.getElementById('DivWeatherForecast').style.left = (OfsX+18)+'px';
    document.getElementById('DivWeatherForecast').style.width = (WinWid-(RadarWid*0.85)-(OfsX+18))+'px';
  }
  document.getElementById('DivWeatherCurrent').style.left = (OfsX+(WinWid-Math.floor(RadarWid*0.8))-42)+'px';
  document.getElementById('DivWeatherCurrent').style.width = (Math.floor(RadarWid*0.86))+'px';
  document.getElementById('DivWeatherCurrent').style.top = (OfsY+Math.floor(RadarHgt*0.70)+10)+'px';
  document.getElementById('DivWeatherCurrent').style.height = (WinHgt-Math.floor(RadarHgt*0.50)-2)+'px';
  WeatherForecastTimer = 0;
  WeatherCurrentTimer = 0;
}

// Display the date.
function ShowDate() {
  var SDdt = new Date(DTadj());
  var SDday = SDdt.getDate();
  var SDdow = SDdt.getDay();
  var SDmonth = SDdt.getMonth();
  if (BGdata[BGcurr].BGshow.indexOf('D')>=0) {
    if (BGdata[BGcurr].BGshow.indexOf('A')>=0) {
      document.getElementById('DivDate').style.textAlign = 'left';
      document.getElementById('DivDate').style.top = (OfsY+WinHgt*0.65)+'px';
      document.getElementById('DivDate').style.left = (OfsX+1)+'px';
      document.getElementById('SpanDate').innerHTML = '<span style="font-family:Arial; text-decoration:bold; text-shadow:-6px 6px 0px #9A008D; -webkit-font-smoothing:antialiased; color:'+ClockColor+'; font-size:'+Math.floor(WinMin*0.10)+'pt;" onClick="NextBG();">&nbsp;' + AbrvDoW[SDdow] + " " + AbrvMon[SDmonth] + " " + SDday + '</span>';
    } else {
      document.getElementById('DivDate').style.textAlign = 'center';
      document.getElementById('DivDate').style.top = (OfsY+WinHgt*0.45)+'px';
      document.getElementById('DivDate').style.left = (OfsX+1)+'px';
      document.getElementById('SpanDate').innerHTML = '<span style="font-family:Arial; text-decoration:bold; text-shadow:-6px 6px 0px #9A008D; -webkit-font-smoothing:antialiased; color:'+ClockColor+'; font-size:'+Math.floor(WinMin*0.14)+'pt;" onClick="NextBG();">' + AbrvDoW[SDdow] + "&nbsp; " + AbrvMon[SDmonth] + "&nbsp; " + SDday + '</span>';
    }
  }
}

function FetchUptimes() {
  var UTdt = new Date(DTadj());
  var UTh = UTdt.getHours();
  var UTm = UTdt.getMinutes();
  var UTs = UTdt.getSeconds();
  BootedCurr = (UTdt.getYear()+1900).toString()+'.';
  if ((UTdt.getMonth()+1)<10) { BootedCurr += '0'; }
  BootedCurr += (UTdt.getMonth()+1).toString()+'.';
  if (UTdt.getDate()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getDate().toString()+' ';
  if (UTdt.getHours()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getHours().toString()+':';
  if (UTdt.getMinutes()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getMinutes().toString()+':';
  if (UTdt.getSeconds()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getSeconds().toString();
  if (haslocalstorage()) {
    try {
      BootedFirst = localStorage.getItem('Booted');
    } catch (err) { }
  }
  if ( (! BootedFirst) || (BootedFirst.length<8) || (BootedFirst.length>21) ) {
    BootedFirst = BootedCurr;
    if (haslocalstorage()) {
      try {
        localStorage.setItem('Booted', BootedFirst);
      } catch (err) { }
    }
  }
}

// Setup analog clock.
function AnalogSetup() {
  ClockCanvas = document.getElementById("AnalogClock");
  if (ClockCanvas) {
    ClockContext = ClockCanvas.getContext("2d");
    if (ClockContext) {
      ClockCanvas.width = (WinWid-(Math.abs(OfsX)*2));
      ClockCanvas.height = (WinHgt-(Math.abs(OfsY)*2));
    } else {
      BGdata[BGcurr].BGshow = BGdata[BGcurr].BGshow.replace(/A/gi,'')+'C';
    }
  } else {
    BGdata[BGcurr].BGshow = BGdata[BGcurr].BGshow.replace(/A/gi,'')+'C';
  }
}

// Display the time (includes both digitial and analog versions).
function ShowTime() {
  var STdt=new Date(DTadj());
  STap="A";
  STh=STdt.getHours();
  HourCurr = STh;
  STm=STdt.getMinutes();
  MinuteCurr = STm;
  STs=STdt.getSeconds();
  if (STh>11) { STap = "P"; }
  if (STh>12) { STh = STh-12; }
  if (STh==0) { STh = 12; }
  if (STm<10) { STm = "0" + STm; }
  var TimeSizeMult = 0.40;
  if (BGdata[BGcurr].BGshow.indexOf('C')>=0) {
    document.getElementById('SpanTime').innerHTML = '<span style="color:'+ClockColor+'; font-size:'+Math.floor(WinMin*TimeSizeMult)+'px; font-family:Arial; text-decoration:bold; text-shadow:-6px 6px 0px #9A008D; -webkit-font-smoothing:antialiased;" onClick="DoReLoad();">' + STh + '</span>' + ClockCursor + '<span style="color:'+ClockColor+'; font-size:'+Math.floor(WinMin*TimeSizeMult)+'px; font-family:Arial; text-decoration:bold; text-shadow:-6px 6px 0px #9A008D; -webkit-font-smoothing:antialiased;" onClick="DoReLoad();">' + STm + '</span><span style="font-size:'+Math.floor(WinMin*0.07)+'pt; font-family:Arial; color:'+ClockColor+'; margin-left:-4px; vertical-align:150%;">'+STap+'</span>';
  }
  if (BGdata[BGcurr].BGshow.indexOf('A')>=0) {
    Math.TAU = 2 * Math.PI;
    // Function for drawing hands.
    function ACdraw(ACtype, ACprogress, ACwidth, AClength) {
      var ACrads = (Math.TAU * ACprogress) - (Math.TAU/4);
      var ACtgtX = Math.floor((WinWid / 2) + Math.cos(ACrads) * (AClength * (WinMin/2)));
      var ACtgtY = Math.floor((WinHgt / 2) + Math.sin(ACrads) * (AClength * (WinMin/2)));
      var ACcolor = '#FF0000';
      if (ACtype=='H') { ACcolor = '#9A008D'; } // Hour
      if (ACtype=='M') { ACcolor = '#9A008D'; } // Minute
      ClockContext.lineWidth = ACwidth;
      ClockContext.beginPath();
      ClockContext.moveTo((WinWid / 2), (WinHgt / 2));
      ClockContext.lineTo(ACtgtX, ACtgtY);
      ClockContext.strokeStyle = ACcolor;
      ClockContext.stroke();
      // Inner color.
      if (ACtype!='S') {
        ClockContext.lineWidth = ACwidth*0.6;
        ClockContext.beginPath();
        ClockContext.moveTo((WinWid / 2), (WinHgt / 2));
        ClockContext.lineTo(ACtgtX, ACtgtY);
        ClockContext.strokeStyle = ClockColor;
        ClockContext.stroke();
      }
    }
    // Clears and redraws whole every refresh.  Sloppy but simpe approach.
    ClockContext.clearRect(0, 0, ClockCanvas.width, ClockCanvas.height);
    // Draw clock outline and ticks.
    var ACtickLp, ACtickI, ACtickO, ACtickR, ACtickX1, ACtickX2, ACtickY1, ACtickY2;
    for (ACtickLp=0; ACtickLp< 12; ACtickLp++) {
      ACtickI = (ACtickLp % 3) ? 0.75 : 0.7;
      ACtickO = (ACtickLp % 3) ? 0.95 : 1.0;
      ACtickR = (Math.TAU * (ACtickLp/12)) - (Math.TAU/4);
      ACtickX1 = (WinWid / 2) + Math.cos(ACtickR) * (ACtickI * (WinMin/2));
      ACtickY1 = (WinHgt / 2) + Math.sin(ACtickR) * (ACtickI * (WinMin/2));
      ACtickX2 = (WinWid / 2) + Math.cos(ACtickR) * (ACtickO * (WinMin/2));
      ACtickY2 = (WinHgt / 2) + Math.sin(ACtickR) * (ACtickO * (WinMin/2));
      ClockContext.lineWidth = (ACtickLp % 3) ? 4 : 10;
      ClockContext.beginPath();
      ClockContext.moveTo(ACtickX1, ACtickY1);
      ClockContext.lineTo(ACtickX2, ACtickY2);
      ClockContext.strokeStyle = '#999999';
      ClockContext.lineCap = 'round';
      ClockContext.stroke();
    }
    // Render clock hands.
    ACdraw('H', (STh+(STm/60)) / 12, 36, 0.40); // Hour
    ACdraw('M', STm / 60, 20, 0.75); // Minute
    ACdraw('S', STs / 60, 4, 0.90); // Second
    document.getElementById('DivAnalog').style.visibility='visible';
  }
}

// Master update handler.  Uses a single timer.
function DoUpd() {
  ClockTimer -= MasterDur;
  if (ClockTimer<1) {
    ClockCursor = '<font style="vertical-align:20%; margin-left:-5px; font-size:'+Math.floor(WinMin*0.19)+'pt; color:';
    if (ClockBlink>0) {
      ClockBlink = 0;
      ClockCursor += ClockColor;
    } else {
      ClockBlink = 1;
      ClockCursor += "#9A008D";
    }
    ClockCursor += '; text-shadow:none;" onClick="DoReLoad();">:</font>';
    ShowTime();
    ClockTimer = ClockDur;
  }
  if (HourCurr != HourPrev) {  // Hourly change.
    SetupOfs();
    HourPrev = HourCurr;
    ShowMoon();
    ShowDate();
  }
  if (MinuteCurr != MinutePrev) {
    RadarIdx = -1;
    MinutePrev = MinuteCurr;
  }
  if (ClockColor != ClockColorPrev) {  // Sunset/Sunrise change.
    ShowMoon();
    ShowDate();
    if (ClockColorPrev!='') DoReLoad();  // Force reload on sunrise/sunset to reposition elements to reduce screen burn-in.
    ClockColorPrev = ClockColor;
  }
  RadarTimer -= MasterDur;
  if (RadarTimer<1) {
    NextRadar();
  }
  UpdBG();
  WeatherForecastTimer -= MasterDur;
  if (WeatherForecastTimer<1) {
    WeatherForecastRequest();
  }
  WeatherCurrentTimer -= MasterDur;
  if (WeatherCurrentTimer<1) {
    WeatherCurrentRequest();
  }
  if (IntroTimer <= IntroDur) {
    IntroTimer -= MasterDur;
    if (IntroTimer < MasterDur) {
      document.getElementById('DivIntro').style.visibility = 'hidden';
      IntroTimer = IntroDur+1;
    } else {
      document.getElementById('DivIntro').style.visibility = 'visible';
    }
  }
  if (MasterTimer!=null) {
    clearTimeout(MasterTimer);
    MasterTimer = null;
  }
  MasterTimer = setTimeout('DoUpd()',MasterDur);
}

// Special color testing diagnostic mode on C keypress.
var STtimer = null;
var STred = 0;  var STgreen = 0;  var STblue = 0;  var STnum = 0;
var STinc = 16;  var STdur = 200;  var STflag = 0;  var STmode = 0;
function toHex(n) {
  n = parseInt(n,10);
  if (isNaN(n)) return "00";
  n = Math.max(0,Math.min(n,255));
  return "0123456789ABCDEF".charAt((n - (n % 16))/16) + "0123456789ABCDEF".charAt(n % 16);
}
function rgbToHex(R,G,B) {return('#'+toHex(R)+toHex(G)+toHex(B)); }
function DoColors() {
  STred += STinc;
  if (STred>255) { STred=0; STgreen += STinc; if (STgreen>255) { STgreen=0; STblue += STinc; if (STblue>255) { STblue=0; } } }
  document.bgColor = rgbToHex(STred,STgreen,STblue);
  STtimer = setTimeout('DoColors()',20);
}
function DoBlink() {
  if (STflag > 0) {
    document.bgColor = '#000000';
    STflag = 0;
  } else {
    document.bgColor = '#FFFFFF';
    STflag = 1;
  }
  STtimer = setTimeout('DoBlink()',STdur);
}
function DoDiags() {
  if (STmode==0) { DoColors(); STmode=1; } else { if (STmode==1) { STdur = 5000; DoBlink(); STmode=2; } else { if (STmode==2) { STdur = 250; DoBlink(); STmode=3; } else { STdur = 20; DoBlink(); STmode=0; } } }
}

// Shift most elements around a bit everysometimes potentially to abate screen burn-in.
function SetupOfs() {
  OfsX = 4-Math.floor(Math.random()*9);  OfsY = 4-Math.floor(Math.random()*9);
}

// Main setup, refreshes all screen elements.
function DoSetup() {
  SetupOfs();
  SetupSun();
  SetupRadar();
  SetupBG();
  SetupWeather();
  document.getElementById('DivAbout').style.top = (OfsY+Math.round(WinHgt*.9))+'px';
  document.getElementById('DivAbout').style.left = (OfsX+Math.round(WinWid*.96))+'px';
  document.getElementById('SpanAbout').style.fontSize = (Math.round(WinHgt*.1))+'px';
  document.getElementById('DivIntro').style.top = (OfsY+Math.round(WinHgt*.25))+'px';
  document.getElementById('DivIntro').style.left = (OfsX+Math.round(WinWid*.25))+'px';
  document.getElementById('DivTime').style.left = (OfsX+1)+'px';
  document.getElementById('DivTime').style.top = (OfsY-10)+'px';
  if (Display.indexOf('AAXA')>=0) {
    document.getElementById('DivTime').style.width = (Math.floor(WinWid-OfsX-1-(RadarWid*0.99)))+'px';  // On AAXA projector, shift time right, slightly overlapping radar inset.
    document.getElementById('DivTime').style.textAlign = 'right';
  } else {
    document.getElementById('DivTime').style.width = (WinWid-OfsX-1-RadarWid)+'px';
    document.getElementById('DivTime').style.textAlign = 'center';
  }
  document.getElementById('DivDate').style.width = (WinWid-(RadarWid*0.7)+2)+'px';
  document.getElementById('DivAnalog').style.left = (OfsX)+'px';
  document.getElementById('DivAnalog').style.top = (OfsY)+'px';
  document.getElementById('DivBGdesc').style.left = (10+OfsX)+'px';
  document.getElementById('DivBGdesc').style.top = (10+OfsX)+'px';
  document.getElementById('DivIntro').innerHTML = About;
  window.onresize = function(event) { HourPrev = -1; DoBoot(); }
  DoUpd();
  if (ShowIntro > 0) {
    var IntroDT = new Date(DTadj());
    var IntroHr = IntroDT.getHours();
    var IntroPrev = '';
    if (haslocalstorage()) {
      try {
        IntroPrev = localStorage.getItem('IntroPrev');
      } catch (err) { }
    }
    if (IntroPrev!=IntroHr) {
      IntroTimer=IntroDur;
      if (haslocalstorage()) {
        try {
          localStorage.setItem('IntroPrev', IntroHr);
        } catch (err) { }
      }
    }
  }
}

function AllDivsOff () {
  ClockCursor = '';  ShowTime();
  if (document.getElementById('DivAbout')) { document.getElementById('DivAbout').style.visibility='hidden'; }
  if (document.getElementById('DivAnalog')) { document.getElementById('DivAnalog').style.visibility='hidden'; }
  if (document.getElementById('DivBG')) { document.getElementById('DivBG').style.visibility='hidden'; }
  if (document.getElementById('DivBGdesc')) { document.getElementById('DivBGdesc').style.visibility='hidden'; }
  if (document.getElementById('DivDate')) { document.getElementById('DivDate').style.visibility='hidden'; }
  if (document.getElementById('SpanDate')) { document.getElementById('SpanDate').style.visibility='hidden'; }
  if (document.getElementById('DivIntro')) { document.getElementById('DivIntro').style.visibility='hidden'; }
  if (document.getElementById('DivMoonImg')) { document.getElementById('DivMoonImg').style.visibility='hidden'; }
  if (document.getElementById('DivRadar')) { document.getElementById('DivRadar').style.visibility='hidden'; }
  if (document.getElementById('RadarImg')) { document.getElementById('RadarImg').style.visibility='hidden'; }
  if (document.getElementById('DivSunTimes')) { document.getElementById('DivSunTimes').style.visibility='hidden'; }
  if (document.getElementById('DivTime')) { document.getElementById('DivTime').style.visibility='hidden'; }
  if (document.getElementById('SpanTime')) { document.getElementById('SpanTime').style.visibility='hidden'; }
  if (document.getElementById('DivWeatherCurrent')) { document.getElementById('DivWeatherCurrent').style.visibility='hidden'; }
  if (document.getElementById('DivWeatherForecast')) { document.getElementById('DivWeatherForecast').style.visibility='hidden'; }
  if (document.getElementById('DivWhole')) { document.getElementById('DivWhole').style.visibility='hidden'; }
}

// Handle user keypress.  Used in body tag to catch all.
function CheckKeypress(e) {
  var KeyPressedCode = e.keyCode;
  if (STtimer!=null) { clearTimeout(STtimer); }
  if (MasterTimer!=null) { clearTimeout(MasterTimer); }
  if (String.fromCharCode(KeyPressedCode) == ' ') {  // Space = next BG
    if (MasterTimer!=null) { clearTimeout(MasterTimer); }
    NextBG();
    MasterTimer = setTimeout('DoUpd()',MasterDur);
  } else {
    if (String.fromCharCode(KeyPressedCode) == 'c') {  // Display tests.
      AllDivsOff();
      DoDiags();
    } else {
      if ( (String.fromCharCode(KeyPressedCode) == '0') || (String.fromCharCode(KeyPressedCode) == 'O') || (String.fromCharCode(KeyPressedCode) == 'o') ) {  // Display Off
        AllDivsOff();
      } else {
        if (String.fromCharCode(KeyPressedCode) == '*') {  // Change Display (projector model/options) setting.
          if (Display=="") { Display="AAXA"; } else { if (Display=="AAXA") { Display="TAO"; } else { Display=""; } }
          if (haslocalstorage()) {
            try { localStorage.setItem('Display', Display); }
            catch (err) { }
          }
          location.reload();
        } else {
          if (String.fromCharCode(KeyPressedCode) == '/') {  // Pause | Resume background sequencing.
            if (BGframeInc>0) { BGframeInc=0; } else { BGframeInc=1; }
            MasterTimer = setTimeout('DoUpd()',MasterDur);
          } else {  // Next frame in current slideshow.
            if (String.fromCharCode(KeyPressedCode) == '+') {
              BGframeInc=1;  BGtimer = -1;
              UpdBG();
              MasterTimer = setTimeout('DoUpd()',MasterDur);
            } else {  // Quick jump to specified mode.
              if ( (String.fromCharCode(KeyPressedCode) >= '1') && (String.fromCharCode(KeyPressedCode) <= BGdata.length.toString()) ) {
                BGcurr = KeyPressedCode - '1'.charCodeAt(0);
                if (haslocalstorage()) {
                  try { localStorage.setItem('BGcurr', BGcurr.toString()); }
                  catch (err) { }
                }
                ShowIntro = 0;  IntroTimer = -1;
                DoReLoad();
              } else {
                if ( (KeyPressedCode == 10) || (KeyPressedCode == 13) ) {  // ENTER speaks forecast.
                  MasterTimer = setTimeout('DoUpd()',MasterDur);
                  SpeakForecast(0);
                } else {  // Any other key refreshes.
                  DoReLoad();
                }
              }
            }
          }
        }
      }
    }
  }
}

function TechReadout () {
  alert("Display: "+WinWidPhys.toString()+'x'+WinHgtPhys.toString()+"\n"+"Active: "+WinWid.toString()+'x'+WinHgt.toString()+"\n"+"Loaded: "+BootedCurr+"\n"+"Installed: "+BootedFirst);
}

function SetupWindow () {
  if (Display.indexOf('TAO')>=0) {  // TaoTaole brand is 800*480 native, downsized from 1280x720 source (Android fractional HDMI), cropped and shifted here to fit physical screen space.
    WinWid = 1240;  WinHgt = 550;  
    document.getElementById('DivWhole').style.top = '40px';
    document.getElementById('DivWhole').style.left = '0px';
    WeatherURLeff = "";  // Forced "kiosk" mode, no offsite links.
    RadarURLeff = "";  // Forced "kiosk" mode, no offsite links.
  } else {
    WinWid = WinWidPhys;  WinHgt = WinHgtPhys;
    document.getElementById('DivWhole').style.top = '0px';
    document.getElementById('DivWhole').style.left = '0px';
    WeatherURLeff = WeatherURL;
    RadarURLeff = RadarURL;
  }
  document.getElementById('DivWhole').style.width = WinWid.toString()+'px';
  document.getElementById('DivWhole').style.height = WinHgt.toString()+'px';
  WinMin = Math.min(WinWid,WinHgt);
  WinMax = Math.max(WinWid,WinHgt);
  RadarWid = Math.floor(WinWid*0.3);
  RadarHgt = Math.floor(WinHgt*0.6);
  AnalogSetup();
}

// Boot things happen only once after page load.
function DoBoot () {
  FetchUptimes();
  WinWidPhys = window.innerWidth && document.documentElement.clientWidth ? Math.min(window.innerWidth, document.documentElement.clientWidth) : window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth;
  WinHgtPhys = window.innerHeight && document.documentElement.clientHeight ? Math.min(window.innerHeight, document.documentElement.clientHeight) : window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;
  if (haslocalstorage()) {
    try {
      var BGcurrArg = localStorage.getItem('BGcurr');  if ( (BGcurrArg.length<1) || (BGcurrArg.length>2) ) { BGcurrArg = ''; }
      if (BGcurrArg.length > 0) {
        var BGcurrTmp = parseInt(BGcurrArg);
        if ( (BGcurrTmp >= 0) && (BGcurrTmp < BGdata.length) ) { BGcurr = BGcurrTmp; ShowIntro = 0; IntroTimer = -1; }
      } else { }
    } catch (err) { }
    try {
      Display = localStorage.getItem('Display');
      if (Display==null) { Display = ""; } else { ShowIntro = 0; IntroTimer = -1; }
    } catch (err) {
      Display = "";
    }
  }
  if (location.href.toUpperCase().indexOf('AAXA')>0) { Display = "AAXA"; }  // AAXA brand, 960x540 native, 25 lumen. http://amazon.com/gp/product/B005TAXDPK
  if (location.href.toUpperCase().indexOf('TAO')>0) { Display = "TAO"; }   // TaoTaole brand, 800*480 native, 800 lumen, 800:1. http://amazon.com/gp/product/B00VJ3JVK2
  if (haslocalstorage()) {
    try { localStorage.setItem('Display', Display); }
    catch (err) { }
  }
  // Optionally set BG from URL using parameter like ?n=<code>
  for (var ArgLp=0; ArgLp<BGdata.length; ArgLp++) {
    if (location.href.indexOf(BGdata[ArgLp].BGcode)>=0) {
      BGcurr = ArgLp;  ShowIntro = 0;  IntroTimer = -1;
      if (haslocalstorage()) {
        try { localStorage.setItem('BGcurr', BGcurr.toString()); }
        catch (err) {
        }
      }
    }
  }
  if (IsIOS()) {
    WinWidPhys = screen.width;
    WinHgtPhys = screen.height;
  }
  SetupWindow();  
  DoReLoad();
}

function DoInit () {
  if (STtimer!=null) { clearTimeout(STtimer); }
  if (MasterTimer!=null) { clearTimeout(MasterTimer); }
  MasterTimer = null;
  BGframe = 0;  BGframePrev = BGframe;  BGframeInc = 1;  BGtimer = -1;
  ClockColor = ClockDay;  ClockColorPrev = '';  ClockColorOpp = ClockNight;
  ClockCursor = '';  ClockBlink = 0;  ClockDur = MasterDur;  ClockTimer = 0;
  HourPrev = -1;  HourCurr = -1;  MinutePrev = -1;  MinuteCurr = -1;
  RadarIdx = -1;  RadarTimer = -1;
  WeatherCurrentSpoken = "";
  WeatherForecastSpoken = [];
}

function DoReLoad() {
  DoInit();
  AllDivsOff();
  DoSetup();
}

</script>
</head>

<body onLoad="DoBoot();" style="margin-top:0px; margin-left:0px; margin-bottom:0px; margin-right:0px;" bgColor='#000000'; onKeypress='CheckKeypress(event);'>

<div id="DivWhole" style="z-index:0; position:relative; width:100%; height:100%; overflow:hidden;">

<div id="DivBG" style="z-index:1; position:absolute; left:0px; top:0px;"><img src="" id="ImgBG" width=0 height=0 style="margin-top:0px; margin-left:0px;" border=0></div>

<div id="DivAnalog" style="z-index:2; position:absolute; left:0px; top:0px; visibility:hidden;"><canvas id="AnalogClock" onClick="DoReLoad();"> </canvas></div>

<div id="DivRadar" style="z-index:3; position:absolute; left:0px; top:0px;"></div>
<div id="DivMoonImg" style="z-index:4; position:absolute; left:0px; top:-34px;"></div>
<div id="DivSunTimes" style="z-index:5; position:absolute; left:0px; top:0px; text-align:right;"></div>

<div id="DivWeatherForecast" style="z-index:7; position:absolute; left:0px; top:0px;"></div>
<div id="DivWeatherCurrent" style="z-index:8; position:absolute; left:0px; top:0px; text-align:right;"></div>

<div id="DivBGdesc" style="z-index:9; position:absolute; left:0px; top:0px;"></div>

<div id="DivTime" style="z-index:10; position:absolute; left:1px; top:-10px; text-align:right;"><span id="SpanTime"></span></div>

<div id="DivDate" style="z-index:11; position:absolute; left:1px; top:0px; text-align:center;"><span id="SpanDate"></span></div>

<div id="DivAbout" style="z-index:12; position:absolute; left:0px; top:0px; visibility:hidden;"><span id="SpanAbout" onClick="IntroTimer=IntroDur;" style="font-family:Arial; color:#4040FF; text-decoration:none; font-size:36px; text-shadow:-0.03em 0.03em 0em #9A008D; -webkit-font-smoothing:antialiased;"><b>?</b></span></div>

<div id="DivIntro" style="z-index:13; position:absolute; left:0px; top:0px; visibility:hidden; background-color:#FFFFFF; padding-left:16px; padding-top:16px; padding-right:16px; padding-bottom:16px; font-family:Arial; color:#000000; font-size:12pt; border-style:solid; border-width:8px; border-color:#FF0000; display:inline-block;" onClick="IntroTimer=0;document.getElementById('DivIntro').style.visibility='hidden';"></div>

</div>

<script language="JavaScript">
// SunCalc.js - (c) 2011-2014, Vladimir Agafonkin * SunCalc is a JavaScript library for calculating sun/mooon position and light phases. * https://github.com/mourner/suncalc
(function () { 'use strict';
// shortcuts for easier to read formulas
var PI   = Math.PI,
    sin  = Math.sin,
    cos  = Math.cos,
    tan  = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad  = PI / 180;
// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas
// date/time constants and conversions
var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;
function toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }
function fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }
function toDays(date)   { return toJulian(date) - J2000; }
// general calculations for position
var e = rad * 23.4397; // obliquity of the Earth
function rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }
function declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }
function azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }
function altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }
function siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }
// general sun calculations
function solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }
function eclipticLongitude(M) {
    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center
        P = rad * 102.9372; // perihelion of the Earth
    return M + C + P + PI;
}
function sunCoords(d) {
    var M = solarMeanAnomaly(d),
        L = eclipticLongitude(M);
    return {
        dec: declination(L, 0),
        ra: rightAscension(L, 0)
    };
}
var SunCalc = {};
// calculates sun position for a given date and latitude/longitude
SunCalc.getPosition = function (date, lat, lng) {
    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),
        c  = sunCoords(d),
        H  = siderealTime(d, lw) - c.ra;
    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: altitude(H, phi, c.dec)
    };
};
var times = SunCalc.times = [  // sun times configuration (angle, morning name, evening name)
    [-0.833, 'sunrise',       'sunset'      ],
    [  -0.3, 'sunriseEnd',    'sunsetStart' ],
    [    -6, 'dawn',          'dusk'        ],
    [   -12, 'nauticalDawn',  'nauticalDusk'],
    [   -18, 'nightEnd',      'night'       ],
    [     6, 'goldenHourEnd', 'goldenHour'  ]
];
SunCalc.addTime = function (angle, riseName, setName) {  // adds a custom time to the times config
    times.push([angle, riseName, setName]);
};
// calculations for sun times
var J0 = 0.0009;
function julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }
function approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }
function solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }
function hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }
function getSetJ(h, lw, phi, dec, n, M, L) {  // returns set time for the given sun altitude
    var w = hourAngle(h, phi, dec),
        a = approxTransit(w, lw, n);
    return solarTransitJ(a, M, L);
}
SunCalc.getTimes = function (date, lat, lng) {  // calculates sun times for a given date and latitude/longitude
    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),
        n = julianCycle(d, lw),
        ds = approxTransit(0, lw, n),
        M = solarMeanAnomaly(ds),
        L = eclipticLongitude(M),
        dec = declination(L, 0),
        Jnoon = solarTransitJ(ds, M, L),
        i, len, time, Jset, Jrise;
    var result = {
        solarNoon: fromJulian(Jnoon),
        nadir: fromJulian(Jnoon - 0.5)
    };
    for (i = 0, len = times.length; i < len; i += 1) {
        time = times[i];
        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);
        Jrise = Jnoon - (Jset - Jnoon);
        result[time[1]] = fromJulian(Jrise);
        result[time[2]] = fromJulian(Jset);
    }
    return result;
};
// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas
function moonCoords(d) { // geocentric ecliptic coordinates of the moon
    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
        M = rad * (134.963 + 13.064993 * d), // mean anomaly
        F = rad * (93.272 + 13.229350 * d),  // mean distance
        l  = L + rad * 6.289 * sin(M), // longitude
        b  = rad * 5.128 * sin(F),     // latitude
        dt = 385001 - 20905 * cos(M);  // distance to the moon in km
    return {
        ra: rightAscension(l, b),
        dec: declination(l, b),
        dist: dt
    };
}
SunCalc.getMoonPosition = function (date, lat, lng) {
    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),
        c = moonCoords(d),
        H = siderealTime(d, lw) - c.ra,
        h = altitude(H, phi, c.dec);
    // altitude correction for refraction
    h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));
    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: h,
        distance: c.dist
    };
};
// calculations for illumination parameters of the moon,
// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.
SunCalc.getMoonIllumination = function (date) {
    var d = toDays(date),
        s = sunCoords(d),
        m = moonCoords(d),
        sdist = 149598000, // distance from Earth to Sun in km
        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),
        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -
                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));
    return {
        fraction: (1 + cos(inc)) / 2,
        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,
        angle: angle
    };
};
function hoursLater(date, h) {
    return new Date(date.valueOf() + h * dayMs / 24);
}
// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article
SunCalc.getMoonTimes = function (date, lat, lng) {
    var t = new Date(date);
    t.setHours(0);
    t.setMinutes(0);
    t.setSeconds(0);
    t.setMilliseconds(0);
    var hc = 0.133 * rad,
        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,
        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;
    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)
    for (var i = 1; i <= 24; i += 2) {
        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;
        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;
        a = (h0 + h2) / 2 - h1;
        b = (h2 - h0) / 2;
        xe = -b / (2 * a);
        ye = (a * xe + b) * xe + h1;
        d = b * b - 4 * a * h1;
        roots = 0;
        if (d >= 0) {
            dx = Math.sqrt(d) / (Math.abs(a) * 2);
            x1 = xe - dx;
            x2 = xe + dx;
            if (Math.abs(x1) <= 1) roots++;
            if (Math.abs(x2) <= 1) roots++;
            if (x1 < -1) x1 = x2;
        }
        if (roots === 1) {
            if (h0 < 0) rise = i + x1;
            else set = i + x1;
        } else if (roots === 2) {
            rise = i + (ye < 0 ? x2 : x1);
            set = i + (ye < 0 ? x1 : x2);
        }
        if (rise && set) break;
        h0 = h2;
    }
    var result = {};
    if (rise) result.rise = hoursLater(t, rise);
    if (set) result.set = hoursLater(t, set);
    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;
    return result;
};
// export as AMD module / Node module / browser variable
if (typeof define === 'function' && define.amd) define(SunCalc);
else if (typeof module !== 'undefined') module.exports = SunCalc;
else window.SunCalc = SunCalc;
}());
</script>

</body>
</html>

