<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>InfoWall</title>
<meta charset="UTF-8">
<meta name="description" content="InfoWall : At-a-glance time, date, weather, webcams, more.">
<meta name="keywords" content="InfoWall time date weather webcams backgrounds forecast iwall">
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=1" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
<meta property="og:title" content="InfoWall">
<meta property="og:description" content="InfoWall : At-a-glance time, date, weather, webcams, more.">
<meta property="og:image" content="https://bedno.com/g/infowall/infowall.jpg">
<meta property="og:url" content="https://bedno.com/infowall">
<meta property="og:site_name" content="Bedno.com">

<script>
var About = 'InfoWall : At-a-glance time, date, weather, webcams, more.<br><br>' +
            'Works best in landscape orientation.  Click Forecast to speak it.  Click Date for next slideshow.  Click Time for next background.<br>' +
            '<span style="font-size:10pt;">Works best in Chrome (F11 for Full Screen) and Safari.</span><br><br>' +
            '<a href="https://Bedno.com/infowall/about" target="About">More info...</a> &nbsp;&nbsp;&nbsp; ' +
            '<a href="http://AndrewBedno.com" target="AndrewBedno">AndrewBedno.com</a> &nbsp;&nbsp;&nbsp; ' +
            '<span onClick="TechReadout();" title="Click for technical details." style="font-size:14pt; color:#C0C0C0;">&#128295;</span>';  // Wrench icon.
// Demonstrates many advanced Javascript techniques:
//    Responsive auto-formatting.  Text to speech.  Canvas element and drawing.  Analog clock.
//    Nation Weather Service API use, aynschronous fetch and parse.
//    Querystring checking.  Read/write localstorage.
//    Catch/try feature detection.    Keypress handling.  Asynchronous and timer based updating.
//    Sun/Moon calculations.  No dependencies.
//    Mirrored at http://GitHub.com/Bedno/infowall

// === CONFIGURABLES ===

// CONFIGURE weather conditions and forecast fetch below.
var InfoLat = 45.49067;  var InfoLon = -122.629134;  // Geocoordinates of this installation.  45.49067,-122.629134=PDX, 41.94637,-87.64519=ORD

// THESE THREE URLS must be periodically reconfirmed as they may periodically change.  Hardcoded here to minimize the required multi-stage API queries.
// Requires converting Lat/Lon to weather system "grid" and "station" info, giving forecast and observation URLS, which contain json used here.
// Use accompanyinging nwslookup.php program to generate fresh values.
var WeatherCurrentURL = 'https://api.weather.gov/stations/KPDX/observations';
var WeatherForecastURL = 'https://api.weather.gov/gridpoints/PQR/114,102/forecast';
var WeatherRadarStation = 'KRTX';
var WeatherURL = 'https://www.weather.gov/pqr';
// CONFIGURE user agent sent to NWS.  CHANGE THIS TO YOURS (and configure the meta tags in the html header) if developing derivative code.
var USER_AGENT = "Bedno.com/infowall andrew@bedno.com";

// CONFIGURE base URL of images folder (incl trailing /)
var ImgURL = 'g/';

// End of key configurables.

// Weather vars.
var RadarURLsrc = 'https://radar.weather.gov/ridge/standard/'+WeatherRadarStation+'_loop.gif'
var WeatherCurrent = '';  // Displayed text for current conditions.
var WeatherCurrentSpoken = "";  // Spoken text for current conditions.
var WeatherCurrentStat = "";
var WeatherForecast = '';  // Displayed text for weather forecast.
var WeatherForecastSpoken = '';  // Spoken text for weather forecast.
var WeatherForecastStat = "";
var WeatherForecastTimer = 0;
var WeatherCurrentTimer = 0;
var WeatherLink = "";
var RadarLink = "";
var RadarWid, RadarHgt;

// Display colors and sizing.
var ClockColor = '#FFFFFF';  var ClockShadow = '#000000';  // Digital time colors.
var ClockColorEff = ClockColor;  var ClockShadowEff = ClockShadow;
var DateColorDay = '#E3E600';  var DateColorNight = '#0000C0';   // Day/Night color of some date parts.
var DateColor = DateColorDay;  var DateShadow = DateColorNight;  var DateColorPrev = -1;
var ClockMode = 1;  // 0 = rainbow, 1 = pulsing/throbbing/breathing
var ClockRainbowShadows = new Array('C0F5F9','D2FCEE','E3FEE0','F1FBCF','FBF4C3','FFFFFF', 'FFFFFF', 'FEE5A9','FDD599','F6C28C','EAAF84','DA9E81','C89083','B6868B','A48198','9482A8','8988BA','8293CD','81A2DF','85B4ED');
var ClockRainbowOpacity = new Array(     0.4,     0.5,     0.6,     0.8,     0.9,       1,        1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1,       1);
var ClockUpdDur = ( (ClockMode==0) ? Math.floor(1000/ClockRainbowShadows.length) : 100 );
var ForecastColor = '#FFFFFF';  // Forecast text color.
var WeatherForecastDur = 19*(60*1000);  // Update forecast every N minutes to minimize API calls.
var WeatherCurrentDur = 10*(60*1000);  // Update current every N minutes to minimize API calls.
var WeatherShadow = " text-shadow:-2px 2px 0px #000000;"
var MoonDiam = 1/6;  // Relative size of the displayed moon.
const DateHgtDefault = 0.20;
var DateHgt = DateHgtDefault;
const WeatherCurrentHgtDefault = 0.11;
const WeatherForecastHgtDefault = 0.06;
var WeatherCurrentHgt = WeatherCurrentHgtDefault;
var WeatherForecastHgt = WeatherForecastHgtDefault;
var FloodDur = 250; // Cycle time between flood color changes.
var KeysPressed = '';

// BACKGROUNDS and STYLING
var BGdata = [  // BGcode=Matched in URL.  BGshow= [A]nalog [C]lock [D]ate [F]orecast [I]ntro [M]oon [R]adar [S]huffle [T]itle [W]eather [V]ocal
  { BGcode:"webcams", BGshow:"CDFIMTW", BGslides: [  // BGlink=url for more info.  BGsrc=img src URL, 600-1200px wide, no extended chars.  BGdesc=Displayed name.  BGdur=milliseconds.  BGzoom=magnification (auto-centers).  BGsubdur=timer for autoinc slide.  BGsub=last subframe for autoinc slide.  BGopts=flags: R=swap clock colors for readability
    { BGdesc:"Sellwood Bridge", BGlink:"https://www.windy.com/-Webcams/United-States/Oregon/Portland/Sellwood-Bridge-Willamette-River/webcams/1489447936?45.476,-135.835,5", BGsrc:"https://images-webcams.windy.com/36/1489447936/current/full/1489447936.jpg?{unqdec}", BGdur:5000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGdesc:"Tilikum Crossing", BGlink:"https://www.see.cam/us/or/portland/portland-1639956971", BGsrc:"https://images-webcams.windy.com/71/1639956971/current/full/1639956971.jpg?{unqdec}", BGdur:5000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGdesc:"East Portland", BGlink:"https://www.see.cam/us/or/portland/portland-east-1640802883", BGsrc:"https://images-webcams.windy.com/83/1640802883/current/full/1640802883.jpg?{unqdec}", BGdur:5000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGdesc:"OSU Corvallis", BGlink:"https://webcam.oregonstate.edu/", BGsrc:"https://webcam.oregonstate.edu/cam/mu/live/live.jpg?{unqdec}", BGdur:5000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    // { BGdesc:"SE Powell at 39th", BGsrc:"https://tripcheck.com/RoadCams/cams/camsLDI/US26%20at%20SE%2039th_pid3257.JPG?rand=?{unqdec}", BGlink:"https://tripcheck.com/", BGdur:5000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    // { BGdesc:"Cannon Beach", BGlink:"https://camguide.net/usa/oregon/portland/cannon/", BGsrc:"https://www.cbccmedia.org/BeachFrontCam/image.jpg?{unqdec}", BGdur:5000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGdesc:"Satellite", BGlink:"http://www.ssec.wisc.edu/data/us_comp", BGsrc:"http://www.ssec.wisc.edu/data/us_comp/image0.jpg?{unqdec}", BGdur:375, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
      { BGdesc:"Satellite", BGlink:"http://www.ssec.wisc.edu/data/us_comp", BGsrc:"http://www.ssec.wisc.edu/data/us_comp/image1.jpg?{unqdec}", BGdur:375, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
      { BGdesc:"Satellite", BGlink:"http://www.ssec.wisc.edu/data/us_comp", BGsrc:"http://www.ssec.wisc.edu/data/us_comp/image2.jpg?{unqdec}", BGdur:375, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
      { BGdesc:"Satellite", BGlink:"http://www.ssec.wisc.edu/data/us_comp", BGsrc:"http://www.ssec.wisc.edu/data/us_comp/image3.jpg?{unqdec}", BGdur:375, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
      { BGdesc:"Satellite", BGlink:"http://www.ssec.wisc.edu/data/us_comp", BGsrc:"http://www.ssec.wisc.edu/data/us_comp/image4.jpg?{unqdec}", BGdur:375, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
      { BGdesc:"Satellite", BGlink:"http://www.ssec.wisc.edu/data/us_comp", BGsrc:"http://www.ssec.wisc.edu/data/us_comp/image5.jpg?{unqdec}", BGdur:375, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
      { BGdesc:"Satellite", BGlink:"http://www.ssec.wisc.edu/data/us_comp", BGsrc:"http://www.ssec.wisc.edu/data/us_comp/image6.jpg?{unqdec}", BGdur:1000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGdesc:"Radar", BGsrc:RadarURLsrc+"?{unqdec}", BGlink:"https://www.weather.gov/lot/", BGdur:4000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" } ] },
  { BGcode:"art", BGshow:"ADISTW", BGslides: [
    { BGlink:"", BGsrc:"{imgurl}art/Altdorfer-The_Battle_of_Alexander_the_Great-1529.jpg", BGdesc:"Altdorfer: The Battle of Alexander the Great (1529)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Bosch-The_Last_Judgement-1505.jpg", BGdesc:"Bosch: The Last Judgement (1505)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Botticelli-Allegoria_della_Primavera-1478.jpg", BGdesc:"Botticelli: Allegoria della Primavera (1478)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Botticelli-Nascita_di_Venere-1485.jpg", BGdesc:"Botticelli: Nascita di Venere (1485)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Bruegel-Babel_Tower-1563.jpg", BGdesc:"Bruegel: Babel Tower (1563)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Bruegel-Dutch_Proverbs-1559.jpg", BGdesc:"Bruegel: Dutch Proverbs (1559)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Bruegel-Massacre_of_the_Innocents-1567.jpg", BGdesc:"Bruegel: Massacre of the Innocents (1567)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Bruegel-Procession_to_Calvary-1564.jpg", BGdesc:"Bruegel: Procession to Calvary (1564)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Bruegel-The_Battle_Between_Carnival_and_Lent-1559.jpg", BGdesc:"Bruegel: The Battle Between Carnival and Lent (1559)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Bruegel-Triumph_of_Death-1562.jpg", BGdesc:"Bruegel: Triumph of Death (1562)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Caravaggio-Davide_Galea-1607.jpg", BGdesc:"Caravaggio: Davide/ Galea (1607)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Chagall-I_and_the_Village-1911.jpg", BGdesc:"Chagall: I and the Village (1911)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Cranach-Flugelaltar_mit_dem_Jungsten_Gericht-1524.jpg", BGdesc:"Cranach: Flugelaltar mit dem Jungsten Gericht (1524)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Cranach-Johan_Friedun-1544.jpg", BGdesc:"Cranach: Johan Friedun (1544)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Dali-LEnigme_du_Desire-1929.jpg", BGdesc:"Dali: L'Enigme du Desire (1929)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Dali-Metamorphose_de_Narcisse-1937.jpg", BGdesc:"Dali: Metamorphose de Narcisse (1937)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Dali-Persistence_of_Memory-1931.jpg", BGdesc:"Dali: Persistence of Memory (1931)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Dali-Soft_Construction_with_Boiled_Beans-1936.jpg", BGdesc:"Dali: Soft Construction with Boiled Beans (1936)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Ernst-Europe_After_the_Rain_II-1942.jpg", BGdesc:"Ernst: Europe After the Rain II (1942)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Ernst-La_Ville_Entiere-1936.jpg", BGdesc:"Ernst: La Ville Entiere (1936)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Greco-Lacoonte-1610.jpg", BGdesc:"Greco: Lacoonte (1610)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Greco-Toledo-1599.jpg", BGdesc:"Greco: Toledo (1599)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Holbein-Ambassadors-1533.jpg", BGdesc:"Holbein: Ambassadors (1533)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Holbein-Georg_Gisze-1532.jpg", BGdesc:"Holbein: Georg Gisze (1532)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Holbein-Nikolaus_Kratzer-1528.jpg", BGdesc:"Holbein: Nikolaus Kratzer (1528)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klee-Ad_Marginen-1930.jpg", BGdesc:"Klee: Ad Marginen (1930)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klimt-Adele_Blochbauer-1907.jpg", BGdesc:"Klimt: Adele Blochbauer (1907)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klimt-Avenue_Schloss_Kaven-1912.jpg", BGdesc:"Klimt: Avenue Schloss Kaven (1912)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klimt-Beethovenfries-1902.jpg", BGdesc:"Klimt: Beethovenfries (1902)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klimt-Fritza_Riedler-1906.jpg", BGdesc:"Klimt: Fritza Riedler (1906)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klimt-Judith_I-1901.jpg", BGdesc:"Klimt: Judith I (1901)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klimt-Melo-1912.jpg", BGdesc:"Klimt: Melo (1912)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klimt-The_Kiss-1908.jpg", BGdesc:"Klimt: The Kiss (1908)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Klimt-The_Virgin-1913.jpg", BGdesc:"Klimt: The Virgin (1913)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Leonardo-Gioconda_Mona_Lisa-1505.jpg", BGdesc:"Leonardo: Gioconda/ Mona Lisa (1505)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Leonardo-Il_Cenacolo_The_Last_Supper-1497.jpg", BGdesc:"Leonardo: Il Cenacolo/ The Last Supper (1497)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Magritte-Condition_Humain-1934.jpg", BGdesc:"Magritte: Condition Humain (1934)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Magritte-Specchio_Falso-1928.jpg", BGdesc:"Magritte: Specchio Falso (1928)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Millet-Harvesters_Resting-1853.jpg", BGdesc:"Millet: Harvesters Resting (1853)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Monet-Nimphee-1926.jpg", BGdesc:"Monet: Nimphee (1926)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Monet-The_Grainstack-1896.jpg", BGdesc:"Monet: The Grainstack (1896)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Raffaello-Sposalizio_della_Vergine-1504.jpg", BGdesc:"Raffaello: Sposalizio della Vergine (1504)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Raffaello-Trasfigurazione-1519.jpg", BGdesc:"Raffaello: Trasfigurazione (1519)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Rembrandt-Anatomy_Lesson_of_Dr_Nicolaes_Tulp-1632.jpg", BGdesc:"Rembrandt: Anatomy Lesson of Dr Nicolaes Tulp (1632)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Rembrandt-Belshazzars_Feast-1635.jpg", BGdesc:"Rembrandt: Belshazzar's Feast (1635)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Rembrandt-Militia_Company-1642.jpg", BGdesc:"Rembrandt: Militia Company (1642)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Renoir-Bal_du_Moulin_de_la_Galette-1876.jpg", BGdesc:"Renoir: Bal du Moulin de la Galette (1876)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Renoir-Le_Dejeuner_des_Canotiers-1881.jpg", BGdesc:"Renoir: Le Dejeuner des Canotiers (1881)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Rousseau-Carnival_Evening-1886.jpg", BGdesc:"Rousseau: Carnival Evening (1886)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Rousseau-Sleeping_Gypsy-1897.jpg", BGdesc:"Rousseau: Sleeping Gypsy (1897)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Rubens-Feast_of_Venus_Vennsfest-1637.jpg", BGdesc:"Rubens: Feast of Venus/ Vennsfest (1637)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Schiele-Death_and_the_Maiden-1915.jpg", BGdesc:"Schiele: Death and the Maiden (1915)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Schiele-Family-1917.jpg", BGdesc:"Schiele: Family (1917)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Seurat-La_Grande_Jatte-1886.jpg", BGdesc:"Seurat: La Grande Jatte (1886)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Seurat-La_Parade_du_Cirque-1888.jpg", BGdesc:"Seurat: La Parade du Cirque (1888)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Tansey-Mont_Sainte_Victoire-1987.jpg", BGdesc:"Tansey: Mont Sainte-Victoire (1987)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Uccello-Battaglia_di_San_Romano_Part_I-1456.jpg", BGdesc:"Uccello: Battaglia di San Romano/Part I (1456)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Van_Eyck-Giovanni_Arnolfini_and_his_Wife-1434.jpg", BGdesc:"Van Eyck: Giovanni Arnolfini and his Wife (1434)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Van_Eyck-The_Virgin_of_Ivers-1435.jpg", BGdesc:"Van Eyck: The Virgin of Ivers (1435)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Van_Gogh-Cypresses-1889.jpg", BGdesc:"Van Gogh: Cypresses (1889)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Van_Gogh-Potato_Eaters-1885.jpg", BGdesc:"Van Gogh: Potato Eaters (1885)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Van_Gogh-Starry_Night-1889.jpg", BGdesc:"Van Gogh: Starry Night (1889)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Velasquez-Las_Meninas-1656.jpg", BGdesc:"Velasquez: Las Meninas (1656)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Vermeer-Malkunst-1666.jpg", BGdesc:"Vermeer: Malkunst (1666)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Vermeer-The_Astronomer-1668.jpg", BGdesc:"Vermeer: The Astronomer (1668)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}art/Veronese-Nozze_di_Cana-1563.jpg", BGdesc:"Veronese: Nozze di Cana (1563)", BGdur:30000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" } ] },
  { BGcode:"movie", BGshow:"ADFITW", BGslides: [
    { BGsrc:"{imgurl}v/beach/beach-000.jpg", BGlink:"", BGdesc:"", BGdur:500, BGzoom:1, BGsub:33, BGauth:"", BGopts:"" },
    { BGsrc:"{imgurl}v/candles/candles-000.jpg", BGlink:"", BGdesc:"", BGdur:500, BGzoom:1, BGsub:29, BGauth:"", BGopts:"" },
    { BGsrc:"{imgurl}v/clouds/clouds-000.jpg", BGlink:"", BGdesc:"", BGdur:500, BGzoom:1, BGsub:21, BGauth:"", BGopts:"" },
    { BGsrc:"{imgurl}v/fire/fire-000.jpg", BGlink:"", BGdesc:"", BGdur:500, BGzoom:1, BGsub:51, BGauth:"", BGopts:"" },
    { BGsrc:"{imgurl}v/fish/fish-000.jpg", BGlink:"", BGdesc:"", BGdur:750, BGzoom:1, BGsub:65, BGauth:"", BGopts:"" },
    { BGsrc:"{imgurl}v/snow/snow-000.jpg", BGlink:"", BGdesc:"", BGdur:500, BGzoom:1, BGsub:80, BGauth:"", BGopts:"" },
    { BGsrc:"{imgurl}v/sun/sun-000.jpg", BGlink:"", BGdesc:"", BGdur:1000, BGzoom:1, BGsub:80, BGauth:"", BGopts:"" },
    { BGsrc:"{imgurl}v/waterfall/waterfall-000.jpg", BGlink:"", BGdesc:"", BGdur:500, BGzoom:1, BGsub:37, BGauth:"", BGopts:"" } ] },
  { BGcode:"yoga", BGshow:"IT", BGslides: [
    { BGlink:"", BGsrc:"{imgurl}yoga/01.jpg", BGdesc:"Namaste", BGdur:6200, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/02.jpg", BGdesc:"Mountain", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/03.jpg", BGdesc:"Forward Fold", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/04.jpg", BGdesc:"Left Leg Lunge", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/05.jpg", BGdesc:"Plank", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/06.jpg", BGdesc:"8 Point", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/07.jpg", BGdesc:"Cobra", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/08.jpg", BGdesc:"Downward Dog", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/09.jpg", BGdesc:"Right Leg Lunge", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/10.jpg", BGdesc:"Forward Fold", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/11.jpg", BGdesc:"Mountain", BGdur:4800, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGlink:"", BGsrc:"{imgurl}yoga/12.jpg", BGdesc:"Namaste", BGdur:2000, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" } ] },
  { BGcode:"colors", BGshow:"", BGslides: [
    { BGsrc:"#303030", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#505050", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#707070", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#909090", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#B0B0B0", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#D0D0D0", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#FFFFFF", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#000030", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#000050", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#000070", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#000090", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#0000B0", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#0000D0", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#0000FF", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#003000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#005000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#007000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#009000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#00B000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#00D000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#00FF00", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#300000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#500000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#700000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#900000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#B00000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#D00000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" },
    { BGsrc:"#FF0000", BGlink:"", BGdesc:"", BGdur:FloodDur, BGzoom:1, BGsub:0, BGauth:"", BGopts:"" } ] } ];

// Major variables, timing, screen setup.
var MasterDur = 100;  // Master update frequency.  All timers and durations are in milliseconds.  500=half second.
var MasterTimer = null;
var WinWidPhys, WinHgtPhys, WinWid, WinHgt, WinMin, WinMax;  var WinPortrait = true;  var WinSquare = false;
var MarginTop = 0;  var MarginLeft = 0;  var MarginBottom = 0;  var MarginRight = 0;
var OfsX = 0;  var OfsY = 0;  // Randomized slight offsets to reduce screen burn-in.
var BGcurr = 0;  var BGcurrChk = 0;  var BGflooded = 0;
var BGpausedAt = -1;  // >=0 indicates paused, dark screen, all timers off.  Stores BG at which to resume when unpaused.
var BGshowCurr = "";  var BGshowOverride = 0;  var BGdurMult = 0;  var BGdurMultStr = '';  var BGshowArg = '';
var BGshowArr = new Array('','CI', 'CDI', 'CDIW', 'CDFIMRW', 'AI','ADI','ADWI');  // [A]nalog [C]lock [D]ate [F]orecast [I]ntro [M]oon [R]adar [W]eather
var BGoptsCurr = "";
var ShowIntro = 1;
var BGslide = 0;  var BGslidePrev = BGslide;  var BGslidePrevs = new Array(-1,-1,-1);
var BGslideInc = 1;  var BGtimer = -1;  var BGslideIncPrev = BGslideInc;
var BGframe = 0;

// Sun, moon, date related.
var SunRise = '';  var SunSet = '';  var SunTimeSizing = 0.04;
var ClockUpdTimer = 0;  var AnalogClockUpdDur = 250;
var ClockRainbowShadowSeq = 0;  var ClockOpacity = "";  
var ClockCanvas, ClockContext;
var ClockCanvasBG, ClockContextBG;
var HourPrev = -1;  var HourCurr = -1;
var MinutePrev = -1;  var MinuteCurr = -1;
var SecondPrev = -1;  var SecondCurr = -1;
var AbrvMon = new Array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
var AbrvDoW = new Array('Su', 'Mo','Tu','We','Th','Fr', 'Sa');
var FullMon = new Array('January','February','March','April','May','June','July','August','September','October','November','December');
var FullDoW = new Array('Sunday', 'Monday','Tuesday','Wednesday','Thursday','Friday', 'Saturday');
var FullDoM = new Array('zeroth', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh', 'twelfth', 'thirteenth', 'fourteenth', 'fifteenth', 'sixteenth', 'seventeenth', 'eighteenth', 'nineteenth', 'twentieth', 'twenty first', 'twenty second', 'twenty third', 'twenty fourth', 'twenty fifth', 'twenty sixth', 'twenty seventh', 'twenty eighth', 'twenty ninth', 'thirtieth', 'thirty first', 'thirty second');
var IntroDur = 10000;  var IntroTimer = IntroDur+1;
var BootedCurr = "";  var BootedFirst = "";
var ResizeTimer = null;
var DaysSinceStarted = 0;  var DaysSinceCurrDT;  var DaysSinceSeq = 0;  var DaysSinceFreq = 7;
var DaysSinceDur = 1500;  var DaysSinceTimer = DaysSinceDur;
var DaysSinceDays = 0;  var DaysSinceWeeks = 0;  var DaysSinceMonths = 0;
var DaysSinceDaysHTML = '';  var DaysSinceWeeksHTML = '';  var DaysSinceMonthsHTML = '';
var StopwatchStarted = 0;  var StopwatchLaps = "";  var StopwatchDT;
var StopwatchDur = 1000;  var StopwatchTimer = StopwatchDur;

// Speech and alarms.
var SpeechHandle = null;  var SpeechVoices = null;  var SpeechAudio = null;  var SpeechReady = false;
var SpeechQueue = new Array();  var SpeechQueueRec = new Array();  var SpeechCode = "";  var SpeechCnt = 0;
var VoiceLp = 0;  var VoiceIdx = -1;  var VoiceScore = -1;  var VoiceTmp = -1;
var IsSpeaking = false;  var SpeechDoneTimer = null;
var AlarmsCurr = "";  var AlarmsToday = "";
var AlarmsFirst = "";  var AlarmsBooted = 0;
var AlarmDT = null;  var AlarmStr = ' ';  var AlarmDupeChkKey = "";  var AlarmDupeCnt = 0;
var CfgSrc = "";  var CfgText = '';
var CfgHandle = null;
var CfgName = "";  var CfgVal = "";
var CfgLines = '';  var CfgLine = '';  var CfgLp = 0;
var CfgVals = new Array();
var CfgKeys = new Array();
var CfgKeysCnt = 0;
var CfgStat = "";

// === UTILS ===
function IsIOS () { return((navigator.userAgent.toLowerCase().indexOf('iphone')>-1) || (navigator.userAgent.toLowerCase().indexOf('ipod')>-1) || (navigator.userAgent.toLowerCase().indexOf('ipad')>-1) || (navigator.userAgent.toLowerCase().indexOf('ios')>-1) ); }
function IsAndroid () { return((navigator.userAgent.toLowerCase().indexOf('droid')>-1)); }
function IsChrome () { return(/Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor)); }

// Remember some settings.
function haslocalstorage () { try { return 'localStorage' in window && window['localStorage'] !== null; } catch(e){ return false; } }
function DTadj () {
  var DTadjTmp = new Date();
  return(DTadjTmp.getTime());
}

// Used to force non-caching of webcam images.
function UnqSec () {
  var Udt=new Date(DTadj());
  return(''+Udt.getYear().toString()+''+Udt.getMonth().toString()+''+Udt.getDate().toString()+''+Udt.getHours().toString()+''+Udt.getMinutes().toString()+''+Udt.getSeconds().toString()+'');
}
function UnqDec () {
  var Udt=new Date(DTadj());
  var UFrac = Math.floor(Udt.getMinutes()/6);
  return(''+Udt.getYear().toString()+''+Udt.getMonth().toString()+''+Udt.getDate().toString()+''+Udt.getHours().toString()+''+UFrac.toString()+'');
}

// Load current and total runtimes only on boot.
function FetchUptimes () {
  var UTdt = new Date(DTadj());
  var UTh = UTdt.getHours();
  var UTm = UTdt.getMinutes();
  var UTs = UTdt.getSeconds();
  BootedCurr = (UTdt.getYear()+1900).toString()+'.';
  if (UTdt.getMonth()<9) { BootedCurr += '0'; }
  BootedCurr += (UTdt.getMonth()+1).toString()+'.';
  if (UTdt.getDate()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getDate().toString()+' ';
  if (UTdt.getHours()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getHours().toString()+':';
  if (UTdt.getMinutes()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getMinutes().toString()+':';
  if (UTdt.getSeconds()<10) { BootedCurr += '0'; }
  BootedCurr += UTdt.getSeconds().toString();
  if (haslocalstorage()) {
    try {
      BootedFirst = localStorage.getItem('Booted');
    } catch (err) { }
  }
  if ( (! BootedFirst) || (BootedFirst.length<8) || (BootedFirst.length>21) ) {
    BootedFirst = BootedCurr;
    if (haslocalstorage()) {
      try {
        localStorage.setItem('Booted', BootedFirst);
      } catch (err) { }
    }
  }
}

// Show tailing log if DivDebug is visible.
function DebugMsg (ADin) {
  var DDTstr;
  var DDT = new Date(DTadj());
  DDTstr = DDT.getHours().toString().padStart(2, '0')+':';
  DDTstr += DDT.getMinutes().toString().padStart(2, '0')+':';
  DDTstr += DDT.getSeconds().toString().padStart(2, '0');
  if (document.getElementById('DivDebug')) {
    if (document.getElementById('DivDebug').style.visibility=='visible') {  // Disable this condition to capture retroactive logging.
      if (document.getElementById('DivDebugText').value.length>900) {
        document.getElementById('DivDebugText').value = document.getElementById('DivDebugText').value.substr(300,document.getElementById('DivDebugText').value.length-300);
      }
      document.getElementById('DivDebugText').value += DDTstr+' '+ADin+"\n";
      document.getElementById('DivDebugText').scrollTop = document.getElementById('DivDebugText').scrollHeight;
    }
  }
}

// === SPEECH ===

// Load voices and find a British male.  Works best in Chrome.
function SpeechVoicesLoad () {
  var VoiceName = "";
  SpeechVoices = window.speechSynthesis.getVoices();
  if ( (SpeechVoices!=null) && (SpeechVoices.length>0) ) {
    VoiceIdx = -1;  VoiceScore = -1;
    for (VoiceLp = 0; VoiceLp<SpeechVoices.length; VoiceLp++) {
      VoiceTmp = -1;
      VoiceName = " "+SpeechVoices[VoiceLp].name.toLowerCase().replace(/[^a-zA-Z0-9]/,' ')+" ";
      if (SpeechVoices[VoiceLp].lang.toLowerCase().indexOf('en-')>=0) { VoiceTmp += 20000; }
      if (VoiceName.indexOf(' english male ')>=0) { VoiceTmp += 5000; }
      if (VoiceName.indexOf(' david ')>=0) { VoiceTmp += 4000; }
      if (VoiceName.indexOf(' daniel ')>=0) { VoiceTmp += 4000; }
      if (VoiceName.indexOf(' male ')>=0) { VoiceTmp += 1000; }
      if (VoiceName.indexOf(' google us ')>=0) { VoiceTmp += 500; }
      if (SpeechVoices[VoiceLp].lang.toLowerCase().indexOf('-us')>=0) { VoiceTmp += 100; }
      if (SpeechVoices[VoiceLp].lang.indexOf('-gb')>=0) { VoiceTmp += 70; }
      if (SpeechVoices[VoiceLp].lang.indexOf('-au')>=0) { VoiceTmp += 50; }
      if (SpeechVoices[VoiceLp].default) { VoiceTmp += 50; }
      if (VoiceTmp > VoiceScore) {
        VoiceIdx = VoiceLp;  VoiceScore = VoiceTmp;
      }
    }
    DebugMsg('Voices loaded.');
    if (document.getElementById('DivUnMute')) { document.getElementById('DivUnMute').style.visibility='visible'; }
    if ( (! IsIOS()) && (! IsAndroid()) ) { CfgRequest(); } else { UnMute(); }  // Load CFG after voices, since they're all spoken alarms.  Doesn't work on mobile, which requires sounds be in response to interactions.
  }
}
// Added delays for physical queue, basically debouncing for lower speech layers.
function SpeechDoneFinish () {
  if (document.getElementById('DivAbout')) { document.getElementById('DivAbout').style.backgroundColor  = ''; }
  IsSpeaking = false;
  DebugMsg('Speech finished.');
  while (SpeechQueue.length>0) SpeechQueue.shift();  
}
function SpeechDone (SDType) {
  if (SpeechDoneTimer!=null) { clearTimeout(SpeechDoneTimer); SpeechDoneTimer=null; }
  if ( (document.getElementById('DivAbout')) && (SpeechReady) ) { document.getElementById('DivAbout').style.backgroundColor  = '#666666'; }
  SpeechDoneTimer = setTimeout('SpeechDoneFinish()',2200);
  DebugMsg('Speech '+SDType+' done.');
}
// Continue processing speech queue.
function SpeechQueueNext () {
  if (SpeechQueue.length>0) {
    if (SpeechQueue[0][1].indexOf('{SOUND:')>=0) {
      SoundEffect(SpeechQueue[0][1]);
    } else {
      SpeechSpeak(SpeechQueue[0][1]);
      window.speechSynthesis.resume();
    }
    SpeechQueue.shift();
  }
}
// Handle end of utterance, start next one if any.
function SpeechUtteranceDone () {
  if (SpeechQueue.length>0) {
    if (document.getElementById('DivAbout')) { document.getElementById('DivAbout').style.backgroundColor  = '#AAAAAA'; }
    setTimeout('SpeechQueueNext()',50); // Slight pause between utterances.
  } else {
    SpeechDone("Utterance");
  }
}
// Handle playing sound effects (ogg files).  Doesn't always work.
function SoundEffectDone () {
  if (SpeechDoneTimer!=null) { clearTimeout(SpeechDoneTimer); SpeechDoneTimer=null; }
  try { SpeechAudio.remove(); } catch (err) { }
  DebugMsg('Sound done.');
  if (document.getElementById('DivAbout')) { document.getElementById('DivAbout').style.backgroundColor  = '#AAAAAA'; }
  setTimeout('SpeechQueueNext()',600); // Slight pause between next word.
  IsSpeaking = false;
}
function SoundEffect (SFXstr) {
  if (SpeechDoneTimer!=null) { clearTimeout(SpeechDoneTimer); SpeechDoneTimer=null; }
  SpeechCode = SFXstr.replace(/\n/gi,' ');
  SpeechCode = SpeechCode.replace(/^.*\{SOUND:/,"");
  SpeechCode = SpeechCode.replace(/\}.*$/,"");
  if (BGpausedAt<0) { // Not paused.
      if (SpeechCode.length>0) {
        try {
          if (SpeechDoneTimer!=null) { clearTimeout(SpeechDoneTimer); SpeechDoneTimer=null; }
          SpeechDoneTimer = setTimeout('SpeechDone("SpeakFailSafe")',10000);  // Failsafe.
          if (document.getElementById('DivAbout')) { document.getElementById('DivAbout').style.backgroundColor  = '#250ACA'; }
          IsSpeaking = true;
		  DebugMsg('Sound:'+ImgURL+'sounds/'+SpeechCode+'.ogg');
          SpeechAudio = new Audio(ImgURL+'sounds/'+SpeechCode+'.ogg');
          SpeechAudio.onended = SoundEffectDone;
          SpeechAudio.play();
        } catch (err) { SoundEffectDone(); SpeechDone("FXerr"); }
      } else { SoundEffectDone(); }
  }
}
function SpeechStillTalking () {
  if (SpeechDoneTimer!=null) { clearTimeout(SpeechDoneTimer); SpeechDoneTimer=null; }
  SpeechDoneTimer = setTimeout('SpeechDone("StillTalkingFailSafe")',7000);  // Failsafe.
}

// Dupe check to abate occassional problem of redundant alarm triggers on same event.
function SpeechQueueDupe (SQDkey, SQDmsg) {
  return(false);
  var SpeechQueueChkLp = 0;  var SpeechQueueChkFound = -1;
  var SQRkey = '';  var SQRmsg = '';  var SQRlog = "";
  SpeechQueueChkFound = -1;
  SQDmsg = SQDmsg.toLowerCase();
  SQDmsg = SQDmsg.replace(/[^a-z0-9]/gi,"");
  for (SpeechQueueChkLp=0; SpeechQueueChkLp<SpeechQueue.length; SpeechQueueChkLp++) {
    SpeechQueueRec = SpeechQueue[SpeechQueueChkLp];
    [SQRkey,SQRmsg] = SpeechQueueRec;
    SQRmsg = SQRmsg.toLowerCase();
    SQRmsg = SQRmsg.replace(/[^a-z0-9]/gi,"");
    if (SQRlog.length>0) { SQRlog += ', '; } SQRlog += ' "'+SQRkey+'"("'+SQRmsg+'")';
    if ( (SQDkey.length>0) && (SQRkey == SQDkey) ) { SpeechQueueChkFound = SpeechQueueChkLp; }
    if ( (SQDmsg.length>0) && (SQRmsg.length>0) ) { if (SQRmsg.indexOf(SQDmsg)>=0) { SpeechQueueChkFound = SpeechQueueChkLp; } }
  }
  if (SpeechQueueChkFound>=0) { AlarmDupeCnt++; SQRlog += ' found!'; }
  // DebugMsg('DupeCheck "'+SQDkey+'"("'+SQDmsg+'") vs '+SQRlog);
  return(SpeechQueueChkFound>=0);
}
// Add an utterance to the speech queue.  Fixes problem of speech failing on long utterances.
function SpeechQueueAdd (SQAkey, SQAin) {
  var SpeechQueueParts;  var SpeechQueuePartsLp = 0;
  if (SpeechReady) {
    SQAin = SQAin.replace(/\s+\./gi,'.');
    SQAin = SQAin.replace(/\.+\./gi,'.');
    SQAin = SQAin.replace(/^\.+/gi,'').replace(/\.+$/gi,'');
    SQAin = AlarmSubs(SQAin);
    if (BGpausedAt<0) { // Not paused.
      if (SpeechQueueDupe(SQAkey,SQAin)) {
        DebugMsg('Dupe whole suppressed ('+SQAkey+') "'+SQAin+'"');
      } else {
        SQAin = SQAin.replace(/(\{SOUND:[^\}]+\})/,".$1.");  // Always break (using ".") at sounds effects
        if (SQAin.indexOf('.')>=0) {
          SpeechQueueParts = SQAin.split('.');
          for (SpeechQueuePartsLp=0; SpeechQueuePartsLp<SpeechQueueParts.length; SpeechQueuePartsLp++) {
            SpeechQueuePart = SpeechQueueParts[SpeechQueuePartsLp].replace(/^\s+/gi,'').replace(/\s+$/gi,'');
            if (SpeechQueuePart.length>0) {
              if (SpeechQueueDupe('',SpeechQueuePart)) {
                DebugMsg('Dupe part suppressed ('+SQAkey+') "'+SpeechQueuePart+'"');
              } else {
                SpeechQueueRec = [SQAkey,SpeechQueuePart];
                SpeechQueue.push(SpeechQueueRec);
                DebugMsg('Queued part ('+SQAkey+') "'+SpeechQueuePart+'"');
              }
            }
          }
        } else {
          SpeechQueueRec = [SQAkey,SQAin];
          SpeechQueue.push(SpeechQueueRec);
          DebugMsg('Queued whole ('+SQAkey+') "'+SQAin+'"');
        }
      }
      if (! IsSpeaking) { SpeechQueueNext(); }
    }
  }
}
// Cancel any current speaking when screen off.
function SpeechCancel () {
  if (SpeechDoneTimer!=null) { clearTimeout(SpeechDoneTimer); SpeechDoneTimer=null; }
  while (SpeechQueue.length>0) SpeechQueue.shift();
  try { window.speechSynthesis.cancel(); } catch (err) { }
  SpeechDone("Cancel");
  document.getElementById('SpanStopwatch').innerHTML = "";
}
// Lowest level speech function.
function SpeechSpeak (SSAin) {
  if (SpeechDoneTimer!=null) { clearTimeout(SpeechDoneTimer); SpeechDoneTimer=null; }
  SSAin = SSAin.replace(/^\s+/gi,'').replace(/\s+$/gi,'');
  if (BGpausedAt<0) { // Not paused.
    if (SSAin.length>1) {
      if (SpeechReady) {
        if (IsSpeaking) {
          window.speechSynthesis.cancel();  // Cancel any existing speaking
          DebugMsg('Resetting speech.');
        }
        if (SpeechDoneTimer!=null) { clearTimeout(SpeechDoneTimer); SpeechDoneTimer=null; }
        if ( (document.getElementById('DivAbout')) && (! IsSpeaking) ) { document.getElementById('DivAbout').style.backgroundColor  = '#000000'; }
        IsSpeaking = true;
        try {
          SpeechDoneTimer = setTimeout('SpeechUtteranceDone()',7000);  // Failsafe.
          if (SpeechHandle!=null) { try { SpeechHandle.remove();  SpeechHandle=null; } catch (err) { } }
          SpeechHandle = new SpeechSynthesisUtterance();
          if (VoiceIdx >= 0) { SpeechHandle.voice = SpeechVoices[VoiceIdx]; DebugMsg('Voice # '+VoiceIdx.toString()); }
          SpeechHandle.voiceURI = 'native';
          SpeechHandle.volume = 1.0; // 0 to 1
          SpeechHandle.rate = 1.0; // 0.1 to 10
          SpeechHandle.pitch = 1.0; // 0 to 2
          // SpeechHandle.lang = 'en-US';
          SpeechHandle.text = SSAin;
          SpeechHandle.onend = SpeechUtteranceDone;
          SpeechHandle.onboundary = SpeechStillTalking;
          SpeechCnt++;
          window.speechSynthesis.speak(SpeechHandle);
          DebugMsg('Speaking "'+SSAin+'"');
        } catch (err) { SpeechDone("SpeakErr("+err.message+")"); }
      }
    }
  }
}

// === RENDERING ===

// Check if current slideshow contains any movie slides.
function HasFrames () {
  for (var AniLp=0; AniLp<BGdata[BGcurr].BGslides.length; AniLp++) {
    if (BGdata[BGcurr].BGslides[AniLp].BGsub!=0) { return(true); }
  }
  return(false)
}

// Setup required mix of visibilities.
function SetupVisibilities () {
  // BGshow= [A]nalog [C]lock [D]ate [F]orecast [M]oon [R]adar [S]huffle [W]eather
  if (document.getElementById('DivIntro')) { document.getElementById('DivIntro').style.visibility='hidden'; }
  if (document.getElementById('DivWhole')) { document.getElementById('DivWhole').style.visibility='visible'; }
  if (document.getElementById('DivIntro')) { document.getElementById('DivIntro').style.visibility='hidden'; }
  if (document.getElementById('DivBG')) {
    document.getElementById('DivBG').style.visibility='visible';
  }
  if (document.getElementById('DivBGdesc')) {
    if (BGshowCurr.indexOf('T')<0) {
      document.getElementById('DivBGdesc').style.visibility='hidden';
    } else {
      document.getElementById('DivBGdesc').style.visibility='visible';
    }
  }
  if (BGshowCurr.indexOf('C')<0) {
    document.getElementById('DivTime').style.visibility='hidden';
    document.getElementById('SpanTime').style.visibility='hidden';
  } else {
    document.getElementById('DivTime').style.visibility='visible';
    document.getElementById('SpanTime').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('A')<0) {
    document.getElementById('DivAnalogBG').style.visibility='hidden';
    document.getElementById('DivAnalog').style.visibility='hidden';
  } else {
    document.getElementById('DivAnalogBG').style.visibility='visible';
    document.getElementById('DivAnalog').style.visibility='visible';
    DrawAnalogBG();
  }
  if ( (BGshowCurr.indexOf('I')<0) || (location.href.toLowerCase().indexOf('kiosk')>=0) ) {
    document.getElementById('DivAbout').style.visibility='hidden';
  } else {
    document.getElementById('DivAbout').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('D')<0) {
    document.getElementById('DivDate').style.visibility = 'hidden';
    document.getElementById('SpanDate').style.visibility = 'hidden';
  } else {
    document.getElementById('DivDate').style.visibility = 'visible';
    document.getElementById('SpanDate').style.visibility = 'visible';
  }
  if (BGshowCurr.indexOf('W')<0) {
    document.getElementById('DivWeatherCurrent').style.visibility='hidden';
  } else {
    document.getElementById('DivWeatherCurrent').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('F')<0) {
    document.getElementById('DivWeatherForecast').style.visibility='hidden';
  } else {
    document.getElementById('DivWeatherForecast').style.visibility='visible';
  }
  if (BGshowCurr.indexOf('M')<0) {
    document.getElementById('DivMoonImg').style.visibility='hidden';
    document.getElementById('DivSunTimes').style.visibility='hidden';
  } else {
    document.getElementById('DivMoonImg').style.visibility='visible';
    document.getElementById('DivSunTimes').style.visibility='visible';
  }
  if ( (RadarURLsrc == "") || (BGshowCurr.indexOf('R')<0) ) {
    document.getElementById('DivRadar').style.visibility='hidden';
    if (document.getElementById('RadarImg')) { document.getElementById('RadarImg').style.visibility='hidden'; }
  } else {
    document.getElementById('DivRadar').style.visibility='visible';
    document.getElementById('RadarImg').style.visibility='visible';
  }
  if ( (BGshowCurr.indexOf('A')<0) && (BGshowCurr.indexOf('C')<0) && (BGshowCurr.indexOf('D')<0) ) {
    document.getElementById('DivBG').addEventListener("click", NextBG, false);
  }
  document.getElementById('DivStopwatch').style.visibility = ( (StopwatchStarted > 0) ? 'visible' : 'hidden' );
  document.getElementById('DivDaysSince').style.visibility = ( ( (StopwatchStarted < 1) && (BGshowCurr.indexOf('C')>-1) && (DaysSinceStarted > 0) ) ? 'visible' : 'hidden' );
}

// Initialize and arrange all screen elements based on options. Happens on slideshow change.
function SetupScreen () {
  var SlideCheck = '';
  SetupVisibilities();
  BGtimer = -1;
  if (HasFrames()) { // If show has animated or looped frames
    BGslide = 0;  // Recall which slide was in use.
    if (haslocalstorage()) {
      try {
        SlideCheck = ''+localStorage.getItem('slide');
      } catch (err) { }
    }
    SlideCheck = SlideCheck.replace(/\D/g, '');
    if (SlideCheck.length>0) {
      BGslide = parseInt(SlideCheck);
      if ( (BGslide<0) || (BGslide>=BGdata[BGcurr].BGslides.length) ) { BGslide = 0; }
      BGslidePrev = BGslide;
    }
    BGslideInc = 1;  // Pause slide incrementing.
  } else {  // Normally start from first slide.
    BGsubIdx = -1;
    BGslideInc = 1;
  }
  document.getElementById('DivWhole').style.backgroundColor = '#000000';
  if ( (document.getElementById('DivWeatherCurrent')) && (document.getElementById('DivWeatherCurrent').style.visibility=='visible') && (BGshowCurr.indexOf('W')>=0) ) { WeatherCurrentDisplay(); }
}

// Increment to next BG on user keypress or click.
function NextBG () {
  BGcurr = (BGcurr+1) % BGdata.length;  BGpausedAt = -1;
  if (haslocalstorage()) {
    try { localStorage.setItem('main', BGcurr.toString()); }
    catch (err) { }
  }
  BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
  ShowIntro = 0;  IntroTimer = -1;
  DoRefresh();
}

// Background update handler.  Sequences through slides.
function UpdBG () {
  var ImgSrc = '';
  var ImgNumStr = '';
  var ImgIdxStr = '';
  var BGlinkEff = "";
  if (BGtimer < MasterDur) {
    if (BGslideInc < 1) {  // If not incrementing slides, restore last index.
      BGslide = BGslidePrev;
    } else {  // If shuffling, pick semi-random slide.
      if (BGshowCurr.indexOf('S')>=0) {
        BGslidePrev = BGslide;
        do { BGslide = Math.floor(Math.random()*BGdata[BGcurr].BGslides.length); }
        while ( (BGslidePrev==BGslide) || (BGslidePrevs[0]==BGslide) || (BGslidePrevs[1]==BGslide) || (BGslidePrevs[2]==BGslide) );
        BGslidePrevs[2]=BGslidePrevs[1];  BGslidePrevs[1]=BGslidePrevs[0];  BGslidePrevs[0]=BGslide;
      }
      // Otherwise use current slide index (incremented in NextBG() function)
    }
    document.getElementById('DivBGdesc').innerHTML = '';
    if (BGdata[BGcurr].BGslides[BGslide].BGzoom==1) {
      document.getElementById('DivBG').style.top = 0;
      document.getElementById('DivBG').style.left = 0;
    } else {
      document.getElementById('DivBG').style.top = Math.floor(0.5*(WinHgt-(WinHgt*BGdata[BGcurr].BGslides[BGslide].BGzoom)));
      document.getElementById('DivBG').style.left = Math.floor(0.5*(WinWid-(WinWid*BGdata[BGcurr].BGslides[BGslide].BGzoom)));
    }
    BGoptsCurr = BGdata[BGcurr].BGslides[BGslide].BGopts
    ImgSrc = BGdata[BGcurr].BGslides[BGslide].BGsrc;
    if (BGdata[BGcurr].BGslides[BGslide].BGsub > 0) {  // Subanimate frames in slide.
      if (BGslideInc>0) {
        ImgNumStr = ImgSrc.replace(/\D/g, '');
        if (ImgNumStr.length>0) {
          if ( (BGframe < 0) || (BGframe > BGdata[BGcurr].BGslides[BGslide].BGsub) ) { BGframe = 0; }
          ImgIdxStr = BGframe.toString();
          if (ImgIdxStr.length < ImgNumStr.length) ImgIdxStr = new Array(ImgNumStr.length - ImgIdxStr.length + 1).join("0") + ImgIdxStr;
          ImgSrc = ImgSrc.replace(ImgNumStr, ImgIdxStr);
          BGframe++;
          if (BGframe > BGdata[BGcurr].BGslides[BGslide].BGsub) { BGframe = 0; }
        }
      }
    }
    if (ImgSrc.length<12) {  // Simple color flood.
      if (BGflooded < 1) {
        AllDivsOff();
        document.getElementById('DivCanvas').style.visibility='visible';
        BGflooded = 1;
      }
      document.getElementById('DivBG').style.visibility='hidden';
      DrawFloodlight(ImgSrc);
    } else {
      BGflooded = 0;
      if (ImgSrc.toLowerCase().indexOf('.htm')>=0) {  // Incomplete support for HTM/JS backgrounds.
        if (document.getElementById('DivBG').innerHTML.toLowerCase().indexOf('<iframe')<0) { document.getElementById('DivBG').innerHTML = '<iframe id="ImgBG" align="center" frameborder=0 height="'+WinHgt.toString()+'" width="'+WinWid.toString()+'" scrolling=no src="" onClick="NextBG();"></iframe>'; }
        document.getElementById('ImgBG').src = ImgSrc;
      } else {
        ImgSrc = ImgSrc.replace(/{unqsec}/,UnqSec());
        ImgSrc = ImgSrc.replace(/{unqdec}/,UnqDec());
        ImgSrc = ImgSrc.replace(/{imgurl}/,ImgURL);
        if (document.getElementById('DivBG').innerHTML.toLowerCase().indexOf('<img')<0) { document.getElementById('DivBG').innerHTML = '<img src="" id="ImgBG" width=0 height=0 style="margin-top:0px; margin-left:0px;" border=0>'; }
        document.getElementById('ImgBG').src = ImgSrc;
        document.getElementById('ImgBG').height = Math.floor(WinHgt*BGdata[BGcurr].BGslides[BGslide].BGzoom);
        document.getElementById('ImgBG').width = Math.floor(WinWid*BGdata[BGcurr].BGslides[BGslide].BGzoom);
      }
      document.getElementById('DivBG').style.visibility='visible';
    }
    BGlinkEff = BGdata[BGcurr].BGslides[BGslide].BGlink;
    if (BGlinkEff == WeatherURL) { BGlinkEff = WeatherLink; }
    if (IsIOS()) { DescSize = 8; } else { DescSize = 12; }
    if (BGdata[BGcurr].BGslides[BGslide].BGdesc) {
      if (BGlinkEff!="") {
        document.getElementById('DivBGdesc').innerHTML = '<a href="'+BGlinkEff+'" target=_blank style="font-family:Arial; color:#EEEEEE; text-decoration:none; font-size:'+DescSize.toString()+'pt; text-shadow:-2px 2px 0px #000000;" id="SpanBGdesc" alt="Click for details.">&nbsp;&nbsp;&nbsp;'+BGdata[BGcurr].BGslides[BGslide].BGdesc+BGdurMultStr+'&nbsp;</a>';
      } else {
        document.getElementById('DivBGdesc').innerHTML = '<span style="font-family:Arial; color:#EEEEEE; text-decoration:none; font-size:'+DescSize.toString()+'pt; text-shadow:-2px 2px 0px #000000;" id="SpanBGdesc">&nbsp;&nbsp;&nbsp;'+BGdata[BGcurr].BGslides[BGslide].BGdesc+BGdurMultStr+'&nbsp;</span>';
      }
      // VOCAL mode speaks the current image description.
      if ( (SpeechReady) && (BGshowCurr.indexOf('V')>=0) ) { SpeechQueueAdd(BGdata[BGcurr].BGslides[BGslide].BGdesc.substr(0,99),BGdata[BGcurr].BGslides[BGslide].BGdesc.substr(0,99)); }
    }
    if ( (RadarURLsrc != "") && (BGshowCurr.indexOf('R')>=0) ) {  // Hide embedded radar if slide is same radar
      if (ImgSrc.toUpperCase().indexOf(RadarURLsrc.toUpperCase())>=0) {
        if (document.getElementById('RadarImg')) { document.getElementById('RadarImg').style.visibility='hidden'; }
      } else {
        document.getElementById('RadarImg').style.visibility='visible';
      }
    } else {
      if (document.getElementById('RadarImg')) { document.getElementById('RadarImg').style.visibility='hidden'; }
    }
    BGtimer = BGdata[BGcurr].BGslides[BGslide].BGdur*(1+Math.round(.5*BGdurMult*10)/10);
    BGslidePrev = BGslide;
    if ( (BGslideInc>0) && (! HasFrames()) ) { BGslide = (BGslide+BGslideInc) % BGdata[BGcurr].BGslides.length; }
  } else {
    if ( (BGtimer<9999999) && (BGdata[BGcurr].BGslides[BGslide].BGsub>=0) ) { BGtimer -= MasterDur; }
  }
}

// Show the moon in current phase.
function ShowMoon () {
  SetupSun();
  var MoonTimes = SunCalc.getMoonIllumination(new Date());
  var MoonPhase = Math.floor(MoonTimes.phase*10);
  var MoonDaysToFull = 0;
  var SunMoonOut = "";
  if (MoonTimes.phase<0.5) {
    MoonDaysToFull = ''+(Math.floor((29.53/2) - (29.53*MoonTimes.phase)));
  } else {
    MoonDaysToFull = (Math.floor(29.53*(0.5-MoonTimes.phase)));
  }
  if (BGshowCurr.indexOf('M')>=0) {
    document.getElementById('DivMoonImg').style.left = OfsX+Math.floor(WinWid-(WinMin*MoonDiam)+11)+'px';
    document.getElementById('DivMoonImg').innerHTML = '<img align=top src="'+ImgURL+'moon/moon'+(MoonPhase)+'.gif" height='+(WinMin*MoonDiam)+' width='+(WinMin*MoonDiam)+' border=0>';
    document.getElementById('DivSunTimes').style.left = (OfsX)+'px';
    document.getElementById('DivSunTimes').style.top = (OfsY)+'px';
    document.getElementById('DivSunTimes').style.width = (WinWid-4)+'px';
    SunMoonOut += '<span style="line-height:'+Math.floor(WinWid*SunTimeSizing*.77)+'px;">';
    SunMoonOut += '<span style="line-height:'+Math.floor(WinWid*SunTimeSizing*1.3)+'px; font-size:'+Math.floor(WinWid*SunTimeSizing*1.2)+'px; text-decoration:bold; font-family:Arial; ';
    if (MoonDaysToFull<0) {
      SunMoonOut += 'color:#000000; text-shadow:-2px 2px 0px #FFFFFF;" alt="Days SINCE full moon.';
    } else {
      SunMoonOut += 'color:#FFFFFF; text-shadow:-2px 2px 0px #000000;" alt="Days UNTIL full moon.';
    }
    SunMoonOut += '">'+Math.abs(MoonDaysToFull).toString()+'&nbsp;&nbsp;</span><br>';
    SunMoonOut += '<span style="font-family:Arial; text-decoration:bold; background-image:linear-gradient(orange,white); color:transparent; background-clip:text; font-size:'+Math.floor(WinWid*SunTimeSizing)+'px;" alt="Sunrise time.">'+SunRise+'<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*0.5)+'px;">A</span><br></span>';
    SunMoonOut += '<span style="font-family:Arial; text-decoration:bold; background-image:linear-gradient(white,brown); color:transparent; background-clip:text; font-size:'+Math.floor(WinWid*SunTimeSizing)+'px;" alt="Sunset time.">'+SunSet+'<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*0.5)+'px;">P</span></span></span>';
    document.getElementById('DivSunTimes').innerHTML = SunMoonOut;
  }
}

// Fetch sunrise/set times and moon phase.  Set clock color.
function SetupSun () {
  var SSCurrDT = new Date(DTadj());
  var SunTimes = SunCalc.getTimes(new Date(DTadj()), InfoLat, InfoLon);
  var SunRiseAdjMS = SunTimes.sunrise.getTime();
  var SunRiseAdjDT = new Date(SunRiseAdjMS);
  if (SunRiseAdjDT.getHours()<1) {
    SunRise = '12';
  } else {
    if (SunRiseAdjDT.getHours()>12) { SunRise = ''+(SunRiseAdjDT.getHours()-12); } else { SunRise = ''+SunRiseAdjDT.getHours(); }
  }
  if (SunRiseAdjDT.getMinutes()<10) { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.5)+'">:</span>0'+SunRiseAdjDT.getMinutes(); } else { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.5)+'">:</span>'+SunRiseAdjDT.getMinutes(); }
  // if (SunRiseAdjDT.getHours()>11) { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.4)+'">P</span>'; } else { SunRise += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.4)+'">A</font>'; }
  var SunSetAdjMS = SunTimes.sunset.getTime();
  var SunSetAdjDT = new Date(SunSetAdjMS);
  if (SunSetAdjDT.getHours()<1) {
    SunSet = '12';
  } else {
    if (SunSetAdjDT.getHours()>12) { SunSet = ''+(SunSetAdjDT.getHours()-12); } else { SunSet = ''+SunSetAdjDT.getHours(); }
  }
  if (SunSetAdjDT.getMinutes()<10) { SunSet += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.5)+'">:</span>0'+SunSetAdjDT.getMinutes(); } else { SunSet += '<span style="font-size:'+Math.floor(WinWid*SunTimeSizing*.5)+'">:</span>'+SunSetAdjDT.getMinutes(); }
  if ( ( (SSCurrDT.getHours() > SunRiseAdjDT.getHours()) || ( (SSCurrDT.getHours() == SunRiseAdjDT.getHours()) && (SSCurrDT.getMinutes() >= SunRiseAdjDT.getMinutes()) ) ) &&
       ( (SSCurrDT.getHours() < SunSetAdjDT.getHours()) || ( (SSCurrDT.getHours() == SunSetAdjDT.getHours()) && (SSCurrDT.getMinutes() <= SunSetAdjDT.getMinutes()) ) ) ) {
    DateColor = DateColorDay; DateShadow = '#000000';
  } else {
    DateColor = DateColorNight; DateShadow = '#FFFFFF';
  }
}

// Configure location and visibility of radar inset.
function SetupRadar () {
  var RadarImgOut = "";
  if (RadarURLsrc == "") {
    if (document.getElementById('RadarImg')) { document.getElementById('RadarImg').style.visibility='hidden'; }
    document.getElementById('DivRadar').style.visibility='hidden';
  } else {
    document.getElementById('DivRadar').style.top = '-2px';
    document.getElementById('DivRadar').style.left = (WinWid-RadarWid+2)+'px';
    if (RadarLink != "") { RadarImgOut += '<a href="'+RadarLink+'" target="weather">'; }
    RadarImgOut += '<img src="'+RadarURLsrc+'" id="RadarImg" width='+RadarWid+' height='+RadarHgt+' style="border-radius:25px;" border=0>';
    if (RadarLink != "") { RadarImgOut += '</a>'; }
    document.getElementById('DivRadar').innerHTML = RadarImgOut;
    if (BGshowCurr.indexOf('R')<1) {
      document.getElementById('RadarImg').style.visibility='hidden';
      document.getElementById('DivRadar').style.visibility='hidden';
    }
  }
}

// === WEATHER ===

// Speak the weather forecast on capable browsers (including Chrome and Safari)
function SpeakWeather() {
  var SFstr = "";
  var WeatherSpoke = false;
  if (SpeechReady) {
    if (IsSpeaking) { SpeechCancel(); }
    if (! IsSpeaking) {
      var SpkDT=new Date(DTadj());
      var SpkHr = 0;
      var SpkAP="A";
      var SpkAPSpoken = "";
      SpkHr = SpkDT.getHours();
      if (SpkHr>11) { SpkAP = "P"; }
      SpkAPSpoken = ( (SpkAP=='A') ? " A M " : " P M " );
      if (SpkHr>12) SpkHr = SpkHr-12;  if (SpkHr==0) SpkHr = 12;
      var SpkMn = "";
      if (SpkDT.getMinutes()>0) {
        SpkMn = SpkDT.getMinutes().toString();
        if (SpkMn.length<2) SpkMn = " O "+SpkMn;
      }
      if ( (WeatherCurrentSpoken.length>8) || (WeatherForecastSpoken.length>16) ) {
        SFstr += 'On '+FullDoW[SpkDT.getDay()]+' '+FullMon[SpkDT.getMonth()]+' '+FullDoM[SpkDT.getDate()]+', ';
        if (WeatherCurrentSpoken.length>8) {
          SFstr += "at "+SpkHr.toString()+" "+SpkMn+" "+SpkAPSpoken+".  Its "+WeatherCurrentSpoken.toUpperCase()+".  ";
          SpeechQueueAdd('Weather', SFstr);  WeatherSpoke = true;
        }
        if (WeatherForecastSpoken.length>8) {
          if (WeatherCurrentSpoken.length<=8) {
            SFstr += "at "+SpkHr.toString()+" "+SpkMn+" "+SpkAPSpoken+".  Forecasting ";
          }
          SpeechQueueAdd('Forecast', WeatherForecastSpoken);  WeatherSpoke = true;
        }
      }
      if (AlarmsToday.length>0) { SpeechQueueAdd('AlarmsToday', AlarmsToday); }
      if (! WeatherSpoke) {
        SFstr = "Its "+SpkHr.toString()+" "+SpkMn+" "+SpkAPSpoken+" On "+FullDoW[SpkDT.getDay()]+' '+FullMon[SpkDT.getMonth()]+' '+FullDoM[SpkDT.getDate()];
        SpeechQueueAdd('TIMEDATE', SFstr);
      }
    }
  }
}

function FmtMinus (FMin) {
  return(Math.floor(FMin).toString().replace(/-([0-9]+)/gi,"<span style='font-size:80%; vertical-align:40%;'>-</span>$1"));
}
function FmtDec(InFlt) {
  return(InFlt.toFixed(1).replace(/\.0$/, ''));
}
function d2o (d_in) {  // Wind direction degrees to ordinal.
  if (d_in<22.5) return("N");
  if (d_in<67.5) return("NW");
  if (d_in<112.5) return("W");
  if (d_in<157.5) return("SW");
  if (d_in<202.5) return("S");
  if (d_in<247.5) return("SE");
  if (d_in<292.5) return("E");
  if (d_in<337.5) return("NE");
  return("N");
}
function d2ordinal (d_in) {
  if (d_in<22.5) return("North");
  if (d_in<67.5) return("Northwest");
  if (d_in<112.5) return("West");
  if (d_in<157.5) return("Southwest");
  if (d_in<202.5) return("South");
  if (d_in<247.5) return("Southeast");
  if (d_in<292.5) return("East");
  if (d_in<337.5) return("Northeast");
  return("North");
}
function c2f (c_in) {  // centi to faren
  return( Math.floor( ( (c_in * 1.8) + 32) * 10) / 10);
}
function k2m (k_in) {  // km to miles
  return( Math.floor( (k_in * .62) * 10) / 10);
}

// Asynchronous receive of weather current conditions, from NWS API.
function WeatherCurrentDisplay () {
  var WeatherCurrentOut
  WeatherCurrentOut = "";
  if (SpeechReady) {
    WeatherCurrentOut += '<a href="JavaScript:SpeakWeather();" title="Speak the weather." style="text-decoration:none;">';
  } else {
    if (WeatherLink!="") {
      WeatherCurrentOut += '<a href="'+WeatherLink+'" title="Detailed Weather" target="weather" style="text-decoration:none;">';
    }
  }
  WeatherCurrentOut += '<span id="DivWeatherText" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis; font-family:Arial; font-size:'+Math.floor(WinHgt*WeatherCurrentHgt)+'px; line-height:'+Math.floor(WinHgt*WeatherCurrentHgt*0.7)+'px; color:'+ClockColor+'; text-decoration:none; font-stretch:condensed; -webkit-font-smoothing:antialiased;'+WeatherShadow+'" title="Detailed Weather Forecast">'+WeatherCurrent+'</span>';
  if ( (SpeechReady) || (WeatherLink!="") ) { WeatherCurrentOut += "</a>"; }
  if (BGshowCurr.indexOf('W')>=0) {
    document.getElementById('DivWeatherCurrent').innerHTML = WeatherCurrentOut;
    // Check if text element exceeds div width and adjust it's horizontal scaling as needed.
    if (WinPortrait) {
      var textElement = document.getElementById('DivWeatherCurrent'); 
      var scaleFactor = textElement.clientWidth / textElement.scrollWidth;
      if (textElement.scrollWidth > textElement.clientWidth) {
        textElement.style.transform = `scaleX(${scaleFactor})`;
        textElement.style.transformOrigin = 'left center';
        DebugMsg('ScaleX='+scaleFactor.toString());
      }
    }
  }
}

// Receive current weather observations, format it for display and speech.
var WeatherCurrentHandle = 0;
function WeatherCurrentReceive () {
  WeatherCurrent = '';
  WeatherCurrentSpoken = '';
  if ( (WeatherCurrentHandle.readyState==4) && (WeatherCurrentHandle.status==200) ) {
    var FWCread = WeatherCurrentHandle.responseText;
    try {
      var FWCrec = JSON.parse(FWCread);
      WeatherCurrent += '<nobr><span style="white-space:nowrap; font-size:'+Math.floor(WinHgt*WeatherCurrentHgt)+'px;">';
      WeatherCurrent += FmtMinus(c2f(FWCrec['features'][0]['properties']['temperature']['value']))+'</span>&deg;</nobr>';
      WeatherCurrentSpoken = Math.floor(c2f(FWCrec['features'][0]['properties']['temperature']['value']))+' degrees';
      if (FWCrec['features'][0]['properties']['windSpeed']['value']>1) {
        WeatherCurrent += '&nbsp;'+d2o(FWCrec['features'][0]['properties']['windDirection']['value'])+Math.floor(k2m(FWCrec['features'][0]['properties']['windSpeed']['value']));
        WeatherCurrentSpoken += ', wind '+d2ordinal(FWCrec['features'][0]['properties']['windDirection']['value'])+' at '+Math.floor(k2m(FWCrec['features'][0]['properties']['windSpeed']['value']));
      }
      WeatherCurrent += '&nbsp;<span style="font-size:'+Math.floor(WinHgt*WeatherCurrentHgt*.9)+'px;"">'+Math.floor(FWCrec['features'][0]['properties']['relativeHumidity']['value'])+'</span><span style="font-size:'+Math.floor(WinHgt*WeatherCurrentHgt*.5)+'px;"">%</span>';
      WeatherCurrent += '&nbsp;'+FWCrec['features'][0]['properties']['textDescription'].replace(/ and /gi,"&");
      WeatherCurrentSpoken += ', '+FWCrec['features'][0]['properties']['textDescription']+' ';
      WeatherCurrentSpoken += ', humidity '+Math.floor(FWCrec['features'][0]['properties']['relativeHumidity']['value'])+' percent.';
      WeatherCurrentStat = "Weather loaded OK.";
    } catch (err) {
      WeatherCurrentStat = 'Trouble parsing observations: '+err;
    }
  } else {
    WeatherCurrentStat = 'Trouble receiving observations.';
  }
  WeatherCurrentDisplay();
  ShowMoon();
}

// Request weather current conditions on capable browsers.
function WeatherCurrentRequest () {
  WeatherCurrent = '';
  WeatherCurrentSpoken = '';
  if (WeatherCurrentURL.length>1) {
    try {
      WeatherCurrentHandle = new XMLHttpRequest();
      if (WeatherCurrentHandle) {
        WeatherCurrentHandle.open('GET', WeatherCurrentURL, true);
        WeatherCurrentHandle.setRequestHeader('User-Agent', USER_AGENT);
        WeatherCurrentHandle.timeout = 20000;
        WeatherCurrentHandle.onreadystatechange = WeatherCurrentReceive;
        WeatherCurrentHandle.send(null);
      }
    } catch (err) {
      WeatherCurrentStat = 'Trouble requesting observations: '+err;
    }
    WeatherCurrentStat = 'Waiting for weather observations...';
  }
  WeatherCurrentTimer = WeatherCurrentDur;
  WeatherCurrentDisplay();
  ShowMoon();
}

// Asynchronous receive of weather forecast from NWS API.
function WeatherForecastDisplay () {
  var WeatherForecastOut
  WeatherForecastOut = "";
  WeatherForecastOut += '<span style="font-family:Arial; font-size:'+(Math.floor(WinHgt*WeatherForecastHgt))+'px; line-height:84%; color:'+ForecastColor+'; -webkit-font-smoothing:antialiased;'+WeatherShadow+'">';
  if (SpeechReady) {
    WeatherForecastOut += '<a href="JavaScript:SpeakWeather();" title="Speak the forecast." style="text-decoration:none; color:'+ForecastColor+'">';
  } else {
    if (WeatherLink!="") {
      WeatherForecastOut += '<a href="'+WeatherLink+'" title="Detailed Weather Forecast" target="weather" style="text-decoration:none; color:'+ForecastColor+'">';
    }
  }
  WeatherForecastOut += WeatherForecast;
  if ( (SpeechReady) || (WeatherLink!="") ) { WeatherForecastOut += "</a>"; }
  WeatherForecastOut += "</span>";
  if (BGshowCurr.indexOf('F')>=0) {
    document.getElementById('DivWeatherForecast').innerHTML = WeatherForecastOut;
  }
}

// Receive weather forecast, extensively format it for display and speech.
var WeatherForecastHandle = 0;
function WeatherForecastReceive () {
  WeatherForecast = '';
  WeatherForecastSpoken = '';
  if ( (WeatherForecastHandle.readyState==4) && (WeatherForecastHandle.status==200) ) {
    var FWFread = WeatherForecastHandle.responseText;
    try {
      var FWFrec = JSON.parse(FWFread);
      PeriodName = FWFrec['properties']['periods'][0]['name'];
      WeatherForecast = PeriodName+' ';
      FcstText = FWFrec['properties']['periods'][0]['detailedForecast'];
      // Cleanup displayed weather forecast for brevity.
      FcstText = ' '+FcstText+' ';
      FcstText = FcstText.replace(/([0-9<>;]+) to ([0-9<>;]+)/gi,"$1-$2");
      FcstText = FcstText.replace(/ at ([0-9<>;]+)/gi," $1");
      FcstText = FcstText.replace(/ mph/gi,"");
      FcstText = FcstText.replace(/ degrees/gi," ");
      FcstText = FcstText.replace(/around /gi,"~");
      FcstText = FcstText.replace(/about /gi,"~");
      FcstText = FcstText.replace(/near /gi,"~");
      FcstText = FcstText.replace(/\.\.\./gi,"; ");
      FcstText = FcstText.replace(/\s[\s]+/gi," ");
      FcstText = FcstText.replace(/ inches/gi," in");
      FcstText = FcstText.replace(/temperature /gi,"temp ");
      FcstText = FcstText.replace(/temperatures /gi,"temps ");
      FcstText = FcstText.replace(/with temps /gi,"temps ");
      FcstText = FcstText.replace(/precipitation /gi,"precip ");
      FcstText = FcstText.replace(/ is /gi," ");
      FcstText = FcstText.replace(/ with gusts /gi," gusts ");
      FcstText = FcstText.replace(/ gusts of /gi," gusts ");
      FcstText = FcstText.replace(/ amounts /gi," ");
      FcstText = FcstText.replace(/ as high as /gi," of ");
      FcstText = FcstText.replace(/ with a /gi," ");
      FcstText = FcstText.replace(/^[\s]+/gi,"");
      FcstText = FcstText.replace(/[\s]+$/gi,"");
      FcstText = FcstText.replace(/([^A-Za-z0-9])South Southeast([^A-Za-z])/gi,"$1SE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])Southeast([^A-Za-z])/gi,"$1SE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])South Southwest([^A-Za-z])/gi,"$1SW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])Southwest([^A-Za-z])/gi,"$1SW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])North Northeast([^A-Za-z])/gi,"$1NE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])Northeast([^A-Za-z])/gi,"$1NE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])North Northwest([^A-Za-z])/gi,"$1NW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])Northwest([^A-Za-z])/gi,"$1NW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])East Southeast([^A-Za-z])/gi,"$1SE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])East Northeast([^A-Za-z])/gi,"$1NE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])West Southwest([^A-Za-z])/gi,"$1SW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])West Northwest([^A-Za-z])/gi,"$1NW$2");
	  FcstText = FcstText.replace(/([^A-Za-z0-9])East([^A-Za-z])/gi,"$1E$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])West([^A-Za-z])/gi,"$1W$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])North([^A-Za-z])/gi,"$1N$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])South([^A-Za-z])/gi,"$1S$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])NNE([^A-Za-z])/gi,"$1NE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])ENE([^A-Za-z])/gi,"$1NE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])ESE([^A-Za-z])/gi,"$1SE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])SSE([^A-Za-z])/gi,"$1SE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])SSW([^A-Za-z])/gi,"$1SW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])WSW([^A-Za-z])/gi,"$1SW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])WNW([^A-Za-z])/gi,"$1NW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])NNW([^A-Za-z])/gi,"$1NW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])N NE([^A-Za-z])/gi,"$1NE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])E NE([^A-Za-z])/gi,"$1NE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])E SE([^A-Za-z])/gi,"$1SE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])S SE([^A-Za-z])/gi,"$1SE$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])S SW([^A-Za-z])/gi,"$1SW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])W SW([^A-Za-z])/gi,"$1SW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])W NW([^A-Za-z])/gi,"$1NW$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])N NW([^A-Za-z])/gi,"$1NW$2");
	  FcstText = FcstText.replace(/New rainfall[^\.]+[\.]/gi,"");
	  FcstText = FcstText.trim();
      WeatherForecast += FcstText;
      WeatherForecast = WeatherForecast.replace(/ -([0-9]+)/gi," <span style='font-size:80%; vertical-align:40%;'>-</span>$1");
      WeatherForecastSpoken = PeriodName+' ';
      FcstText = FWFrec['properties']['periods'][0]['detailedForecast'];
      FcstText = FcstText.replace(/([^A-Za-z0-9])South Southeast([^A-Za-z])/gi,"$1Southeast$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])South Southwest([^A-Za-z])/gi,"$1Southwest$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])North Northeast([^A-Za-z])/gi,"$1Northeast$2");
      FcstText = FcstText.replace(/([^A-Za-z0-9])North Northwest([^A-Za-z])/gi,"$1Northwest$2");
      FcstText = FcstText.replace(/ winds /gi," wind ");  // Pronounciation improvement.
      WeatherForecastSpoken += FcstText;
      WeatherForecastStat = "Forecast loaded OK.";
    } catch (err) {
      WeatherForecastStat = 'Trouble parsing forecast: '+err;
    }
  } else {
    WeatherForecastStat = 'Trouble receiving forecast.';
  }
  WeatherForecastDisplay();
  ShowMoon();
}

// Request weather forecast on capable browsers.
function WeatherForecastRequest () {
  WeatherForecast = '';
  WeatherForecastSpoken = '';
  if (WeatherForecastURL.length>1) {
    try {
      WeatherForecastHandle = new XMLHttpRequest();
      if (WeatherForecastHandle) {
        WeatherForecastHandle.open('GET', WeatherForecastURL, true);
        WeatherForecastHandle.setRequestHeader('User-Agent', USER_AGENT);
        WeatherForecastHandle.timeout = 20000;
        WeatherForecastHandle.onreadystatechange = WeatherForecastReceive;
        WeatherForecastHandle.send(null);
      }
      WeatherCurrentStat = "Forecast loaded OK.";
    } catch (err) {
      WeatherForecastStat = 'Trouble requesting forecast: '+err;
    }
    WeatherForecastStat = 'Waiting for weather forecast...';
  }
  WeatherForecastTimer = WeatherForecastDur;
  WeatherForecastDisplay();
  ShowMoon();
}

// Setup weather display areas.
function SetupWeather () {
  if (BGshowCurr.indexOf('F')>=0) {
    document.getElementById('DivWeatherCurrent').style.top = (OfsY+Math.floor(WinHgt*.57))+'px';
  } else {
    document.getElementById('DivWeatherCurrent').style.top = (OfsY+Math.floor(WinHgt*.8))+'px';
  }
  document.getElementById('DivWeatherCurrent').style.height = Math.floor(WinHgt*.3)+'px';
  document.getElementById('DivWeatherCurrent').style.left = (OfsX)+'px';
  document.getElementById('DivWeatherCurrent').style.width = (WinWid-OfsX-20)+'px';
  document.getElementById('DivWeatherForecast').style.top = (OfsY+Math.floor(WinHgt*.7))+'px';
  document.getElementById('DivWeatherForecast').style.height = Math.floor(WinHgt*.3)+'px';
  document.getElementById('DivWeatherForecast').style.left = (OfsX+18)+'px';
  document.getElementById('DivWeatherForecast').style.width = (WinWid-OfsX-36)+'px';
  document.getElementById('DivWeatherForecast').style.opacity = 0.7;
  WeatherForecastTimer = 0;
  WeatherCurrentTimer = 0;
  WeatherLink = WeatherURL;
  RadarLink = WeatherURL;
}

// === REMOTE CONFIGURABLES ===
// Fetch a URL specified config file for alarms.

// Parse target=message pairs from alarms config file.
function CfgParse () {
  var CfgErrCnt = 0;
  var CfgMaxErrs = 12;
  CfgStat = "CFG Parsing...";
  if ( (CfgHandle.readyState==4) && (CfgHandle.status==200) ) {
    CfgText = CfgHandle.responseText;
    CfgName = "";  CfgVal = "";
    if (CfgText.length>100) {
      CfgLines = CfgText.split("\n");
      CfgVals = Array();
      CfgKeys = Array();
      CfgKeysCnt = 0;
      for (CfgLp=0; CfgLp<CfgLines.length; CfgLp++) {
        if (CfgErrCnt<CfgMaxErrs) {
          CfgLine = CfgLines[CfgLp];
          CfgLine = CfgLine.replace(/^\s+/,'');
          CfgLine = CfgLine.replace(/\s+$/,'');
          if (CfgLine.length>3) {
            if ( (CfgLine.substr(0,1)!='#') && (CfgLine.substr(0,1)!=';') ) {
              if (CfgLine.indexOf('=')>=0) {
                CfgName = CfgLine.replace(/\=.*/gi,'').toLowerCase();
                CfgName = CfgName.replace(/^\s+/gi,'').replace(/\s+$/gi,'')
                CfgVal = CfgLine.replace(/[^\=]+\=/gi,'');
                CfgVal = CfgVal.replace(/^\s+/gi,'').replace(/\s+$/gi,'');
                if ( (CfgName.length>0) && (CfgVal.length>0) ) {
                  CfgKeys[CfgKeysCnt] = CfgName;
                  CfgVals[CfgName] = CfgVal;
                  CfgKeysCnt++;
                  // DebugMsg(CfgName+'="'+CfgVal+'"');
                } else {
                  CfgErrCnt++;
                }
              } else {
                CfgErrCnt++;
              }
            }
          }
        } else {
          if (CfgErrCnt==CfgMaxErrs) { CfgStat = 'Too many errors loading config file'; }
          CfgErrCnt++;
        }
      }  // CFG line loop
      if (CfgKeysCnt>0) {
        if (CfgVals['dayssince']) {
          DaysSinceStarted = new Date(CfgVals['dayssince']);
        }
      }
    }
    SpeechUtteranceDone();
  } else {
    CfgStat = "CFG reply error "+CfgHandle.status+" on "+CfgSrc;
  }
}

// Request remote config file infowall.dat from host web root.  Completion of load calls CfgParse
function CfgRequest () {
  var CfgURLcode = "";
  CfgURLcode = location.href;
  CfgStat = "CFG requesting...";
  CfgSrc = 'https://'+window.location.hostname+'/infowall.dat';
  if (CfgSrc.length>0) {
    CfgHandle = null;
    CfgText = "";
    try {
      CfgHandle = new XMLHttpRequest();
    } catch (trymicrosoft) {
      try {
        CfgHandle = new ActiveXObject('Msxml2.XMLHTTP');
      } catch (othermicrosoft) {
        try {
          CfgHandle = new ActiveXObject('Microsoft.XMLHTTP');
        } catch (failed) { }
      }
    }
    if (CfgHandle) {
      try {
        CfgSrc += '?z='+(Math.floor(Math.random()*9999999).toString());
        CfgHandle.open('GET', CfgSrc, true);
        CfgHandle.timeout = 11000;
        CfgHandle.onreadystatechange = function(){CfgParse();};
        CfgHandle.send(null);
      } catch (err) { CfgStat = "CFG request failed: "+err }
    }
    DebugMsg('CfgSrc="'+CfgSrc+'"');
  }
}

// Substitutions in alarm messages.
function AlarmSubs (ASval) {
  var ASDT = new Date(DTadj());
  try {
    ASval = ASval.replace(/{YYYY}/gi,(ASDT.getYear()+1900).toString());
    ASval = ASval.replace(/{MM}/,(ASDT.getMonth()+1).toString());
    ASval = ASval.replace(/{DD}/,ASDT.getDate().toString());
    ASval = ASval.replace(/{HH}/,ASDT.getHours().toString());
    ASval = ASval.replace(/{mm}/,ASDT.getMinutes().toString());
    ASval = ASval.replace(/{MO}/,FullMon[ASDT.getMonth()]);
    ASval = ASval.replace(/{DA}/,FullDoW[ASDT.getDay()]);
    ASval = ASval.replace(/{DM}/,FullDoM[ASDT.getDate()]);
    ASval = ASval.replace(/{TODAY}/,AlarmsToday);
    if (WeatherCurrentSpoken.length>8) {
      ASval = ASval.replace(/{WEATHER}/,WeatherCurrentSpoken);
    } else {
      ASval = ASval.replace(/{WEATHER}/,'');
    }
    if (WeatherForecastSpoken.length>16) {
      ASval = ASval.replace(/{FORECAST}/,WeatherForecastSpoken.replace(/^[^\s]+\ /,''));
    } else {
      ASval = ASval.replace(/{FORECAST}/,'','');
    }
    if (DaysSinceDays>0) {
      ASval = ASval.replace(/{DS}/,DaysSinceDays.toString());
    } else {
      ASval = ASval.replace(/{DS}/,'');
    }
    if (DaysSinceWeeks>0) {
      ASval = ASval.replace(/{DW}/,DaysSinceWeeks.toString());
    } else {
      ASval = ASval.replace(/{DW}/,'');
    }
    var ASap="A";
    var ASapSpoken = "";
    var ASh=ASDT.getHours();
    var ASm=ASDT.getMinutes();
    var ASt="";
    if (ASh>11) { ASap = "P"; }
    if (ASh>12) { ASh = ASh-12; }
    if (ASh==0) { ASh = 12; }
    if ( (ASh == 12) && (ASap == 'A') && (ASm==0) ) {
      ASt = 'Midnight';
    } else {
      if ( (ASh == 12) && (ASap == 'P') && (ASm==0) ) {
        ASt = 'Noon';
      } else {
        ASt = ASh.toString();
        if (ASm > 0) {
          ASt += ' ';
          if (ASm < 10) { ASt += ' oh '; }
          ASt += ASm.toString();
        }
        ASapSpoken = ( (ASap=='A') ? " A M " : " P M " );
        ASt += ' '+ASapSpoken;
      }
    }
    ASval = ASval.replace(/{TIME}/,ASt);
    ASval = ASval.replace(/{hh}/,ASh.toString());
    ASval = ASval.replace(/{AP}/,ASapSpoken);
  } catch (err) {
    ASval = ASval.replace(/{[^}]+}/gi,'');
  }
  return(ASval);
}

// On each minute, scan for matches against special alarms config file.
function CheckAlarms () {
  if (! IsSpeaking) {  // Not currently speaking.
    if (BGpausedAt<0) { // Not paused.
      AlarmsCurr = "";  AlarmsToday = "";  AlarmsFirst = "";  AlarmStr = ' ';
      AlarmDT = new Date(DTadj());
      if (CfgKeysCnt > 0) {  // Some alarms configured.
        AlarmStr += FullMon[AlarmDT.getMonth()].toLowerCase()+' ';
        AlarmStr += FullDoW[AlarmDT.getDay()].toLowerCase()+' ';
        AlarmStr += (AlarmDT.getYear()+1900).toString()+'.';
        if (AlarmDT.getMonth() < 9) { AlarmStr += '0'; }
        AlarmStr += (AlarmDT.getMonth()+1).toString()+'.';
        if (AlarmDT.getDate() < 10) { AlarmStr += '0'; }
        AlarmStr += AlarmDT.getDate().toString()+' ';
        if (AlarmDT.getHours() < 10) { AlarmStr += '0'; }
        AlarmStr += AlarmDT.getHours().toString()+':';
        if (AlarmDT.getMinutes() < 10) { AlarmStr += '0'; }
        AlarmStr += AlarmDT.getMinutes().toString()+':';
        if (AlarmDT.getSeconds() < 10) { AlarmStr += '0'; }
        AlarmStr += AlarmDT.getSeconds().toString();
        for (var AlmLp = 0; AlmLp < CfgKeysCnt; AlmLp++) {
          if (CfgKeys[AlmLp] == '*') {
            if (AlarmsBooted<1) {
              if ( (VoiceIdx>=0) && (WeatherCurrentSpoken.length>0) ) {
                if (AlarmsFirst.length>0) { AlarmsFirst += '. '; }
                AlarmsFirst += CfgVals[CfgKeys[AlmLp]];
                AlarmDupeChkKey = CfgKeys[AlmLp];
              }
            }
          } else {
            if (AlarmStr.indexOf(CfgKeys[AlmLp])>=0) {
              if ( (CfgKeys[AlmLp].indexOf('.')>=0) && (CfgKeys[AlmLp].indexOf(':')<0) ) {
                if (AlarmsToday.length>0) { AlarmsToday += '. '; }
                AlarmsToday += CfgVals[CfgKeys[AlmLp]];
                AlarmDupeChkKey = CfgKeys[AlmLp];
                DebugMsg('TODAY ALARM: '+AlarmsToday);
              } else {
                if (AlarmsCurr.length>0) { AlarmsCurr += '. '; }
                AlarmsCurr += CfgVals[CfgKeys[AlmLp]];
                AlarmDupeChkKey = CfgKeys[AlmLp];
              }
            }
          }
        }
        if (AlarmsFirst.length>0) {
          SpeechQueueAdd('*', AlarmsFirst);
          DebugMsg('FIRST ALARM: '+AlarmsFirst);
          AlarmsBooted = 1;
        }
        if (AlarmsCurr.length>0) {
          SpeechQueueAdd(AlarmDupeChkKey, AlarmsCurr);
          DebugMsg('CURRENT ALARM: '+AlarmsCurr);
        }
      }
    }
  }
}

// === DISPLAY ===

// Display the date.
function ShowDate () {
  var SDdt = new Date(DTadj());
  var SDday = SDdt.getDate();
  var SDdow = SDdt.getDay();
  var SDmonth = SDdt.getMonth();
  var SDout = "";
  if (BGshowCurr.indexOf('D')>=0) {
    if ( (BGshowCurr.indexOf('W')<0) && (BGshowCurr.indexOf('F')<0) ) {
      document.getElementById('DivDate').style.top = (OfsY+Math.floor(WinHgt*.58))+'px';
    } else {
      document.getElementById('DivDate').style.top = (OfsY)+'px';
    }
    document.getElementById('DivDate').style.textAlign = 'center';
    document.getElementById('DivDate').style.left = (OfsX+48)+'px';
    document.getElementById('DivDate').style.width = (WinWid-OfsX-48)+'px';
    document.getElementById('DivDate').style.opacity = 0.8;
    SDout = '<span style="font-family:Arial; text-decoration:bold; font-variant:small-caps; text-shadow:-3px 3px 0px '+DateShadow+'; -webkit-font-smoothing:antialiased; color:'+DateColor+'; font-size:'+Math.floor(WinHgt*DateHgt)+'px;" onClick="NextBG();">';
    SDout += AbrvDoW[SDdow] + "&nbsp;" + AbrvMon[SDmonth] + "&nbsp;" + SDday;
    if ( (WinPortrait) && (BGshowCurr.indexOf('M')>=0) ) { SDout += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"; }  // Padding for adjacent sunrise/sunset display.
    SDout += '</span>';
    document.getElementById('SpanDate').innerHTML = SDout;
  }
}

// Draw floodlight.
function DrawFloodlight (DFLin) {
  try {
    document.getElementById('DivCanvas').style.visibility='visible';
    CanvasDiv = document.getElementById("DivCanvas");
    if (CanvasDiv) {
      CanvasContext = CanvasDiv.getContext("2d");
      if (CanvasContext) {
        var CanvasGradient=CanvasContext.createRadialGradient(150,50,70,150,50,200);
        CanvasGradient.addColorStop(0,DFLin);
        CanvasGradient.addColorStop(1,"#000000");
        CanvasContext.fillStyle=CanvasGradient;
        CanvasContext.fillRect(0,0,999,999);
      }
    }
  } catch (err) { }
}

// Setup analog clock.
function AnalogSetup () {
  try {
    ClockCanvas = document.getElementById("AnalogClock");
    if (ClockCanvas) {
      ClockContext = ClockCanvas.getContext("2d");
      if (ClockContext) {
        ClockCanvas.width = (WinWid-(Math.abs(OfsX)*2));
        ClockCanvas.height = (WinHgt-(Math.abs(OfsY)*2));
        ClockCanvasBG = document.getElementById("AnalogClockBG");
        if (ClockCanvasBG) {
          ClockContextBG = ClockCanvasBG.getContext("2d");
          if (ClockContextBG) {
            ClockCanvasBG.width = (WinWid-(Math.abs(OfsX)*2));
            ClockCanvasBG.height = (WinHgt-(Math.abs(OfsY)*2));
          }
        }
      } else {
        BGshowCurr = BGshowCurr.replace(/A/gi,'')+'C';  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
      }
    } else {
      BGshowCurr = BGshowCurr.replace(/A/gi,'')+'C';  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
    }
  } catch (err) {
    BGshowCurr = BGshowCurr.replace(/A/gi,'')+'C';  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
  }
}

// Draw clock outline and ticks.
function DrawAnalogBG () {
  var ACtickLp, ACtickI, ACtickO, ACtickR, ACtickX1, ACtickX2, ACtickY1, ACtickY2;
  ClockContextBG.clearRect(0, 0, ClockCanvasBG.width, ClockCanvasBG.height);
  for (ACtickLp=0; ACtickLp< 12; ACtickLp++) {
    ACtickI = (ACtickLp % 3) ? 0.75 : 0.7;
    ACtickO = (ACtickLp % 3) ? 0.95 : 1.0;
    ACtickR = (Math.TAU * (ACtickLp/12)) - (Math.TAU/4);
    ACtickX1 = (WinWid / 2) + Math.cos(ACtickR) * (ACtickI * (WinMin/2));
    ACtickY1 = (WinHgt / 2) + Math.sin(ACtickR) * (ACtickI * (WinMin/2));
    ACtickX2 = (WinWid / 2) + Math.cos(ACtickR) * (ACtickO * (WinMin/2));
    ACtickY2 = (WinHgt / 2) + Math.sin(ACtickR) * (ACtickO * (WinMin/2));
    ClockContextBG.lineWidth = (ACtickLp % 3) ? 4 : 10;
    ClockContextBG.beginPath();
    ClockContextBG.moveTo(ACtickX1, ACtickY1);
    ClockContextBG.lineTo(ACtickX2, ACtickY2);
    ClockContextBG.strokeStyle = '#999999';
    ClockContextBG.lineCap = 'round';
    ClockContextBG.stroke();
  }
}

// Display the time (includes both digital and analog versions).
function ShowTime () {
  var ColonElev = 0;
  var DigitSize = 0;
  var ClockHTML = "";
  var STdt=new Date(DTadj());
  STap="A";
  var STh=STdt.getHours();
  HourCurr = STh;
  var STm=STdt.getMinutes();
  MinuteCurr = STm;
  var STs = STdt.getSeconds();
  SecondCurr = (MinuteCurr*60)+STs;
  var STmspc = 4400;
  var STms = STdt.getTime() % STmspc;
  var STsz = 0;  var STman = 0;
  if (STh>11) { STap = "P"; }
  if (STh>12) { STh = STh-12; }
  if (STh==0) { STh = 12; }
  if (STm<10) { STm = "0" + STm; }
  if (ClockMode==0) {
    ClockRainbowShadowSeq = (ClockRainbowShadowSeq+1)%ClockRainbowShadows.length;
    ClockShadow = "#"+ClockRainbowShadows[ClockRainbowShadowSeq];
    ClockColor = "#"+ClockRainbowShadows[(ClockRainbowShadowSeq+Math.floor(ClockRainbowShadows.length/2))%ClockRainbowShadows.length];
    ClockOpacity = ClockRainbowOpacity[ClockRainbowShadowSeq];
  } else {
    ClockOpacity = 1.0;
  }
  if (BGshowCurr.indexOf('C')>=0) {
    ColonElev = Math.floor((STs/59)*80)+10;
    // Clock digit sizing effects (throbbing) happens here. Recently slowed from a quick pulse to a slow breathing.  Replaces pastel rainbow animation to reduce burn-in.
    // if (STms > 500) { STsz = 1000 - STms; } else { STsz = STms; }
    // DigitSize = ( (ClockMode==0) ? Math.floor(WinMin*0.5) : Math.floor(WinMin*(0.5 + (0.2*(STsz/500)))) );
    STmspcHalf = STmspc / 2;
    if (STms > (STmspcHalf)) { STsz = (STmspcHalf) - (STms - (STmspcHalf)); } else { STsz = STms; }
    STszHalf = STsz/(STmspcHalf);
    if (WinPortrait) { 
      DigitSizeBreathing = (Math.floor(WinMin*(0.3 + (0.07*(STszHalf)))));
    } else {
      if (WinSquare) { 
        DigitSizeBreathing = (Math.floor(WinMin*(0.4 + (0.07*(STszHalf)))));
      } else {
        DigitSizeBreathing = (Math.floor(WinMin*(0.5 + (0.1*(STszHalf)))));
      }
    }
    DigitSize = ( (ClockMode==0) ? (Math.floor(WinMin*0.5)) : DigitSizeBreathing );
    ClockColorEff = ((BGoptsCurr.indexOf("R")>=0)?ClockShadow:ClockColor);
    ClockShadowEff = ((BGoptsCurr.indexOf("R")>=0)?ClockColor:ClockShadow);
    ClockHTML += '<span style="color:'+ClockColorEff+'; opacity:'+ClockOpacity.toString()+'; font-size:'+DigitSize.toString()+'px; font-family:Arial; text-decoration:bold; text-shadow:-6px 6px 0px '+ClockShadowEff+';">' + STh + '</span>'; // hour
    ClockHTML += '<span style="vertical-align:'+ColonElev.toString()+'%; margin-left:-'+Math.floor(DigitSize*0.1)+'px; font-size:'+Math.floor(DigitSize*0.4)+'px; color:'+ClockColorEff+'; text-shadow:-6px 6px 0px '+ClockShadowEff+';">:</span>'; // colon
    ClockHTML += '<span style="color:'+ClockColorEff+'; opacity:'+ClockOpacity.toString()+'; font-size:'+DigitSize.toString()+'px; font-family:Arial; text-decoration:bold; text-shadow:-6px 6px 0px '+ClockShadowEff+';">' + STm + '</span>'; // minute
    ClockHTML += '<span style="font-size:'+Math.floor(DigitSize*0.24)+'px; font-family:Arial; color:'+ClockColorEff+'; text-shadow:-6px 6px 0px '+ClockShadowEff+'; margin-left:-4px; vertical-align:150%;">'+STap+'</span>';  // A|P
    document.getElementById('SpanTime').innerHTML = ClockHTML;
  }
  if (BGshowCurr.indexOf('A')>=0) {
    Math.TAU = 2 * Math.PI;
    // Function for drawing hands.
    function ACdraw(ACtype, ACprogress, ACwidth, AClength) {
      var ACrads = (Math.TAU * ACprogress) - (Math.TAU/4);
      var ACtgtX = Math.floor((WinWid / 2) + Math.cos(ACrads) * (AClength * (WinMin/2)));
      var ACtgtY = Math.floor((WinHgt / 2) + Math.sin(ACrads) * (AClength * (WinMin/2)));
      var ACcolor = '#FF0000';
      if (ACtype=='H') { ACcolor = '#000000'; } // Hour
      if (ACtype=='M') { ACcolor = '#000000' } // Minute
      ClockContext.lineWidth = ACwidth;
      ClockContext.beginPath();
      ClockContext.moveTo((WinWid / 2), (WinHgt / 2));
      ClockContext.lineTo(ACtgtX, ACtgtY);
      ClockContext.strokeStyle = ACcolor;
      ClockContext.stroke();
      // Inner color.
      if (ACtype!='S') {
        ClockContext.lineCap = 'round';
        ClockContext.lineWidth = ACwidth*0.6;
        ClockContext.beginPath();
        ClockContext.moveTo((WinWid / 2), (WinHgt / 2));
        ClockContext.lineTo(ACtgtX, ACtgtY);
        ClockContext.strokeStyle = '#FFFFFF';
        ClockContext.stroke();
      }
    }
    try {
      // Clears and redraws hands every refresh.  Sloppy but simple approach.
      ClockContext.clearRect(0, 0, ClockCanvas.width, ClockCanvas.height);
      // Render clock hands.
      ACdraw('H', (STh+(STm/60)) / 12, 36, 0.40); // Hour
      ACdraw('M', STm / 60, 20, 0.75); // Minute
      ACdraw('S', STs / 60, 4, 0.90); // Second
      document.getElementById('DivAnalog').style.visibility='visible';
    } catch (err) {
    }
  }
}

function FmtSeconds (FSin) {
  var FSout = "";
  var FSint = Math.floor(FSin);
  var FSpre = FSint;
  FSint = Math.floor(FSpre/60);
  var FSse = FSpre - Math.floor(FSint*60);
  FSpre = FSint;
  FSint = Math.floor(FSpre/60);
  var FSmi = FSpre - Math.floor(FSint*60);
  FSpre = FSint;
  FSint = Math.floor(FSpre/24);
  var FShr = FSpre - Math.floor(FSint*24);
  var FSda = Math.floor(FSpre/24);
  var FSfont = "<font size='33%' style='line-height:30%;vertical-align:150%;'>";
  if (FSda > 0) {
    FSout = FSout+FSda.toString()+FSfont+"D</font>";
  }
  if ( (FShr > 0) || (FSda > 0) ) {
    if ( (FShr < 10) && (FSda > 0) ) { FSout = FSout+"0"; }
    FSout = FSout+FShr.toString()+FSfont+"H</font>";
  }
  if (FSda < 10) {
    if ( (FSmi > 0) || (FShr > 0) || (FSda > 0) ) {
      if ( (FSmi < 10) && (FShr > 0) ) { FSout = FSout+"0"; }
      FSout = FSout+FSmi.toString()+FSfont+"M</font>";
    }
    if (FShr < 10) {
      if ( (FSse > 0) || (FSmi > 0) || (FShr > 0) || (FSda > 0) ) {
        if ( (FSse < 10) && (FSmi > 0) ) { FSout = FSout+"0"; }
        FSout = FSout+FSse.toString();
      }
    }
  }
  return(FSout);
}

// Neatly format stopwatch time and laps if running.
function ShowStopwatch () {
  StopwatchDT = new Date();
  var StopwatchCur = Math.floor(StopwatchDT.getTime() / 1000);
  var StopwatchLapsFmt = "";
  if (StopwatchLaps.length > 0) {
    StopwatchLapsFmt = "<span style='font-family:Arial; text-decoration:bold; color:#4040FF; line-height:84%; text-shadow:-1px 1px 0px #9A008D; font-size:"+(Math.round(WinHgt*.2))+"px;'>"+StopwatchLaps+"</span>";
  }
  document.getElementById('SpanStopwatch').innerHTML = FmtSeconds(StopwatchCur-StopwatchStarted)+StopwatchLapsFmt;
  document.getElementById('DivStopwatch').style.visibility='visible';
}
// Neatly format days/weeks since display if configured.
function ShowDaysSince () {
  if ( (DaysSinceStarted > 0) && (StopwatchStarted < 1) && (BGshowCurr.indexOf('C')>-1) ) {
    DaysSinceCurrDT = new Date();
    var DaysSinceCurMS = Math.floor(DaysSinceCurrDT.getTime() / 1000);
    var DaysSinceStartedMS = Math.floor(DaysSinceStarted.getTime() / 1000);
    var DaysSinceHours = Math.round((DaysSinceCurMS-DaysSinceStartedMS)/3600)-12;
    DaysSinceDays = Math.floor(DaysSinceHours/24);
    DaysSinceDaysHTML = DaysSinceDays.toString();
    DaysSinceWeeks = Math.floor(DaysSinceDays/7);
    DaysSinceWeeksHTML = '<i>'+DaysSinceWeeks.toString()+'<span style="font-size:'+Math.round(WinHgt*.4).toString()+'px">'+Math.floor(DaysSinceDays%7).toString()+'</span></i>';
    DaysSinceMonths = (Math.round((DaysSinceDays/30.43)*10)/10);
    DaysSinceMonthsHTML = '<u>'+DaysSinceMonths.toString()+'</u>';
    DaysSinceTimer = DaysSinceDur;
    if (BGshowOverride>0) { DaysSinceSeq=0; }
    if ( (DaysSinceSeq==1) && (DaysSinceMonths>0) ) {
      document.getElementById('SpanDaysSince').innerHTML = DaysSinceMonthsHTML;
      document.getElementById('DivDaysSince').style.color='#FF3535';
      document.getElementById('DivDaysSince').style.visibility='visible';
      DaysSinceTimer = Math.round(DaysSinceDur*1.5);
    } else {
      if ( (DaysSinceSeq==2) && (DaysSinceWeeks>0) ) {
        document.getElementById('SpanDaysSince').innerHTML = DaysSinceWeeksHTML;
        document.getElementById('DivDaysSince').style.color='#D89E00';
        document.getElementById('DivDaysSince').style.visibility='visible';
        DaysSinceTimer = Math.round(DaysSinceDur*2);
      } else {
        if ( (DaysSinceSeq==3) && (DaysSinceDays>0) ) {
          document.getElementById('SpanDaysSince').innerHTML = DaysSinceDaysHTML;
          document.getElementById('DivDaysSince').style.color='#FF3535';
          document.getElementById('DivDaysSince').style.visibility='visible';
          DaysSinceTimer = Math.round(DaysSinceDur*2.5);;
        } else {
          document.getElementById('DivDaysSince').style.visibility='hidden';
        }
      }
    }
    DaysSinceSeq = (DaysSinceSeq+1) % DaysSinceFreq;
  } else {
    document.getElementById('DivDaysSince').style.visibility='hidden';
  }
}

// Special color testing diagnostic mode on C keypress.
var STtimer = null;
var STred = 0;  var STgreen = 0;  var STblue = 0;  var STnum = 0;
var STinc = 16;  var STdur = 200;  var STflag = 0;  var STmode = 0;
function toHex(n) {
  n = parseInt(n,10);
  if (isNaN(n)) return "00";
  n = Math.max(0,Math.min(n,255));
  return "0123456789ABCDEF".charAt((n - (n % 16))/16) + "0123456789ABCDEF".charAt(n % 16);
}
function rgbToHex(R,G,B) {return('#'+toHex(R)+toHex(G)+toHex(B)); }
function DoColors () {
  STred += STinc;
  if (STred>255) { STred=0; STgreen += STinc; if (STgreen>255) { STgreen=0; STblue += STinc; if (STblue>255) { STblue=0; } } }
  document.bgColor = rgbToHex(STred,STgreen,STblue);
  STtimer = setTimeout('DoColors()',20);
}
function DoBlink () {
  if (STflag > 0) {
    document.bgColor = '#000000';
    STflag = 0;
  } else {
    document.bgColor = '#FFFFFF';
    STflag = 1;
  }
  STtimer = setTimeout('DoBlink()',STdur);
}
function DoTestPattern () {
  document.getElementById('DivBG').style.visibility='visible';
  if (document.getElementById('DivBG').innerHTML.toLowerCase().indexOf('<img')<0) { document.getElementById('DivBG').innerHTML = '<img src="" id="ImgBG" width=0 height=0 style="margin-top:0px; margin-left:0px;" border=0>'; }
  document.getElementById('ImgBG').height = WinHgt;
  document.getElementById('ImgBG').width = WinWid;
  document.getElementById('ImgBG').src = "https://bedno.com/g/Test_Pattern.jpg";
}
function DoDiags () {
  if (STmode==0) { DoTestPattern(); STmode=1; } else { if (STmode==1) { DoColors(); STmode=2; } else { if (STmode==2) { STdur = 5000; DoBlink(); STmode=3; } else { if (STmode==3) { STdur = 250; DoBlink(); STmode=4; } else { STdur = 20; DoBlink(); STmode=0; } } } }
}

// Shift most elements around a bit everysometimes potentially to abate screen burn-in.
function SetupOfs () {
  OfsX = 4-Math.floor(Math.random()*9);  OfsY = 4-Math.floor(Math.random()*9);
}

// Resizing handler, calls full screen update.
function DoResize () {
  HourPrev = -1; DoReBoot();
}

// Blank screen.
function AllDivsOff () {
  ShowTime();
  document.bgColor = '#000000';
  if (document.getElementById('DivAbout')) { document.getElementById('DivAbout').style.visibility='hidden'; }
  if (document.getElementById('DivAnalog')) { document.getElementById('DivAnalog').style.visibility='hidden'; }
  if (document.getElementById('DivAnalogBG')) { document.getElementById('DivAnalogBG').style.visibility='hidden'; }
  if (document.getElementById('DivBG')) { document.getElementById('DivBG').style.visibility='hidden'; }
  if (document.getElementById('DivBGdesc')) { document.getElementById('DivBGdesc').style.visibility='hidden'; }
  if (document.getElementById('DivDate')) { document.getElementById('DivDate').style.visibility='hidden'; }
  if (document.getElementById('SpanDate')) { document.getElementById('SpanDate').style.visibility='hidden'; }
  if (document.getElementById('DivIntro')) { document.getElementById('DivIntro').style.visibility='hidden'; }
  if (document.getElementById('DivCanvas')) { document.getElementById('DivCanvas').style.visibility='hidden'; }
  if (document.getElementById('DivMoonImg')) { document.getElementById('DivMoonImg').style.visibility='hidden'; }
  if (document.getElementById('DivRadar')) { document.getElementById('DivRadar').style.visibility='hidden'; }
  if (document.getElementById('RadarImg')) { document.getElementById('RadarImg').style.visibility='hidden'; }
  if (document.getElementById('DivSunTimes')) { document.getElementById('DivSunTimes').style.visibility='hidden'; }
  if (document.getElementById('DivTime')) { document.getElementById('DivTime').style.visibility='hidden'; }
  if (document.getElementById('SpanTime')) { document.getElementById('SpanTime').style.visibility='hidden'; }
  if (document.getElementById('DivWeatherCurrent')) { document.getElementById('DivWeatherCurrent').style.visibility='hidden'; }
  if (document.getElementById('DivWeatherForecast')) { document.getElementById('DivWeatherForecast').style.visibility='hidden'; }
  if (document.getElementById('DivWhole')) {
    document.getElementById('DivWhole').style.visibility='hidden';
    document.getElementById('DivWhole').style.backgroundColor = '#000000';
  }
  if (document.getElementById('DivStopwatch')) { document.getElementById('DivStopwatch').style.visibility='hidden'; }
  if (document.getElementById('DivDaysSince')) { document.getElementById('DivDaysSince').style.visibility='hidden'; }
}

// Stop everything.
function ClearTimers () {
  if (STtimer!=null) { clearTimeout(STtimer); STtimer=null; }
  if (MasterTimer!=null) { clearTimeout(MasterTimer); MasterTimer=null; }
}

// Manually advance slide in current slideshow.
function NextSlide() {
  ClearTimers();
  BGtimer = -1;
  if (HasFrames()) {
    BGslidePrev = BGslide;
    BGslide = (BGslide+1) % BGdata[BGcurr].BGslides.length;
    if (haslocalstorage()) {
      try { localStorage.setItem('slide', BGslide.toString()); }
      catch (err) { }
    }
  } else {
    if (BGslideInc > 0) {
      // Skip over repeated radar frames.
      BaseFrame = BGslide;
      while ( ((BaseFrame+1)< BGdata[BGcurr].BGslides.length) &&
              (BGdata[BGcurr].BGslides[BGslide].BGsrc.substr(0,RadarURLsrc.length)==RadarURLsrc) &&
              (BGdata[BGcurr].BGslides[BGslide].BGsrc.substr(0,(RadarURLsrc.length-2))==BGdata[BGcurr].BGslides[BaseFrame+1].BGsrc.substr(0,(RadarURLsrc.length-2))) ) {
        BaseFrame++;
      }
      BGslide = BaseFrame;
    } else {
      BGtimer = BGdata[BGcurr].BGslides[BGslide].BGdur*(1+Math.round(.5*BGdurMult*10)/10);
    }
  }
  UpdBG();
  MasterTimer = setTimeout('DoUpd()',MasterDur);
}

// Reasonability check and adjust margins.
function LimitMargins () {
  if (MarginTop<0) { MarginTop=0; }
  if (MarginTop>(WinHgtPhys/3)) { MarginTop=Math.floor(WinHgtPhys/3); }
  if (MarginBottom<0) { MarginBottom=0; }
  if (MarginBottom>(WinHgtPhys/3)) { MarginBottom=Math.floor(WinHgtPhys/3); }
  if (MarginLeft<0) { MarginLeft=0; }
  if (MarginLeft>(WinWidPhys/3)) { MarginLeft=Math.floor(WinWidPhys/3); }
  if (MarginRight<0) { MarginRight=0; }
  if (MarginRight>(WinWidPhys/3)) { MarginRight=Math.floor(WinWidPhys/3); }
}
// Parse margin settings from string (such as URL or local storage).
function ParseMargins (PMin) {
  PMin = PMin.toUpperCase();
  var MarginPatt = /([0-9]+),([0-9]+),([0-9]+),([0-9]+)/;  // Top,Left,Bottom,Right
  var MarginPartStr = '';  var MarginPartVal = [];   var MarginMatches = [];
  MarginMatches = PMin.match(MarginPatt);
  if (MarginMatches) {
    if (MarginMatches.length==5) {
      if (! isNaN(MarginMatches[1])) {
        MarginPartVal[0] = parseInt(MarginMatches[1],10);
        if ( (MarginPartVal[0]>=0) && (MarginPartVal[0]<999) ) {
          if (! isNaN(MarginMatches[2])) {
            MarginPartVal[1] = parseInt(MarginMatches[2],10);
            if ( (MarginPartVal[1]>=0) && (MarginPartVal[1]<999) ) {
              if (! isNaN(MarginMatches[3])) {
                MarginPartVal[2] = parseInt(MarginMatches[3],10);
                if ( (MarginPartVal[2]>=0) && (MarginPartVal[2]<999) ) {
                  if (! isNaN(MarginMatches[4])) {
                    MarginPartVal[3] = parseInt(MarginMatches[4],10);
                    if ( (MarginPartVal[3]>=0) && (MarginPartVal[3]<999) ) {
                       MarginTop = MarginPartVal[0];  MarginLeft = MarginPartVal[1];
                       MarginBottom = MarginPartVal[2];  MarginRight = MarginPartVal[3];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
// Process a margin change (from keyboard controls).
function UpdateMargins () {
  LimitMargins();
  if (haslocalstorage()) {
    try { localStorage.setItem('margins', MarginTop.toString()+','+MarginLeft.toString()+','+MarginBottom.toString()+','+MarginRight.toString()); }
    catch (err) { }
  }
  DoReBoot();
}

// Diagnostic info pop-up.  Called from Q key.
function TechReadout () {
  if (document.getElementById('DivDebug')) {
    if (document.getElementById('DivDebug').style.visibility!='visible') {
      document.getElementById('DivDebug').style.visibility='visible';
    } else {
      document.getElementById('DivDebug').style.visibility='hidden';
    }
  }
  var TRout = "";
  try { TRout = "Display: "+WinWidPhys.toString()+'x'+WinHgtPhys.toString()+"\n"; } catch (err) { }
  try { TRout = TRout + "Margins: "+MarginTop.toString()+','+MarginLeft.toString()+','+MarginBottom.toString()+','+MarginRight.toString()+"\n"; } catch (err) { }
  try { TRout = TRout +"Loaded: "+BootedCurr+"\n"+"Installed: "+BootedFirst+"\n"; } catch (err) { }
  // try { TRout = TRout +"Client: "+navigator.userAgent; } catch (err) { }
  if ('speechSynthesis' in window) {
    if (SpeechVoices!=null) {
      TRout += 'Voices: '+SpeechVoices.length.toString()+"\n";
      TRout += 'Using '+SpeechVoices[VoiceIdx].name + ' (' + SpeechVoices[VoiceIdx].lang + ")\n";
    } else {
      TRout += "No voices loaded.\n";
    }
  } else {
    TRout += "No speech synthesizer.\n";
  }
  if (CfgKeysCnt > 0) {
    TRout += CfgKeysCnt.toString()+" alarms loaded"; if (AlarmsBooted>0) { TRout += " and booted"; };
  } else {
    TRout += "Config load status: "+CfgStat;
  }
  TRout += ".\n";
  try {
    if (WeatherCurrentStat.length>8) { TRout += WeatherCurrentStat+"\n"; }
    if (WeatherForecastStat.length>8) { TRout += WeatherForecastStat+"\n"; }
  } catch (err) {}
  if (SpeechCnt > 0) { TRout += SpeechCnt.toString()+" utterances spoken.\n"; }
  if (AlarmDupeCnt > 0) { TRout += AlarmDupeCnt.toString()+" dupes suppressed.\n"; }
  if (IsChrome()) { TRout += 'Browser is Chrome ("'+navigator.userAgent+'")'+"\n"; }
  DebugMsg(TRout);
}

// Finish screen setup for aspects that require a startup delay.
function FinishScreen () {
  if (IsIOS() || IsAndroid()) {
    window.scrollTo(0, 1);
  }
}

// Setup screen properties, dimensions, divs.
function SetupWindow () {
  if ( (MarginTop>0) || (MarginLeft>0) || (MarginBottom>0) || (MarginRight>0) ) {
    WinWid = WinWidPhys - MarginLeft - MarginRight;
    WinHgt = WinHgtPhys - MarginTop - MarginBottom;
  } else {
    WinWid = WinWidPhys;  WinHgt = WinHgtPhys;
  }
  LimitMargins();
  // 'kiosk' mode disables offsite links.
  if (location.href.toLowerCase().indexOf('kiosk')>=0) {
    WeatherLink = "";
    RadarLink = "";
    ShowIntro = 0;
  }
  document.getElementById('DivWhole').style.top = MarginTop.toString()+'px';
  document.getElementById('DivWhole').style.left = MarginLeft.toString()+'px';
  document.getElementById('DivWhole').style.width = WinWid.toString()+'px';
  document.getElementById('DivWhole').style.height = WinHgt.toString()+'px';
  WinMin = Math.min(WinWid,WinHgt);
  WinMax = Math.max(WinWid,WinHgt);
  // Orientation rotation detection.
  WinPortrait = (WinHgt > WinWid);
  WinSquareHgt = Math.floor(WinHgt/2);
  WinSquareWid = Math.floor(WinWid/2);
  WinSquare = (WinSquareHgt == WinSquareWid);
  RadarWid = Math.floor(WinWid*0.3);
  RadarHgt = Math.floor(WinHgt*0.5);
  WeatherCurrentHgt = WeatherCurrentHgtDefault;
  WeatherForecastHgt = WeatherForecastHgtDefault;
  DateHgt = DateHgtDefault;
  if (WinPortrait) { WeatherCurrentHgt = WeatherCurrentHgt * 0.5; }
  if (WinPortrait) { WeatherForecastHgt = WeatherForecastHgt * 0.5; }
  if (WinPortrait) { DateHgt = DateHgt * 0.4; }
  AnalogSetup();
  setTimeout('FinishScreen()',3000);
}

// Handle UNMUTE button being pressed.
function UnMute () {
  if (document.getElementById('DivUnMute')) {
    SpeechReady = true;
    if (document.getElementById('DivUnMute').style.visibility=='visible') {
      // If newly unmuted, redisplay weather to update links to speech vs weather website.
      WeatherCurrentDisplay();
      WeatherForecastDisplay();
      DebugMsg('Relinking weather.');
    }
    document.getElementById('DivUnMute').style.visibility='hidden';
  }
}

// ===== MAIN DISPATCH =====

// Main setup, refreshes all screen elements. Happens on slideshow change and other major screen events.
function DoSetup () {
  SetupOfs();
  SetupSun();
  SetupRadar();
  SetupScreen();
  SetupWeather();
  document.getElementById('DivUnMute').style.top = (OfsY+Math.round(WinHgt*.90))+'px';
  document.getElementById('DivAbout').style.top = (OfsY+Math.round(WinHgt*.88))+'px';
  // document.getElementById('DivAbout').style.left = (OfsX+Math.round(WinWid*.89))+'px';
  document.getElementById('SpanAbout').style.fontSize = (Math.round(WinHgt*.1))+'px';
  document.getElementById('DivIntro').style.top = (OfsY+Math.round(WinHgt*.15))+'px';
  document.getElementById('DivIntro').style.left = (OfsX+Math.round(WinWid*.15))+'px';
  document.getElementById('DivTime').style.left = (OfsX)+'px';
  document.getElementById('DivTime').style.top = '52px';
  document.getElementById('DivTime').style.width = (WinWid-OfsX)+'px';
  document.getElementById('DivTime').style.textAlign = 'center';
  document.getElementById('DivAnalog').style.left = (OfsX)+'px';
  document.getElementById('DivAnalog').style.top = (OfsY)+'px';
  document.getElementById('DivAnalogBG').style.left = (OfsX)+'px';
  document.getElementById('DivAnalogBG').style.top = (OfsY)+'px';
  document.getElementById('DivBGdesc').style.left = '0px';
  document.getElementById('DivBGdesc').style.top = '0px';
  document.getElementById('DivIntro').innerHTML = About;
  document.getElementById("DivCanvas").style.top = '0px';
  document.getElementById("DivCanvas").style.left = '0px';
  document.getElementById("DivCanvas").style.width = (WinWid-(Math.abs(OfsX)*2))+'px';
  document.getElementById("DivCanvas").style.height = (WinHgt-(Math.abs(OfsY)*2))+'px';
  window.onresize = function(event) {
    if (ResizeTimer) { clearTimeout(ResizeTimer); }
    ResizeTimer = setTimeout('DoResize()',1200);
  }
  DoUpd();
  if (ShowIntro > 0) {
    var IntroDT = new Date(DTadj());
    var IntroHr = IntroDT.getHours();
    var IntroPrev = '';
    if (haslocalstorage()) {
      try {
        IntroPrev = localStorage.getItem('IntroPrev');
      } catch (err) { }
    }
    if (IntroPrev!=IntroHr) {
      IntroTimer=IntroDur;
      if (haslocalstorage()) {
        try {
          localStorage.setItem('IntroPrev', IntroHr);
        } catch (err) { }
      }
    }
  }
  document.getElementById('DivStopwatch').style.top = (OfsY+14)+'px';
  document.getElementById('DivStopwatch').style.left = (OfsX)+'px';
  document.getElementById('DivStopwatch').style.height = (WinHgt-OfsY)+'px';
  document.getElementById('DivStopwatch').style.width = (WinWid-OfsX)+'px';
  document.getElementById('SpanStopwatch').style.fontSize = (Math.round(WinHgt*.5))+'px';
  document.getElementById('DivDaysSince').style.top = (OfsY-20)+'px';
  document.getElementById('DivDaysSince').style.left = (OfsX)+'px';
  document.getElementById('DivDaysSince').style.fontSize = (Math.round(WinHgt*.5))+'px';
  document.getElementById('DivDaysSince').style.height = (Math.round(WinHgt*.5))+'px';
  document.getElementById('DivDaysSince').style.width = (WinWid-OfsX)+'px';
}

// Master update handler.  Uses a single timer.
function DoUpd () {
  if (StopwatchStarted > 0) {
    StopwatchTimer -= MasterDur;
    if (StopwatchTimer<1) {
      ShowStopwatch();
      StopwatchTimer = StopwatchDur;
    }
  }
  if (DaysSinceStarted > 0) {
    DaysSinceTimer -= MasterDur;
    if (DaysSinceTimer<1) ShowDaysSince();
  }
  ClockUpdTimer -= MasterDur;
  if (ClockUpdTimer<1) {
    ShowTime();
    if (BGshowCurr.indexOf('A')>=0) {
      ClockUpdTimer = AnalogClockUpdDur;
    } else {
      ClockUpdTimer = ClockUpdDur;
    }
    if (HourCurr != HourPrev) {  // Hourly change.
      HourPrev = HourCurr;
      SetupOfs();
      ShowMoon();
      ShowDate();
      if ( (! IsIOS()) && (! IsAndroid()) && (SpeechReady) ) { setTimeout('CfgRequest()',10*1000); }  // Reload CFG N seconds after the hour. Doesn't work on mobile, which requires sounds be in response to interactions.
    }
    if (MinuteCurr != MinutePrev) {
      MinutePrev = MinuteCurr;
      ClockRainbowShadowSeq = 0;
    }
    if (SecondCurr != SecondPrev) {
      SecondPrev = SecondCurr;
      if ( (! IsSpeaking) && (SpeechReady) ) CheckAlarms();
    }
    if (DateColor != DateColorPrev) {  // Sunset/Sunrise change.
      ShowMoon();
      ShowDate();
      if (DateColorPrev>=0) DoRefresh();  // Fully refresh screen on sunrise/sunset to reposition elements to reduce screen burn-in.
      DateColorPrev = DateColor;
    }
  }
  WeatherForecastTimer -= MasterDur;
  if (WeatherForecastTimer<1) {
    WeatherForecastRequest();
  }
  WeatherCurrentTimer -= MasterDur;
  if (WeatherCurrentTimer<1) {
    WeatherCurrentRequest();
  }
  if (IntroTimer <= IntroDur) {
    IntroTimer -= MasterDur;
    if (IntroTimer < MasterDur) {
      document.getElementById('DivIntro').style.visibility = 'hidden';
      IntroTimer = IntroDur+1;
    } else {
      document.getElementById('DivIntro').style.visibility = 'visible';
    }
  }
  UpdBG();
  if (MasterTimer!=null) {
    clearTimeout(MasterTimer);
    MasterTimer = null;
  }
  MasterTimer = setTimeout('DoUpd()',MasterDur);
}

// Handle user keypress.  Used in body tag to catch all keypad events.
function CheckKeypress (e) {
  var KeyPressedCodeRaw = e.keyCode;
  var KeyPressedCode = KeyPressedCodeRaw;
  var BaseFrame = -1;
  var IncTemp = 0;
  // Convert numeric keypad cursor keycodes back to numbers.
  if (KeyPressedCode==35) { KeyPressedCode=1+48; }
  if (KeyPressedCode==40) { KeyPressedCode=2+48; }
  if (KeyPressedCode==34) { KeyPressedCode=3+48; }
  if (KeyPressedCode==37) { KeyPressedCode=4+48; }
  if (KeyPressedCode==12) { KeyPressedCode=5+48; }
  if (KeyPressedCode==39) { KeyPressedCode=6+48; }
  if (KeyPressedCode==36) { KeyPressedCode=7+48; }
  if (KeyPressedCode==38) { KeyPressedCode=8+48; }
  if (KeyPressedCode==33) { KeyPressedCode=9+48; }
  if (KeyPressedCode==46) { KeyPressedCode=110; }
  if (KeyPressedCode==96) { KeyPressedCode=48; }
  if ( (KeyPressedCode>26) && (KeyPressedCode<128) ) {  // Special handling of multi key sequences.
    while (KeysPressed.length>5) { KeysPressed = KeysPressed.substr(1,5); }
    KeysPressed = KeysPressed+String.fromCharCode(KeyPressedCode).toUpperCase();
    if (KeysPressed == "000000") { location.reload(); } // Force reload on six zeroes for tech support purposes.
    if (KeysPressed == "666666") { location.href = 'https://bedno.com/media/twister/index.htm?u='+encodeURIComponent(location.href).replace('#','#'); } // Hidden exit to Twsiter game.
    if (KeysPressed == "999999") { location.href = 'https://bedno.com/ispacewar?u='+encodeURIComponent(location.href).replace('#','#'); } // Hidden exit to iSpacewar! game.
  }
  DebugMsg("KeyCode:"+KeyPressedCode.toString()+"("+KeyPressedCodeRaw+")");
  if (KeyPressedCode == 32) {  // Space = next BG
    ClearTimers();
    if (MasterTimer!=null) { clearTimeout(MasterTimer); }
    NextBG();
    MasterTimer = setTimeout('DoUpd()',MasterDur);
  } else {
    if (KeyPressedCode == 67) {  // 'c' = Display tests.
      ClearTimers();
      AllDivsOff();
      DoDiags();
    } else {
      if (KeyPressedCode == 48) {  // '0' = Display Off
        if (BGpausedAt<0) {  // pause
          BGpausedAt = BGcurr;
          ClearTimers();
          AllDivsOff();
          // Cancel stopwatch.
          StopwatchStarted = 0;  StopwatchLaps = "";
          document.getElementById('SpanStopwatch').innerHTML = "";
          SpeechCancel();
        } else {  // resume
          BGcurr = BGpausedAt;  BGpausedAt = -1;
          BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
          SetupScreen();
          ClockUpdTimer = -1;
          DoUpd();
        }
      } else {
        if (KeyPressedCode == 106) {  // '*' = slow
          BGdurMult += 1;  if (BGdurMult>7) { BGdurMult = 0; }
          if (BGdurMult>0) { BGdurMultStr = ' *'+(1+Math.round(.5*BGdurMult*10)/10).toString(); } else { BGdurMultStr = ''; }
          if (document.getElementById('SpanBGdesc')) { document.getElementById('SpanBGdesc').innerText += BGdurMultStr; }
        } else {
          if ( (KeyPressedCode == 109) || (KeyPressedCode == 189) ) {  // '-' = Pause | Resume background sequencing.
            if (! HasFrames()) {
              if (BGslideInc>0) { BGslideInc = 0; } else { BGslideInc = 1; }
              if (BGslideInc>0) {
                NextSlide();
                if (document.getElementById('SpanBGdesc')) { document.getElementById('SpanBGdesc').style.backgroundColor  = ''; }
              } else {
                ClearTimers();
                if (document.getElementById('SpanBGdesc')) { document.getElementById('SpanBGdesc').style.backgroundColor  = '#020066'; }
              }
              MasterTimer = setTimeout('DoUpd()',MasterDur);
            } else {
              if (BGslideInc>0) { BGslideInc = 0; } else { BGslideInc = 1; }
              ClearTimers();
              MasterTimer = setTimeout('DoUpd()',MasterDur);
            }
          } else {
            if ( (KeyPressedCode == 107) || (KeyPressedCode == 187) ) {  // '+' = Next slide in current slideshow.
              BGslideIncPrev = BGslideInc;  BGslideInc = 1;  NextSlide();  BGslideInc = BGslideIncPrev;
            } else {
              if ( (KeyPressedCode > 48) && (KeyPressedCode <= 48+BGdata.length) ) {  // Quick jump to specified mode, from numeric keypad.
                BGcurrChk = KeyPressedCode - (48+1);
                if (BGcurrChk == BGcurr) {
                  if (BGpausedAt >= 0) {  // Screen was off.
                    BGpausedAt = -1;
                    BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
                    SetupScreen();  ClockUpdTimer = -1;
                    DoUpd();
                  } else {
                    BGslideIncPrev = BGslideInc;  BGslideInc = 1;  NextSlide();  BGslideInc = BGslideIncPrev;
                  }
                } else {
                  ClearTimers();
                  BGcurr = BGcurrChk;  BGpausedAt = -1;
                  if (haslocalstorage()) {
                    try { localStorage.setItem('main', BGcurr.toString()); }
                    catch (err) { }
                  }
                  BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
                  ShowIntro = 0;  IntroTimer = -1;
                  DoRefresh();
                }
              } else {
                if ( (KeyPressedCode > 96) && (KeyPressedCode <= 96+BGdata.length) ) {  // Quick jump to specified mode, from number keys.
                  BGcurrChk = KeyPressedCode - (96+1);
                  if (BGcurrChk == BGcurr) {
                    if (BGpausedAt >= 0) {  // Screen was off.
                      BGpausedAt = -1;
                      BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
                      SetupScreen();  ClockUpdTimer = -1;
                      DoUpd();
                    } else {
                      BGslideIncPrev = BGslideInc;  BGslideInc = 1;  NextSlide();  BGslideInc = BGslideIncPrev;
                    }
                  } else {
                    ClearTimers();
                    BGcurr = BGcurrChk;  BGpausedAt = -1;
                    if (haslocalstorage()) {
                      try { localStorage.setItem('main', BGcurr.toString()); }
                      catch (err) { }
                    }
                    BGshowCurr = BGdata[BGcurr].BGshow;  BGshowOverride = 0;  BGshowArg = '';  BGdurMult = 0;  BGdurMultStr = '';
                    ShowIntro = 0;  IntroTimer = -1;
                    DoRefresh();
                  }
                } else {
                  if ( (KeyPressedCode == 10) || (KeyPressedCode == 13) || (KeyPressedCode == 0) ) {  // ENTER speaks forecast.
                    if (document.getElementById('DivUnMute').style.visibility=='visible') { UnMute(); }
                    ClearTimers();
                    MasterTimer = setTimeout('DoUpd()',MasterDur);
                    SpeakWeather();
                  } else {
                    if ( (KeyPressedCode == 46) || (KeyPressedCode == 110) || (KeyPressedCode == 190) ) {  // '.' = Stopwatch
                      if (StopwatchStarted < 1) {
                        StopwatchDT = new Date();
                        StopwatchStarted = Math.floor(StopwatchDT.getTime() / 1000);
                        StopwatchTimer = StopwatchDur;
                        StopwatchLaps = "";
                        document.getElementById('SpanStopwatch').innerHTML = "";
                      } else {
                        StopwatchDT = new Date();
                        var StopwatchCur = Math.floor(StopwatchDT.getTime() / 1000);
                        StopwatchLaps = "<br>"+FmtSeconds(StopwatchCur-StopwatchStarted)+StopwatchLaps;
                      }
                      document.getElementById('DivStopwatch').style.visibility='visible';
                    } else {
                      if ( (KeyPressedCode == 111) || (KeyPressedCode == 191) )  {  // '/' = Clock display manual options
                        if (BGshowOverride < 1) {  // Initialize override mode.
                          BGshowOverride = 1;
                        } else {
                          BGshowOverride++;  if (BGshowOverride > BGshowArr.length) { BGshowOverride = 1; }
                        }
                        BGshowCurr = BGshowArr[BGshowOverride-1];
                        if (BGdata[BGcurr].BGshow.indexOf('V')>=0) { BGshowCurr += 'V'; }
                        if (BGdata[BGcurr].BGshow.indexOf('S')>=0) { BGshowCurr += 'S'; }
                        if (BGdata[BGcurr].BGshow.indexOf('T')>=0) { BGshowCurr += 'T'; }  // Vocal|Shuffle|Title options aren't overridden.
                        BGslideIncPrev = BGslideInc;  BGslidePrev = BGslide;  BGslideInc = 0;
                        BGtimer = BGdata[BGcurr].BGslides[BGslide].BGdur*(1+Math.round(.5*BGdurMult*10)/10);
                        AllDivsOff();
                        DoSetup();
                        ShowTime();
                        ShowDate();
                        BGslide = BGslidePrev;
                        BGslideInc = BGslideIncPrev;
                      } else {
                        switch(KeyPressedCode) {
                          case 85:
                            IncTemp = Math.min(MarginTop+1, Math.floor(WinHgtPhys/3)); // u=85=Top+
                            if (IncTemp != MarginTop) { MarginTop = IncTemp;  UpdateMargins(); }
                            break;
                          case 73:
                            IncTemp = Math.max(MarginTop-1, 0); // i=73=Top-
                            if (IncTemp != MarginTop) { MarginTop = IncTemp;  UpdateMargins(); }
                            break;
                          case 79:
                            IncTemp = Math.min(MarginLeft+1, Math.floor(WinWidPhys/3)); // o=79=Left+
                            if (IncTemp != MarginLeft) { MarginLeft = IncTemp;  UpdateMargins(); }
                            break;
                          case 80:
                            IncTemp = Math.max(MarginLeft-1, 0); // p=80=Left-
                            if (IncTemp != MarginLeft) { MarginLeft = IncTemp;  UpdateMargins(); }
                            break;
                          case 72:
                            IncTemp = Math.min(MarginBottom+1, Math.floor(WinHgtPhys/3)); // h=72=Bottom+
                            if (IncTemp != MarginBottom) { MarginBottom = IncTemp;  UpdateMargins(); }
                            break;
                          case 74:
                            IncTemp = Math.max(MarginBottom-1, 0); // j=74=Bottom-
                            if (IncTemp != MarginBottom) { MarginBottom = IncTemp;  UpdateMargins(); }
                            break;
                          case 75:
                            IncTemp = Math.min(MarginRight+1, Math.floor(WinWidPhys/3)); // k=75=Right+
                            if (IncTemp != MarginRight) { MarginRight = IncTemp;  UpdateMargins(); }
                            break;
                          case 76:
                            IncTemp = Math.max(MarginRight-1, 0); // l=76=Right-
                            if (IncTemp != MarginRight) { MarginRight = IncTemp;  UpdateMargins(); }
                            break;
                          case 81:  // Q key shows tech details
                            TechReadout();
                            break;
                          case 82:  // R key fully reloads
                            location.reload();
                            break;
                          default:
                           // Unhandled keys do nothing.
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Do (most) boot functions (almost) as if page was reloaded but including screen size re-evaluations.
function DoReBoot () {
  WinWidPhys = window.innerWidth && document.documentElement.clientWidth ? Math.min(window.innerWidth, document.documentElement.clientWidth) : window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth;
  WinHgtPhys = window.innerHeight && document.documentElement.clientHeight ? Math.min(window.innerHeight, document.documentElement.clientHeight) : window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;
  //  if (IsIOS()) { WinWidPhys = screen.width; WinHgtPhys = screen.height; }
  SetupWindow();
  DoRefresh();
}

// Boot happens only once, after page load.
function DoBoot () {
  FetchUptimes();
  // Remove secured images if not at authorized installation.
  var ArgLp = 0;  var SubLp = 0;  var BGslideMax = 0;
  for (ArgLp=BGdata.length-1; ArgLp>=0; ArgLp--) {
    BGslideMax=BGdata[ArgLp].BGslides.length-1;
    for (SubLp=BGslideMax; SubLp>=0; SubLp--) {
      if ( (BGdata[ArgLp].BGslides[SubLp].BGauth.length>1) && (location.href.toLowerCase().indexOf(BGdata[ArgLp].BGslides[SubLp].BGauth.toLowerCase())<0) ) {
        BGdata[ArgLp].BGslides.splice(SubLp,1);
      }
    }
  }
  var ShowPatt = /view=([A-Z0-9]+)/i;
  var ShowMatches = location.href.toUpperCase().match(ShowPatt);
  if (ShowMatches) { if (ShowMatches.length>0) { if (ShowMatches[1].length>0) { BGshowArg = ShowMatches[1]; ShowIntro = 0; } } }
  if (haslocalstorage()) {
    try {
      var BGcurrArg = localStorage.getItem('main');  if ( (BGcurrArg.length<1) || (BGcurrArg.length>2) ) { BGcurrArg = ''; }
      if (BGcurrArg.length > 0) {
        var BGcurrTmp = parseInt(BGcurrArg);
        if ( (BGcurrTmp >= 0) && (BGcurrTmp < BGdata.length) ) {
          BGcurr = BGcurrTmp;  BGpausedAt = -1;
          if (BGshowArg.length > 0) { BGshowCurr = BGshowArg; } else { BGshowCurr = BGdata[BGcurr].BGshow; }
          BGshowOverride = 0;  BGdurMult = 0;  BGdurMultStr = '';
          ShowIntro = 0;  IntroTimer = -1;
        }
      } else { }
    } catch (err) { }
  }
  // Optionally set BG from URL using parameter like ?<code>
  var CodePatt = '';  var CodeMatch = '';  var CodeIn = '';
  CodeIn = ' '+location.href.toUpperCase()+' ';
  // Optionally enable debug panel.
  if (location.href.toUpperCase().indexOf('DEBUG')>1) {
    if (document.getElementById('DivDebug')) {
      document.getElementById('DivDebug').style.visibility='visible';
    }
  }
  for (ArgLp=0; ArgLp<BGdata.length; ArgLp++) {
    CodePatt = '[^a-zA-Z0-9]'+BGdata[ArgLp].BGcode.toUpperCase()+'[^a-zA-Z0-9]';
    CodeMatch = new RegExp(CodePatt);
    if (CodeMatch.test(CodeIn)) {
      BGcurr = ArgLp;  BGpausedAt = -1;
      if (BGshowArg.length > 0) { BGshowCurr = BGshowArg; } else { BGshowCurr = BGdata[BGcurr].BGshow; }
      BGshowOverride = 0;  BGdurMult = 0;  BGdurMultStr = '';  ShowIntro = 0;  IntroTimer = -1;
      // Check for optional .[slide] extension, launches slideshow at particular slide.  Esp. useful for movie slideshow.
      for (SubLp=0; SubLp<BGdata[BGcurr].BGslides.length; SubLp++) {
        if (location.href.toLowerCase().indexOf(BGdata[BGcurr].BGcode.toLowerCase()+'.'+SubLp.toString())>=0) {
          BGslide = SubLp;  BGslidePrev = BGslide;
          if (haslocalstorage()) {
            try { localStorage.setItem('slide', BGslide.toString()); }
            catch (err) { }
          }
        }
      }
      if (haslocalstorage()) {
        try { localStorage.setItem('main', BGcurr.toString()); }
        catch (err) {
        }
      }
    }
  }
  ParseMargins(CodeIn);
  if ( (MarginTop>0) || (MarginLeft>0) || (MarginBottom>0) || (MarginRight>0) ) {
    if (haslocalstorage()) {
      try { localStorage.setItem('margins', MarginTop.toString()+','+MarginLeft.toString()+','+MarginBottom.toString()+','+MarginRight.toString()); }
      catch (err) { }
    }
  } else {
    if (haslocalstorage()) {
      try {
        var ReadMargins = localStorage.getItem('margins');
        ParseMargins(ReadMargins);
      }
      catch (err) { }
    }
  }
  if ('speechSynthesis' in window) {
    SpeechVoices = window.speechSynthesis.getVoices();
    speechSynthesis.addEventListener("voiceschanged", SpeechVoicesLoad);
    setTimeout('SpeechVoicesLoad()',2000);  // Failsafe.
  }
  DoReBoot();
}

// Clear all counters and indecis.
function DoInit () {
  if (STtimer!=null) { clearTimeout(STtimer); }
  if (MasterTimer!=null) { clearTimeout(MasterTimer); }
  MasterTimer = null;
  BGslide = 0;  BGslidePrev = BGslide;  BGslideInc = 1;  BGtimer = -1;  BGdurMult = 0;
  ClockUpdTimer = 0;
  HourPrev = -1;  HourCurr = -1;  MinutePrev = -1;  MinuteCurr = -1;
  BGframe = -1;
  if (BGshowArg.length > 0) { BGshowCurr = BGshowArg; } else { BGshowCurr = BGdata[BGcurr].BGshow; }
  BGshowOverride = 0;  BGdurMult = 0;  BGdurMultStr = '';
}

// Completely refresh screen to update from major display changes.
function DoRefresh () {
  DoInit();
  AllDivsOff();
  DoSetup();
}

</script>
</head>

<body onLoad="DoBoot();" style="margin-top:0px; margin-left:0px; margin-bottom:0px; margin-right:0px; overflow:hidden;" bgColor='#000000' onKeydown='CheckKeypress(event);'>

<div id="DivWhole" style="z-index:0; position:relative; width:100%; height:100%; overflow:hidden; border-radius:25px;">
<canvas id="DivCanvas" style="z-index:1;" onClick="NextBG();"> </canvas>

<div id="DivBG" style="z-index:2; position:absolute; left:0px; top:0px; overflow:hidden;"></div>

<div id="DivDaysSince" style="z-index:3; position:absolute; left:0px; top:0px; visibility:hidden; text-align:left;"><span id="SpanDaysSince" style="font-family:Arial; text-decoration:bold; font-stretch:condensed; text-shadow:-4px 4px 0px #FFFFFF; -webkit-font-smoothing:antialiased;"></span></div>

<div id="DivAnalogBG" style="z-index:4; position:absolute; left:0px; top:0px; visibility:hidden;"><canvas id="AnalogClockBG" onClick="NextSlide();"> </canvas>
<div id="DivAnalog" style="z-index:5; position:absolute; left:0px; top:0px; visibility:hidden;"><canvas id="AnalogClock" onClick="NextSlide();"> </canvas></div>
</div>

<div id="DivRadar" style="z-index:6; position:absolute; left:0px; top:0px;"></div>
<div id="DivMoonImg" style="z-index:7; position:absolute; left:0px; top:-24px;"></div>
<div id="DivSunTimes" style="z-index:8; position:absolute; left:0px; top:0px; text-align:right;"></div>

<div id="DivBGdesc" style="z-index:9; position:absolute; left:0px; top:0px;"></div>

<div id="DivTime" style="z-index:10; position:absolute; left:1px; top:-10px; text-align:center;"><span id="SpanTime" onMouseDown='NextSlide();'></span></div>

<div id="DivWeatherCurrent" style="z-index:12; position:absolute; left:0px; top:0px; text-align:center; opacity:0.8;"></div>

<div id="DivWeatherForecast" style="z-index:13; position:absolute; left:0px; top:0px;"></div>

<div id="DivDate" style="z-index:14; position:absolute; left:1px; top:0px;"><span id="SpanDate"></span></div>

<div id="DivStopwatch" style="z-index:15; position:absolute; left:0px; top:0px; visibility:hidden; text-align:center;"><span id="SpanStopwatch" style="font-family:Arial; text-decoration:bold; font-stretch:condensed; text-shadow:-4px 4px 0px #9A008D; -webkit-font-smoothing:antialiased; color:red; line-height:81%; font-size:36px;"></span></div>


<div id="DivAbout" style="border-radius:20px; z-index:16; position:absolute; left:6px; top:0px; visibility:hidden;"><span id="SpanAbout" onClick="IntroTimer=IntroDur;" style="font-family:Arial; color:#4040FF; text-decoration:none; font-size:36px; -webkit-font-smoothing:antialiased;"><b>?</b></span></div>

<div id="DivUnMute" style="z-index:17; position:absolute; left:32px; top:0px; background-color:#FFFFFF; padding:4px; font-family:Arial; color:#000000; font-size:12pt; border-radius:10px; border-style:solid; border-width:6px; border-color:#FF0000; visibility:hidden;" onClick="UnMute();"><b>UNMUTE &#x1F507;</b></div>

<div id="DivIntro" style="z-index:18; position:absolute; left:0px; top:0px; visibility:hidden; background-color:#FFFFFF; padding-left:16px; padding-top:16px; padding-right:16px; padding-bottom:16px; font-family:Arial; color:#000000; font-size:12pt; border-style:solid; border-width:8px; border-color:#FF0000; display:inline-block;" onClick="IntroTimer=0;document.getElementById('DivIntro').style.visibility='hidden';"></div>

<div id="DivDebug" style="z-index:19; visibility:hidden; opacity:0.8; overflow:auto; position:absolute; left:0px; top:0px; width:200px; height:200px; background-color:#FFFFFF; display:inline-block;">
<textarea readonly id="DivDebugText" style="width:100%; height:100%; resize:none; border:none; padding:0; box-sizing:border-box; overflow:auto; font-family:Arial; color:#000000; font-size:8pt; display:flex; flex-direction:column-reverse;"> </textarea>
</div>

</div>

<script>
// ===== SUN and MOON =====
// SunCalc.js - (c) 2011-2014, Vladimir Agafonkin * JavaScript library for calculating sun/mooon position and phases. * https://github.com/mourner/suncalc
(function () { 'use strict';
// shortcuts for easier to read formulas
var PI   = Math.PI,
    sin  = Math.sin,
    cos  = Math.cos,
    tan  = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad  = PI / 180;
// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas
// date/time constants and conversions
var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;
function toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }
function fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }
function toDays(date)   { return toJulian(date) - J2000; }
// general calculations for position
var e = rad * 23.4397; // obliquity of the Earth
function rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }
function declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }
function azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }
function altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }
function siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }
// general sun calculations
function solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }
function eclipticLongitude(M) {
    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center
        P = rad * 102.9372; // perihelion of the Earth
    return M + C + P + PI;
}
function sunCoords(d) {
    var M = solarMeanAnomaly(d),
        L = eclipticLongitude(M);
    return {
        dec: declination(L, 0),
        ra: rightAscension(L, 0)
    };
}
var SunCalc = {};
// calculates sun position for a given date and latitude/longitude
SunCalc.getPosition = function (date, lat, lng) {
    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),
        c  = sunCoords(d),
        H  = siderealTime(d, lw) - c.ra;
    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: altitude(H, phi, c.dec)
    };
};
var times = SunCalc.times = [  // sun times configuration (angle, morning name, evening name)
    [-0.833, 'sunrise',       'sunset'      ],
    [  -0.3, 'sunriseEnd',    'sunsetStart' ],
    [    -6, 'dawn',          'dusk'        ],
    [   -12, 'nauticalDawn',  'nauticalDusk'],
    [   -18, 'nightEnd',      'night'       ],
    [     6, 'goldenHourEnd', 'goldenHour'  ]
];
SunCalc.addTime = function (angle, riseName, setName) {  // adds a custom time to the times config
    times.push([angle, riseName, setName]);
};
// calculations for sun times
var J0 = 0.0009;
function julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }
function approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }
function solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }
function hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }
function getSetJ(h, lw, phi, dec, n, M, L) {  // returns set time for the given sun altitude
    var w = hourAngle(h, phi, dec),
        a = approxTransit(w, lw, n);
    return solarTransitJ(a, M, L);
}
SunCalc.getTimes = function (date, lat, lng) {  // calculates sun times for a given date and latitude/longitude
    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),
        n = julianCycle(d, lw),
        ds = approxTransit(0, lw, n),
        M = solarMeanAnomaly(ds),
        L = eclipticLongitude(M),
        dec = declination(L, 0),
        Jnoon = solarTransitJ(ds, M, L),
        i, len, time, Jset, Jrise;
    var result = {
        solarNoon: fromJulian(Jnoon),
        nadir: fromJulian(Jnoon - 0.5)
    };
    for (i = 0, len = times.length; i < len; i += 1) {
        time = times[i];
        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);
        Jrise = Jnoon - (Jset - Jnoon);
        result[time[1]] = fromJulian(Jrise);
        result[time[2]] = fromJulian(Jset);
    }
    return result;
};
// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas
function moonCoords(d) { // geocentric ecliptic coordinates of the moon
    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
        M = rad * (134.963 + 13.064993 * d), // mean anomaly
        F = rad * (93.272 + 13.229350 * d),  // mean distance
        l  = L + rad * 6.289 * sin(M), // longitude
        b  = rad * 5.128 * sin(F),     // latitude
        dt = 385001 - 20905 * cos(M);  // distance to the moon in km
    return {
        ra: rightAscension(l, b),
        dec: declination(l, b),
        dist: dt
    };
}
SunCalc.getMoonPosition = function (date, lat, lng) {
    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),
        c = moonCoords(d),
        H = siderealTime(d, lw) - c.ra,
        h = altitude(H, phi, c.dec);
    // altitude correction for refraction
    h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));
    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: h,
        distance: c.dist
    };
};
// calculations for illumination parameters of the moon,
// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.
SunCalc.getMoonIllumination = function (date) {
    var d = toDays(date),
        s = sunCoords(d),
        m = moonCoords(d),
        sdist = 149598000, // distance from Earth to Sun in km
        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),
        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -
                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));
    return {
        fraction: (1 + cos(inc)) / 2,
        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,
        angle: angle
    };
};
function hoursLater(date, h) {
    return new Date(date.valueOf() + h * dayMs / 24);
}
// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article
SunCalc.getMoonTimes = function (date, lat, lng) {
    var t = new Date(date);
    t.setHours(0);
    t.setMinutes(0);
    t.setSeconds(0);
    t.setMilliseconds(0);
    var hc = 0.133 * rad,
        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,
        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;
    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)
    for (var i = 1; i <= 24; i += 2) {
        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;
        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;
        a = (h0 + h2) / 2 - h1;
        b = (h2 - h0) / 2;
        xe = -b / (2 * a);
        ye = (a * xe + b) * xe + h1;
        d = b * b - 4 * a * h1;
        roots = 0;
        if (d >= 0) {
            dx = Math.sqrt(d) / (Math.abs(a) * 2);
            x1 = xe - dx;
            x2 = xe + dx;
            if (Math.abs(x1) <= 1) roots++;
            if (Math.abs(x2) <= 1) roots++;
            if (x1 < -1) x1 = x2;
        }
        if (roots === 1) {
            if (h0 < 0) rise = i + x1;
            else set = i + x1;
        } else if (roots === 2) {
            rise = i + (ye < 0 ? x2 : x1);
            set = i + (ye < 0 ? x1 : x2);
        }
        if (rise && set) break;
        h0 = h2;
    }
    var result = {};
    if (rise) result.rise = hoursLater(t, rise);
    if (set) result.set = hoursLater(t, set);
    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;
    return result;
};
// export as AMD module / Node module / browser variable
if (typeof define === 'function' && define.amd) define(SunCalc);
else if (typeof module !== 'undefined') module.exports = SunCalc;
else window.SunCalc = SunCalc;
}());
</script>

</body>
</html>
